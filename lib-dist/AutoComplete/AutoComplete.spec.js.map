{"version":3,"sources":["../../src/AutoComplete/AutoComplete.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","it","strictEqual","fuzzyFilter","test_string","search_result","wrapper","find","prop","undefined","name","props","value","done","onChange","target","setTimeout","callCount","error","handleNewRequest","setState","open","searchText","onItemTouchTap","key","deepEqual","args","handleUpdateInput","source","zDepth","canAutoPosition","popoverProps","handleClose","instance","close","state"],"mappings":"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","file":"AutoComplete.spec.js","sourcesContent":["/* eslint-env mocha */\n\nimport React from 'react';\nimport {assert} from 'chai';\nimport {shallow} from 'enzyme';\nimport {spy} from 'sinon';\nimport AutoComplete from './AutoComplete';\nimport Menu from '../Menu/Menu';\nimport Popover from '../Popover/Popover';\nimport TextField from '../TextField/TextField';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<AutoComplete />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  describe('filter', () => {\n    it('search using fuzzy filter', () => {\n      assert.strictEqual(AutoComplete.fuzzyFilter('ea', 'Peach'), true, 'should match Peach with ea');\n      assert.strictEqual(AutoComplete.fuzzyFilter('pah', 'Peach'), true, 'should match Peach with pah');\n      assert.strictEqual(AutoComplete.fuzzyFilter('peach', 'Peach'), true, 'should match Peach with peach');\n\n      assert.strictEqual(AutoComplete.fuzzyFilter('phc', 'Peach'), false, 'should not match Peach with phc');\n      assert.strictEqual(AutoComplete.fuzzyFilter('pp', 'Peach'), false, 'should not match Peach with pp');\n      assert.strictEqual(AutoComplete.fuzzyFilter('pb', 'Peach'), false, 'should not match Peach with pb');\n\n      // testing longer string\n      const test_string = 'The best thing about a Boolean is even if you are wrong, you are only off by a bit.';\n\n      let search_result = AutoComplete.fuzzyFilter('bOOLEAN', test_string);\n      assert.strictEqual(search_result, true, 'should match with case insensitive');\n\n      search_result = AutoComplete.fuzzyFilter('The a Boolean if wrong', test_string);\n      assert.strictEqual(search_result, true, 'should match pattern with spaces');\n\n      search_result = AutoComplete.fuzzyFilter(' if ,bit.', test_string);\n      assert.strictEqual(search_result, true, 'should match pattern with comma and period');\n\n      search_result = AutoComplete.fuzzyFilter('the best q', test_string);\n      assert.strictEqual(search_result, false, 'should not match pattern with letter is not contained in search text');\n\n      search_result = AutoComplete.fuzzyFilter('off bit by', 'off by a bit');\n      assert.strictEqual(search_result, false, 'should not match pattern when can not find letters in order ');\n    });\n\n    /**\n     * This test ensures that <AutoComplete /> doesn't pass down filter property to <TextField />,\n     * otherwise <TextField /> will render input as <input filter=\"function (...) {...}\" ... />,\n     * which will have different behaviors in different environments, producing indent conflicts and\n     * breaking server rendering.\n     * Read more: https://github.com/callemall/material-ui/issues/4195\n     */\n    it('should not pass filter property to children', () => {\n      const wrapper = shallowWithContext(\n        <AutoComplete dataSource={[]} />\n      );\n\n      assert.strictEqual(\n        wrapper.find('TextField').prop('filter'),\n        undefined,\n        'should not pass filter property to children');\n    });\n  });\n\n  describe('prop: value', () => {\n    it('should not override value prop of TextField', () => {\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          value={{name: 'foo'}}\n          dataSource={['foo', 'bar']}\n          searchText=\"f\"\n          menuCloseDelay={10}\n        />\n      );\n\n      assert.strictEqual(wrapper.find(TextField).props().value, 'f');\n    });\n  });\n\n  describe('prop: onChange', () => {\n    it('should not override onChange prop of TextField', (done) => {\n      const onChange = spy();\n\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          onChange={onChange}\n          dataSource={['foo', 'bar']}\n          searchText=\"f\"\n          menuCloseDelay={10}\n        />\n      );\n\n      wrapper.find(TextField).props().onChange({target: {value: 'fo'}});\n\n      setTimeout(() => {\n        try {\n          assert.strictEqual(onChange.callCount, 0);\n\n          done();\n        } catch (error) {\n          done(error);\n        }\n      }, 20);\n    });\n  });\n\n  describe('prop: onNewRequest', () => {\n    it('should call onNewRequest once the popover is closed', (done) => {\n      const handleNewRequest = spy();\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          dataSource={['foo', 'bar']}\n          onNewRequest={handleNewRequest}\n          menuCloseDelay={10}\n        />\n      );\n\n      wrapper.setState({open: true, searchText: 'f'});\n      wrapper.find(Menu).props().onItemTouchTap({}, {\n        key: 0,\n      });\n      assert.strictEqual(handleNewRequest.callCount, 0);\n\n      setTimeout(() => {\n        assert.strictEqual(handleNewRequest.callCount, 1);\n        assert.deepEqual(handleNewRequest.args[0], [\n          'foo',\n          0,\n        ]);\n        done();\n      }, 20);\n    });\n  });\n\n  describe('prop: onUpdateInput', () => {\n    it('should fire after selection from menu', (done) => {\n      const handleUpdateInput = spy();\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          dataSource={['foo', 'bar']}\n          onUpdateInput={handleUpdateInput}\n        />\n      );\n\n      wrapper.setState({open: true, searchText: 'f'});\n      wrapper.find(Menu).props().onItemTouchTap({}, {\n        key: 0,\n      });\n\n      setTimeout(() => {\n        assert.strictEqual(handleUpdateInput.callCount, 1);\n        assert.deepEqual(handleUpdateInput.args[0], [\n          'foo',\n          [\n            'foo',\n            'bar',\n          ],\n          {\n            source: 'touchTap',\n          },\n        ]);\n        done();\n      }, 0);\n    });\n  });\n\n  describe('prop: popoverProps', () => {\n    it('should pass popoverProps to Popover', () => {\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          dataSource={['foo', 'bar']}\n          popoverProps={{\n            zDepth: 3,\n            canAutoPosition: true,\n          }}\n        />\n      );\n\n      const popoverProps = wrapper.find(Popover).props();\n\n      assert.strictEqual(popoverProps.zDepth, 3, 'should pass popoverProps to Popover');\n      assert.strictEqual(popoverProps.canAutoPosition, true, 'should overrides the default');\n    });\n  });\n\n  describe('prop: onClose', () => {\n    it('should call onClose when the menu is closed', () => {\n      const handleClose = spy();\n      const wrapper = shallowWithContext(\n        <AutoComplete dataSource={['foo', 'bar']} onClose={handleClose} />\n      );\n      wrapper.instance().close();\n      assert.strictEqual(handleClose.callCount, 1);\n    });\n  });\n\n  describe('prop: searchText', () => {\n    it('onItemTouchTap should not call setState:searchText when searchText is controlled', () => {\n      const wrapper = shallowWithContext(\n        <AutoComplete\n          dataSource={['foo', 'bar']}\n          searchText=\"f\"\n        />\n      );\n\n      wrapper.setState({open: true});\n      wrapper.find(Menu).props().onItemTouchTap({}, {\n        key: 0,\n      });\n      assert.strictEqual(wrapper.state().searchText, 'f');\n    });\n  });\n});\n"]}