{"version":3,"sources":["../../src/FontIcon/FontIcon.js"],"names":["getStyles","props","context","state","color","hoverColor","baseTheme","muiTheme","offColor","palette","textColor","onColor","root","hovered","position","fontSize","spacing","iconSize","display","userSelect","transition","easeOut","FontIcon","handleMouseLeave","event","undefined","setState","onMouseLeave","handleMouseEnter","onMouseEnter","render","style","other","prepareStyles","styles","muiName","propTypes","string","func","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0C;AAAA,MAEtCC,KAFsC,GAIpCH,KAJoC,CAEtCG,KAFsC;AAAA,MAGtCC,UAHsC,GAIpCJ,KAJoC,CAGtCI,UAHsC;AAAA,MAMjCC,SANiC,GAMpBJ,QAAQK,QANY,CAMjCD,SANiC;;AAOxC,MAAME,WAAWJ,SAASE,UAAUG,OAAV,CAAkBC,SAA5C;AACA,MAAMC,UAAUN,cAAcG,QAA9B;;AAEA,SAAO;AACLI,UAAM;AACJR,aAAOD,MAAMU,OAAN,GAAgBF,OAAhB,GAA0BH,QAD7B;AAEJM,gBAAU,UAFN;AAGJC,gBAAUT,UAAUU,OAAV,CAAkBC,QAHxB;AAIJC,eAAS,cAJL;AAKJC,kBAAY,MALR;AAMJC,kBAAY,sBAAYC,OAAZ;AANR;AADD,GAAP;AAUD;;IAEKC,Q;;;;;;;;;;;;0JAgCJnB,K,GAAQ;AACNU,eAAS;AADH,K,QAIRU,gB,GAAmB,UAACC,KAAD,EAAW;AAC5B;AACA,UAAI,MAAKvB,KAAL,CAAWI,UAAX,KAA0BoB,SAA9B,EAAyC;AACvC,cAAKC,QAAL,CAAc,EAACb,SAAS,KAAV,EAAd;AACD;AACD,UAAI,MAAKZ,KAAL,CAAW0B,YAAf,EAA6B;AAC3B,cAAK1B,KAAL,CAAW0B,YAAX,CAAwBH,KAAxB;AACD;AACF,K,QAEDI,gB,GAAmB,UAACJ,KAAD,EAAW;AAC5B;AACA,UAAI,MAAKvB,KAAL,CAAWI,UAAX,KAA0BoB,SAA9B,EAAyC;AACvC,cAAKC,QAAL,CAAc,EAACb,SAAS,IAAV,EAAd;AACD;AACD,UAAI,MAAKZ,KAAL,CAAW4B,YAAf,EAA6B;AAC3B,cAAK5B,KAAL,CAAW4B,YAAX,CAAwBL,KAAxB;AACD;AACF,K;;;qBAEDM,M,qBAAS;AAAA,iBAOH,KAAK7B,KAPF;AAAA,QAELI,UAFK,UAELA,UAFK;AAAA,QAGLsB,YAHK,UAGLA,YAHK;AAAA,QAILE,YAJK,UAILA,YAJK;AAAA,QAKLE,KALK,UAKLA,KALK;AAAA,QAMFC,KANE;AAAA,QASAC,aATA,GASiB,KAAK/B,OAAL,CAAaK,QAT9B,CASA0B,aATA;;AAUP,QAAMC,SAASlC,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,EAAoC,KAAKC,KAAzC,CAAf;;AAEA,WACE,iEACM6B,KADN;AAEE,oBAAc,KAAKT,gBAFrB;AAGE,oBAAc,KAAKK,gBAHrB;AAIE,aAAOK,cAAc,sBAAcC,OAAOtB,IAArB,EAA2BmB,KAA3B,CAAd;AAJT,OADF;AAQD,G;;;4BA3EMI,O,GAAU,U,SAEVC,S,GAAY;AACjB;;;;AAIAhC,SAAO,oBAAUiC,MALA;AAMjB;;;AAGAhC,cAAY,oBAAUgC,MATL;AAUjB;AACAR,gBAAc,oBAAUS,IAXP;AAYjB;AACAX,gBAAc,oBAAUW,IAbP;AAcjB;;;AAGAP,SAAO,oBAAUQ;AAjBA,C,SAoBZC,Y,GAAe;AACpBX,gBAAc,wBAAM,CAAE,CADF;AAEpBF,gBAAc,wBAAM,CAAE;AAFF,C,SAKfc,Y,GAAe;AACpBlC,YAAU,oBAAUgC,MAAV,CAAiBG;AADP,C;kBAmDTpB,Q","file":"FontIcon.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\n\nfunction getStyles(props, context, state) {\n  const {\n    color,\n    hoverColor,\n  } = props;\n\n  const {baseTheme} = context.muiTheme;\n  const offColor = color || baseTheme.palette.textColor;\n  const onColor = hoverColor || offColor;\n\n  return {\n    root: {\n      color: state.hovered ? onColor : offColor,\n      position: 'relative',\n      fontSize: baseTheme.spacing.iconSize,\n      display: 'inline-block',\n      userSelect: 'none',\n      transition: transitions.easeOut(),\n    },\n  };\n}\n\nclass FontIcon extends Component {\n  static muiName = 'FontIcon';\n\n  static propTypes = {\n    /**\n     * This is the font color of the font icon. If not specified,\n     * this component will default to muiTheme.palette.textColor.\n     */\n    color: PropTypes.string,\n    /**\n     * This is the icon color when the mouse hovers over the icon.\n     */\n    hoverColor: PropTypes.string,\n    /** @ignore */\n    onMouseEnter: PropTypes.func,\n    /** @ignore */\n    onMouseLeave: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleMouseLeave = (event) => {\n    // hover is needed only when a hoverColor is defined\n    if (this.props.hoverColor !== undefined) {\n      this.setState({hovered: false});\n    }\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(event);\n    }\n  };\n\n  handleMouseEnter = (event) => {\n    // hover is needed only when a hoverColor is defined\n    if (this.props.hoverColor !== undefined) {\n      this.setState({hovered: true});\n    }\n    if (this.props.onMouseEnter) {\n      this.props.onMouseEnter(event);\n    }\n  };\n\n  render() {\n    const {\n      hoverColor, // eslint-disable-line no-unused-vars\n      onMouseLeave, // eslint-disable-line no-unused-vars\n      onMouseEnter, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context, this.state);\n\n    return (\n      <span\n        {...other}\n        onMouseLeave={this.handleMouseLeave}\n        onMouseEnter={this.handleMouseEnter}\n        style={prepareStyles(Object.assign(styles.root, style))}\n      />\n    );\n  }\n}\n\nexport default FontIcon;\n"]}