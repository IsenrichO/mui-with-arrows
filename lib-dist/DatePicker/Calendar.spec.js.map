{"version":3,"sources":["../../src/DatePicker/Calendar.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","it","initialDate","Date","maxDate","toDateString","wrapper","notOk","find","prop","ok","instance","handleMonthChange","update","minDate","strictEqual","length","props","style","width"],"mappings":"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","file":"Calendar.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport Calendar from './Calendar';\nimport DateDisplay from './DateDisplay';\nimport {addMonths, dateTimeFormat} from './dateUtils';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<Calendar />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  describe('Next Month Button', () => {\n    it('should initially be disabled if the current month is the same as the month in the maxDate prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      const maxDate = new Date(initialDate.toDateString());\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          maxDate={maxDate}\n        />\n      );\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('nextMonth'));\n    });\n\n    it('should initially be disabled if the current month is after the month in the maxDate prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let maxDate = new Date(initialDate.toDateString());\n      maxDate = addMonths(maxDate, -1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          maxDate={maxDate}\n        />\n      );\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('nextMonth'));\n    });\n\n    it('should initially enable the next month button if the current month is before the maxDate prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let maxDate = new Date(initialDate.toDateString());\n      maxDate = addMonths(maxDate, 1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          maxDate={maxDate}\n        />\n      );\n\n      assert.ok(wrapper.find('CalendarToolbar').prop('nextMonth'));\n    });\n\n    it('should reenable the next month button when the current month is before the maxDate prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      const maxDate = new Date(initialDate.toDateString());\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          maxDate={maxDate}\n        />\n      );\n\n      wrapper.instance().handleMonthChange(-1);\n      wrapper.update();\n\n      assert.ok(wrapper.find('CalendarToolbar').prop('nextMonth'));\n    });\n\n    it('should redisable the next month button when the current month is the same as the maxDate prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let maxDate = new Date(initialDate.toDateString());\n      maxDate = addMonths(maxDate, 1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          maxDate={maxDate}\n        />\n      );\n\n      wrapper.instance().handleMonthChange(1);\n      wrapper.update();\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('nextMonth'));\n    });\n  });\n\n  describe('Previous Month Button', () => {\n    it(`should initially disable the previous month button if the current month\n      is the same as the minDate month prop`, () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      const minDate = new Date(initialDate.toDateString());\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          minDate={minDate}\n        />\n      );\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('prevMonth'));\n    });\n\n    it(`should initially disable the previous month button if the current month\n      is before the minDate month prop`, () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let minDate = new Date(initialDate.toDateString());\n      minDate = addMonths(initialDate, 1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          minDate={minDate}\n        />\n      );\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('prevMonth'));\n    });\n\n    it('should initially enable the previous month button if the current month is after the minDate month prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let minDate = new Date(initialDate.toDateString());\n      minDate = addMonths(initialDate, -1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          minDate={minDate}\n        />\n      );\n\n      assert.ok(wrapper.find('CalendarToolbar').prop('prevMonth'));\n    });\n\n    it('should enable the previous month button when the current month is after the minDate month prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      const minDate = new Date(initialDate.toDateString());\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          minDate={minDate}\n        />\n      );\n\n      wrapper.instance().handleMonthChange(1);\n      wrapper.update();\n\n      assert.ok(wrapper.find('CalendarToolbar').prop('prevMonth'));\n    });\n\n    it('should disable the previous month button when the current month is the same as the minDate month prop', () => {\n      const initialDate = new Date(1448967059892); // Tue, 01 Dec 2015 10:50:59 GMT\n      let minDate = new Date(initialDate.toDateString());\n      minDate = addMonths(minDate, -1);\n\n      const wrapper = shallowWithContext(\n        <Calendar\n          initialDate={initialDate}\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          minDate={minDate}\n        />\n      );\n\n      wrapper.instance().handleMonthChange(-1);\n      wrapper.update();\n\n      assert.notOk(wrapper.find('CalendarToolbar').prop('prevMonth'));\n    });\n  });\n\n  describe('Date Display', () => {\n    it('should be visible by default', () => {\n      const wrapper = shallowWithContext(\n        <Calendar\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          mode=\"landscape\"\n        />\n      );\n\n      assert.strictEqual(wrapper.find(DateDisplay).length, 1, 'should show date display');\n      assert.strictEqual(wrapper.props().style.width, 479, 'should allow space for date display');\n    });\n\n    it('should be hidden when hideCalendarDate is set', () => {\n      const wrapper = shallowWithContext(\n        <Calendar\n          DateTimeFormat={dateTimeFormat}\n          locale=\"en-US\"\n          mode=\"landscape\"\n          hideCalendarDate={true}\n        />\n      );\n\n      assert.strictEqual(wrapper.find(DateDisplay).length, 0, 'should hide date display');\n      assert.strictEqual(wrapper.props().style.width, 310, 'should not allow space for date display');\n    });\n  });\n});\n"]}