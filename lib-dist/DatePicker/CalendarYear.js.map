{"version":3,"sources":["../../src/DatePicker/CalendarYear.js"],"names":["CalendarYear","handleTouchTapYear","event","year","props","onTouchTapYear","componentDidMount","scrollToSelectedYear","componentDidUpdate","getYears","DateTimeFormat","locale","minDate","maxDate","selectedDate","utils","minYear","getYear","maxYear","years","selected","selectedProps","ref","yearFormated","format","setYear","yearButton","push","refs","selectedYearButton","undefined","container","findDOMNode","yearButtonNode","containerHeight","clientHeight","yearButtonNodeHeight","scrollYOffset","offsetTop","scrollTop","render","context","muiTheme","prepareStyles","calendarYearBackgroundColor","datePicker","styles","root","backgroundColor","height","lineHeight","overflowX","overflowY","position","child","display","flexDirection","justifyContent","minHeight","propTypes","func","isRequired","string","object","wordings","contextTypes"],"mappings":"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","file":"CalendarYear.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport YearButton from './YearButton';\n\nclass CalendarYear extends Component {\n  static propTypes = {\n    DateTimeFormat: PropTypes.func.isRequired,\n    locale: PropTypes.string.isRequired,\n    maxDate: PropTypes.object.isRequired,\n    minDate: PropTypes.object.isRequired,\n    onTouchTapYear: PropTypes.func,\n    selectedDate: PropTypes.object.isRequired,\n    utils: PropTypes.object.isRequired,\n    wordings: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.scrollToSelectedYear();\n  }\n\n  componentDidUpdate() {\n    this.scrollToSelectedYear();\n  }\n\n  getYears() {\n    const {\n      DateTimeFormat,\n      locale,\n      minDate,\n      maxDate,\n      selectedDate,\n      utils,\n    } = this.props;\n\n    const minYear = utils.getYear(minDate);\n    const maxYear = utils.getYear(maxDate);\n    const years = [];\n\n    for (let year = minYear; year <= maxYear; year++) {\n      const selected = utils.getYear(selectedDate) === year;\n      const selectedProps = {};\n      if (selected) {\n        selectedProps.ref = 'selectedYearButton';\n      }\n\n      const yearFormated = new DateTimeFormat(locale, {\n        year: 'numeric',\n      }).format(utils.setYear(selectedDate, year));\n\n      const yearButton = (\n        <YearButton\n          key={`yb${year}`}\n          onTouchTap={this.handleTouchTapYear}\n          selected={selected}\n          year={year}\n          utils={utils}\n          {...selectedProps}\n        >\n          {yearFormated}\n        </YearButton>\n      );\n\n      years.push(yearButton);\n    }\n\n    return years;\n  }\n\n  scrollToSelectedYear() {\n    if (this.refs.selectedYearButton === undefined) {\n      return;\n    }\n\n    const container = ReactDOM.findDOMNode(this);\n    const yearButtonNode = ReactDOM.findDOMNode(this.refs.selectedYearButton);\n\n    const containerHeight = container.clientHeight;\n    const yearButtonNodeHeight = yearButtonNode.clientHeight || 32;\n\n    const scrollYOffset = (yearButtonNode.offsetTop + yearButtonNodeHeight / 2) - containerHeight / 2;\n    container.scrollTop = scrollYOffset;\n  }\n\n  handleTouchTapYear = (event, year) => {\n    if (this.props.onTouchTapYear) {\n      this.props.onTouchTapYear(event, year);\n    }\n  };\n\n  render() {\n    const {\n      prepareStyles,\n      datePicker: {\n        calendarYearBackgroundColor,\n      },\n    } = this.context.muiTheme;\n\n    const styles = {\n      root: {\n        backgroundColor: calendarYearBackgroundColor,\n        height: 'inherit',\n        lineHeight: '35px',\n        overflowX: 'hidden',\n        overflowY: 'scroll',\n        position: 'relative',\n      },\n      child: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        minHeight: '100%',\n      },\n    };\n\n    return (\n      <div style={prepareStyles(styles.root)}>\n        <div style={prepareStyles(styles.child)}>\n          {this.getYears()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CalendarYear;\n"]}