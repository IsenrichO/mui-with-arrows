{"version":3,"sources":["../../src/Table/TableBody.js"],"names":["TableBody","state","selectedRows","isControlled","handleClickAway","props","deselectOnClickaway","length","setState","onRowSelection","onRowClick","event","rowNumber","stopPropagation","selectable","window","getSelection","removeAllRanges","processRowSelection","onCellClick","columnNumber","getColumnId","onCellHover","onRowHover","onCellHoverExit","onRowHoverExit","componentWillMount","preScanRows","getSelectedRows","componentDidMount","componentWillReceiveProps","nextProps","allRowsSelected","createRows","numChildren","Children","count","children","handlers","map","child","isValidElement","hoverable","showRowHover","selected","isRowSelected","striped","stripedRows","displayBorder","createRowCheckboxColumn","forEach","push","cloneElement","rowProps","displayRowCheckbox","name","disabled","width","cursor","index","undefined","multiSelectable","some","row","isValueInRange","value","range","start","end","shiftKey","lastIndex","lastSelection","splice","ctrlKey","metaKey","idx","indexOf","foundRange","i","values","splitRange","flattenRanges","splitPoint","splitValues","startOffset","endOffset","genRangeOfValues","offset","dir","reduce","rows","sort","columnId","render","style","other","prepareStyles","context","muiTheme","muiName","propTypes","bool","node","className","string","func","object","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"TableBody.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '../Checkbox';\nimport TableRowColumn from './TableRowColumn';\nimport ClickAwayListener from '../internal/ClickAwayListener';\n\nclass TableBody extends Component {\n  static muiName = 'TableBody';\n\n  static propTypes = {\n    /**\n     * @ignore\n     * Set to true to indicate that all rows should be selected.\n     */\n    allRowsSelected: PropTypes.bool,\n    /**\n     * Children passed to table body.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Controls whether or not to deselect all selected\n     * rows after clicking outside the table.\n     */\n    deselectOnClickaway: PropTypes.bool,\n    /**\n     * Controls the display of the row checkbox. The default value is true.\n     */\n    displayRowCheckbox: PropTypes.bool,\n    /**\n     * @ignore\n     * If true, multiple table rows can be selected.\n     * CTRL/CMD+Click and SHIFT+Click are valid actions.\n     * The default value is false.\n     */\n    multiSelectable: PropTypes.bool,\n    /**\n     * @ignore\n     * Callback function for when a cell is clicked.\n     */\n    onCellClick: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table cell is hovered. rowNumber\n     * is the row number of the hovered row and columnId\n     * is the column number or the column key of the cell.\n     */\n    onCellHover: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table cell is no longer hovered.\n     * rowNumber is the row number of the row and columnId\n     * is the column number or the column key of the cell.\n     */\n    onCellHoverExit: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table row is hovered.\n     * rowNumber is the row number of the hovered row.\n     */\n    onRowHover: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table row is no longer\n     * hovered. rowNumber is the row number of the row\n     * that is no longer hovered.\n     */\n    onRowHoverExit: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a row is selected. selectedRows is an\n     * array of all row selections. If all rows have been selected,\n     * the string \"all\" will be returned instead to indicate that\n     * all rows have been selected.\n     */\n    onRowSelection: PropTypes.func,\n    /**\n     * Controls whether or not the rows are pre-scanned to determine\n     * initial state. If your table has a large number of rows and\n     * you are experiencing a delay in rendering, turn off this property.\n     */\n    preScanRows: PropTypes.bool,\n    /**\n     * @ignore\n     * If true, table rows can be selected. If multiple\n     * row selection is desired, enable multiSelectable.\n     * The default value is true.\n     */\n    selectable: PropTypes.bool,\n    /**\n     * If true, table rows will be highlighted when\n     * the cursor is hovering over the row. The default\n     * value is false.\n     */\n    showRowHover: PropTypes.bool,\n    /**\n     * If true, every other table row starting\n     * with the first row will be striped. The default value is false.\n     */\n    stripedRows: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    allRowsSelected: false,\n    deselectOnClickaway: true,\n    displayRowCheckbox: true,\n    multiSelectable: false,\n    preScanRows: true,\n    selectable: true,\n    style: {},\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    selectedRows: [],\n  };\n\n  componentWillMount() {\n    if (this.props.preScanRows) {\n      this.setState({\n        selectedRows: this.getSelectedRows(this.props),\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.preScanRows) {\n      this.setState({ // eslint-disable-line react/no-did-mount-set-state\n        selectedRows: this.getSelectedRows(this.props),\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.allRowsSelected !== nextProps.allRowsSelected) {\n      if (!nextProps.allRowsSelected) {\n        this.setState({\n          selectedRows: [],\n        });\n        return;\n      }\n    }\n\n    this.setState({\n      selectedRows: this.getSelectedRows(nextProps),\n    });\n  }\n\n  isControlled = false\n\n  handleClickAway = () => {\n    if (this.props.deselectOnClickaway && this.state.selectedRows.length > 0) {\n      const selectedRows = [];\n      this.setState({selectedRows});\n      if (this.props.onRowSelection) {\n        this.props.onRowSelection(selectedRows);\n      }\n    }\n  };\n\n  createRows() {\n    const numChildren = React.Children.count(this.props.children);\n    let rowNumber = 0;\n    const handlers = {\n      onCellClick: this.onCellClick,\n      onCellHover: this.onCellHover,\n      onCellHoverExit: this.onCellHoverExit,\n      onRowHover: this.onRowHover,\n      onRowHoverExit: this.onRowHoverExit,\n      onRowClick: this.onRowClick,\n    };\n\n    return React.Children.map(this.props.children, (child) => {\n      if (React.isValidElement(child)) {\n        const props = {\n          hoverable: this.props.showRowHover,\n          selected: this.isRowSelected(rowNumber),\n          striped: this.props.stripedRows && (rowNumber % 2 === 0),\n          rowNumber: rowNumber++,\n        };\n\n        if (rowNumber === numChildren) {\n          props.displayBorder = false;\n        }\n\n        const children = [\n          this.createRowCheckboxColumn(props),\n        ];\n\n        React.Children.forEach(child.props.children, (child) => {\n          children.push(child);\n        });\n\n        return React.cloneElement(child, {...props, ...handlers}, children);\n      }\n    });\n  }\n\n  createRowCheckboxColumn(rowProps) {\n    if (!this.props.displayRowCheckbox) {\n      return null;\n    }\n\n    const name = `${rowProps.rowNumber}-cb`;\n    const disabled = !this.props.selectable;\n\n    return (\n      <TableRowColumn\n        key={name}\n        columnNumber={0}\n        style={{\n          width: 24,\n          cursor: disabled ? 'default' : 'inherit',\n        }}\n      >\n        <Checkbox\n          name={name}\n          value=\"selected\"\n          disabled={disabled}\n          checked={rowProps.selected}\n        />\n      </TableRowColumn>\n    );\n  }\n\n  getSelectedRows(props) {\n    const selectedRows = [];\n\n    if (props.selectable) {\n      let index = 0;\n      React.Children.forEach(props.children, (child) => {\n        if (React.isValidElement(child)) {\n          if (child.props.selected !== undefined) {\n            this.isControlled = true;\n          }\n\n          if (child.props.selected && (selectedRows.length === 0 || props.multiSelectable)) {\n            selectedRows.push(index);\n          }\n\n          index++;\n        }\n      });\n    }\n\n    return selectedRows;\n  }\n\n  isRowSelected(rowNumber) {\n    if (this.props.allRowsSelected) {\n      return true;\n    }\n\n    return this.state.selectedRows.some((row) => {\n      if (typeof row === 'object') {\n        if (this.isValueInRange(rowNumber, row)) {\n          return true;\n        }\n      } else {\n        if (row === rowNumber) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  }\n\n  isValueInRange(value, range) {\n    if (!range) return false;\n\n    if ((range.start <= value && value <= range.end) || (range.end <= value && value <= range.start)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onRowClick = (event, rowNumber) => {\n    event.stopPropagation();\n\n    if (this.props.selectable) {\n      // Prevent text selection while selecting rows.\n      window.getSelection().removeAllRanges();\n      this.processRowSelection(event, rowNumber);\n    }\n  };\n\n  processRowSelection(event, rowNumber) {\n    let selectedRows = [...this.state.selectedRows];\n\n    if (event.shiftKey && this.props.multiSelectable && selectedRows.length > 0) {\n      const lastIndex = selectedRows.length - 1;\n      const lastSelection = selectedRows[lastIndex];\n\n      if (typeof lastSelection === 'object') {\n        lastSelection.end = rowNumber;\n      } else {\n        selectedRows.splice(lastIndex, 1, {\n          start: lastSelection,\n          end: rowNumber,\n        });\n      }\n    } else if (((event.ctrlKey && !event.metaKey) || (event.metaKey && !event.ctrlKey)) && this.props.multiSelectable) {\n      const idx = selectedRows.indexOf(rowNumber);\n      if (idx < 0) {\n        let foundRange = false;\n        for (let i = 0; i < selectedRows.length; i++) {\n          const range = selectedRows[i];\n          if (typeof range !== 'object') continue;\n\n          if (this.isValueInRange(rowNumber, range)) {\n            foundRange = true;\n            const values = this.splitRange(range, rowNumber);\n            selectedRows.splice(i, 1, ...values);\n          }\n        }\n\n        if (!foundRange) selectedRows.push(rowNumber);\n      } else {\n        selectedRows.splice(idx, 1);\n      }\n    } else {\n      if (selectedRows.length === 1 && selectedRows[0] === rowNumber) {\n        selectedRows = [];\n      } else {\n        selectedRows = [rowNumber];\n      }\n    }\n\n    if (!this.isControlled) {\n      this.setState({selectedRows});\n    }\n\n    if (this.props.onRowSelection) {\n      this.props.onRowSelection(this.flattenRanges(selectedRows));\n    }\n  }\n\n  splitRange(range, splitPoint) {\n    const splitValues = [];\n    const startOffset = range.start - splitPoint;\n    const endOffset = range.end - splitPoint;\n\n    // Process start half\n    splitValues.push(...this.genRangeOfValues(splitPoint, startOffset));\n\n    // Process end half\n    splitValues.push(...this.genRangeOfValues(splitPoint, endOffset));\n\n    return splitValues;\n  }\n\n  genRangeOfValues(start, offset) {\n    const values = [];\n    const dir = (offset > 0) ? -1 : 1; // This forces offset to approach 0 from either direction.\n    while (offset !== 0) {\n      values.push(start + offset);\n      offset += dir;\n    }\n\n    return values;\n  }\n\n  flattenRanges(selectedRows) {\n    return selectedRows\n      .reduce((rows, row) => {\n        if (typeof row === 'object') {\n          const values = this.genRangeOfValues(row.end, row.start - row.end);\n          rows.push(row.end, ...values);\n        } else {\n          rows.push(row);\n        }\n\n        return rows;\n      }, [])\n      .sort();\n  }\n\n  onCellClick = (event, rowNumber, columnNumber) => {\n    event.stopPropagation();\n    if (this.props.onCellClick) {\n      this.props.onCellClick(rowNumber, this.getColumnId(columnNumber), event);\n    }\n  };\n\n  onCellHover = (event, rowNumber, columnNumber) => {\n    if (this.props.onCellHover) {\n      this.props.onCellHover(rowNumber, this.getColumnId(columnNumber), event);\n    }\n    this.onRowHover(event, rowNumber);\n  };\n\n  onCellHoverExit = (event, rowNumber, columnNumber) => {\n    if (this.props.onCellHoverExit) {\n      this.props.onCellHoverExit(rowNumber, this.getColumnId(columnNumber), event);\n    }\n    this.onRowHoverExit(event, rowNumber);\n  };\n\n  onRowHover = (event, rowNumber) => {\n    if (this.props.onRowHover) {\n      this.props.onRowHover(rowNumber);\n    }\n  };\n\n  onRowHoverExit = (event, rowNumber) => {\n    if (this.props.onRowHoverExit) {\n      this.props.onRowHoverExit(rowNumber);\n    }\n  };\n\n  getColumnId(columnNumber) {\n    let columnId = columnNumber;\n    if (this.props.displayRowCheckbox) {\n      columnId--;\n    }\n\n    return columnId;\n  }\n\n  render() {\n    const {\n      style,\n      allRowsSelected, // eslint-disable-line no-unused-vars\n      multiSelectable, // eslint-disable-line no-unused-vars\n      onCellClick, // eslint-disable-line no-unused-vars\n      onCellHover, // eslint-disable-line no-unused-vars\n      onCellHoverExit, // eslint-disable-line no-unused-vars\n      onRowHover, // eslint-disable-line no-unused-vars\n      onRowHoverExit, // eslint-disable-line no-unused-vars\n      onRowSelection, // eslint-disable-line no-unused-vars\n      selectable, // eslint-disable-line no-unused-vars\n      deselectOnClickaway, // eslint-disable-line no-unused-vars\n      showRowHover, // eslint-disable-line no-unused-vars\n      stripedRows, // eslint-disable-line no-unused-vars\n      displayRowCheckbox, // eslint-disable-line no-unused-vars\n      preScanRows, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n\n    return (\n      <ClickAwayListener onClickAway={this.handleClickAway}>\n        <tbody style={prepareStyles(Object.assign({}, style))} {...other}>\n          {this.createRows()}\n        </tbody>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default TableBody;\n"]}