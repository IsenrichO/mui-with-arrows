{"version":3,"sources":["../../src/Table/TableFooter.js"],"names":["getStyles","props","context","tableFooter","muiTheme","cell","borderTop","borderColor","verticalAlign","padding","textAlign","whiteSpace","TableFooter","render","adjustForCheckbox","children","className","style","other","prepareStyles","styles","footerRows","Children","map","child","rowNumber","newChildProps","displayBorder","key","newDescendants","width","toArray","cloneElement","muiName","propTypes","bool","node","string","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,MAC1BC,WAD0B,GACXD,QAAQE,QADG,CAC1BD,WAD0B;;;AAGjC,SAAO;AACLE,UAAM;AACJC,gCAAwBH,YAAYI,WADhC;AAEJC,qBAAe,QAFX;AAGJC,eAAS,EAHL;AAIJC,iBAAW,MAJP;AAKJC,kBAAY;AALR;AADD,GAAP;AASD;;IAEKC,W;;;;;;;;wBAqCJC,M,qBAAS;AAAA,iBAOH,KAAKZ,KAPF;AAAA,QAELa,iBAFK,UAELA,iBAFK;AAAA,QAGLC,QAHK,UAGLA,QAHK;AAAA,QAILC,SAJK,UAILA,SAJK;AAAA,QAKLC,KALK,UAKLA,KALK;AAAA,QAMFC,KANE;AAAA,QASAC,aATA,GASiB,KAAKjB,OAAL,CAAaE,QAT9B,CASAe,aATA;;AAUP,QAAMC,SAASpB,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;;AAEA,QAAMmB,aAAa,gBAAMC,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6B,UAACS,KAAD,EAAQC,SAAR,EAAsB;AACpE,UAAMC,gBAAgB;AACpBC,uBAAe,KADK;AAEpBC,oBAAUH,SAFU;AAGpBA,mBAAWA,SAHS;AAIpBR,eAAO,sBAAc,EAAd,EAAkBG,OAAOf,IAAzB,EAA+BmB,MAAMvB,KAAN,CAAYgB,KAA3C;AAJa,OAAtB;;AAOA,UAAIY,uBAAJ;;AAEA,UAAIf,iBAAJ,EAAuB;AACrBe,0BACE,0DAAgB,cAAYJ,SAA5B,EAAyC,OAAO,EAACK,OAAO,EAAR,EAAhD,GADF,SAEK,gBAAMR,QAAN,CAAeS,OAAf,CAAuBP,MAAMvB,KAAN,CAAYc,QAAnC,CAFL;AAID,OALD,MAKO;AACLc,yBAAiBL,MAAMvB,KAAN,CAAYc,QAA7B;AACD;;AAED,aAAO,gBAAMiB,YAAN,CAAmBR,KAAnB,EAA0BE,aAA1B,EAAyCG,cAAzC,CAAP;AACD,KApBkB,CAAnB;;AAsBA,WACE;AAAA;AAAA,+BAAO,WAAWb,SAAlB,EAA6B,OAAOG,cAAc,sBAAc,EAAd,EAAkBF,KAAlB,CAAd,CAApC,IAAiFC,KAAjF;AACGG;AADH,KADF;AAKD,G;;;4BA3EMY,O,GAAU,a,SAEVC,S,GAAY;AACjB;;;;;;;;;AASApB,qBAAmB,oBAAUqB,IAVZ;AAWjB;;;AAGApB,YAAU,oBAAUqB,IAdH;AAejB;;;AAGApB,aAAW,oBAAUqB,MAlBJ;AAmBjB;;;AAGApB,SAAO,oBAAUqB;AAtBA,C,SAyBZC,Y,GAAe;AACpBzB,qBAAmB,IADC;AAEpBG,SAAO;AAFa,C,SAKfuB,Y,GAAe;AACpBpC,YAAU,oBAAUkC,MAAV,CAAiBG;AADP,C;kBA8CT7B,W","file":"TableFooter.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TableRowColumn from './TableRowColumn';\n\nfunction getStyles(props, context) {\n  const {tableFooter} = context.muiTheme;\n\n  return {\n    cell: {\n      borderTop: `1px solid ${tableFooter.borderColor}`,\n      verticalAlign: 'bottom',\n      padding: 20,\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n    },\n  };\n}\n\nclass TableFooter extends Component {\n  static muiName = 'TableFooter';\n\n  static propTypes = {\n    /**\n     * @ignore\n     * Controls whether or not header rows should be adjusted\n     * for a checkbox column. If the select all checkbox is true,\n     * this property will not influence the number of columns.\n     * This is mainly useful for \"super header\" rows so that\n     * the checkbox column does not create an offset that needs\n     * to be accounted for manually.\n     */\n    adjustForCheckbox: PropTypes.bool,\n    /**\n     * Children passed to table footer.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    adjustForCheckbox: true,\n    style: {},\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      adjustForCheckbox,\n      children,\n      className,\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    const footerRows = React.Children.map(children, (child, rowNumber) => {\n      const newChildProps = {\n        displayBorder: false,\n        key: `f-${rowNumber}`,\n        rowNumber: rowNumber,\n        style: Object.assign({}, styles.cell, child.props.style),\n      };\n\n      let newDescendants;\n\n      if (adjustForCheckbox) {\n        newDescendants = [\n          <TableRowColumn key={`fpcb${rowNumber}`} style={{width: 24}} />,\n          ...React.Children.toArray(child.props.children),\n        ];\n      } else {\n        newDescendants = child.props.children;\n      }\n\n      return React.cloneElement(child, newChildProps, newDescendants);\n    });\n\n    return (\n      <tfoot className={className} style={prepareStyles(Object.assign({}, style))} {...other}>\n        {footerRows}\n      </tfoot>\n    );\n  }\n}\n\nexport default TableFooter;\n"]}