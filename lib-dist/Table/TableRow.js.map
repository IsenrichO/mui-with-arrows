{"version":3,"sources":["../../src/Table/TableRow.js"],"names":["getStyles","props","context","state","tableRow","muiTheme","cellBgColor","hovered","hoverColor","selected","selectedColor","striped","stripeColor","root","borderBottom","displayBorder","borderColor","color","textColor","height","cell","backgroundColor","TableRow","onCellClick","event","columnIndex","selectable","rowNumber","ctrlKey","onRowClick","onCellHover","hoverable","setState","onRowHover","onCellHoverExit","onRowHoverExit","render","className","style","other","prepareStyles","styles","rowColumns","Children","map","children","child","columnNumber","isValidElement","cloneElement","key","onClick","onHover","onHoverExit","propTypes","node","string","bool","func","number","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0C;AAAA,MACjCC,QADiC,GACrBF,QAAQG,QADa,CACjCD,QADiC;;;AAGxC,MAAIE,cAAc,SAAlB;AACA,MAAIL,MAAMM,OAAN,IAAiBJ,MAAMI,OAA3B,EAAoC;AAClCD,kBAAcF,SAASI,UAAvB;AACD,GAFD,MAEO,IAAIP,MAAMQ,QAAV,EAAoB;AACzBH,kBAAcF,SAASM,aAAvB;AACD,GAFM,MAEA,IAAIT,MAAMU,OAAV,EAAmB;AACxBL,kBAAcF,SAASQ,WAAvB;AACD;;AAED,SAAO;AACLC,UAAM;AACJC,oBAAcb,MAAMc,aAAN,mBAAoCX,SAASY,WADvD;AAEJC,aAAOb,SAASc,SAFZ;AAGJC,cAAQf,SAASe;AAHb,KADD;AAMLC,UAAM;AACJC,uBAAiBf;AADb;AAND,GAAP;AAUD;;IAEKgB,Q;;;;;;;;;;;;0JAsGJnB,K,GAAQ;AACNI,eAAS;AADH,K,QAsBRgB,W,GAAc,UAACC,KAAD,EAAQC,WAAR,EAAwB;AACpC,UAAI,MAAKxB,KAAL,CAAWyB,UAAX,IAAyB,MAAKzB,KAAL,CAAWsB,WAAxC,EAAqD;AACnD,cAAKtB,KAAL,CAAWsB,WAAX,CAAuBC,KAAvB,EAA8B,MAAKvB,KAAL,CAAW0B,SAAzC,EAAoDF,WAApD;AACD;AACDD,YAAMI,OAAN,GAAgB,IAAhB;AACA,YAAKC,UAAL,CAAgBL,KAAhB;AACD,K,QAEDM,W,GAAc,UAACN,KAAD,EAAQC,WAAR,EAAwB;AACpC,UAAI,MAAKxB,KAAL,CAAW8B,SAAf,EAA0B;AACxB,cAAKC,QAAL,CAAc,EAACzB,SAAS,IAAV,EAAd;AACA,YAAI,MAAKN,KAAL,CAAW6B,WAAf,EAA4B,MAAK7B,KAAL,CAAW6B,WAAX,CAAuBN,KAAvB,EAA8B,MAAKvB,KAAL,CAAW0B,SAAzC,EAAoDF,WAApD;AAC5B,cAAKQ,UAAL,CAAgBT,KAAhB;AACD;AACF,K,QAEDU,e,GAAkB,UAACV,KAAD,EAAQC,WAAR,EAAwB;AACxC,UAAI,MAAKxB,KAAL,CAAW8B,SAAf,EAA0B;AACxB,cAAKC,QAAL,CAAc,EAACzB,SAAS,KAAV,EAAd;AACA,YAAI,MAAKN,KAAL,CAAWiC,eAAf,EAAgC,MAAKjC,KAAL,CAAWiC,eAAX,CAA2BV,KAA3B,EAAkC,MAAKvB,KAAL,CAAW0B,SAA7C,EAAwDF,WAAxD;AAChC,cAAKU,cAAL,CAAoBX,KAApB;AACD;AACF,K;;;qBAxCDK,U,uBAAWL,K,EAAO;AAChB,QAAI,KAAKvB,KAAL,CAAWyB,UAAX,IAAyB,KAAKzB,KAAL,CAAW4B,UAAxC,EAAoD;AAClD,WAAK5B,KAAL,CAAW4B,UAAX,CAAsBL,KAAtB,EAA6B,KAAKvB,KAAL,CAAW0B,SAAxC;AACD;AACF,G;;qBAEDM,U,uBAAWT,K,EAAO;AAChB,QAAI,KAAKvB,KAAL,CAAWgC,UAAf,EAA2B;AACzB,WAAKhC,KAAL,CAAWgC,UAAX,CAAsBT,KAAtB,EAA6B,KAAKvB,KAAL,CAAW0B,SAAxC;AACD;AACF,G;;qBAEDQ,c,2BAAeX,K,EAAO;AACpB,QAAI,KAAKvB,KAAL,CAAWkC,cAAf,EAA+B;AAC7B,WAAKlC,KAAL,CAAWkC,cAAX,CAA0BX,KAA1B,EAAiC,KAAKvB,KAAL,CAAW0B,SAA5C;AACD;AACF,G;;qBA0BDS,M,qBAAS;AAAA;;AAAA,iBAkBH,KAAKnC,KAlBF;AAAA,QAELoC,SAFK,UAELA,SAFK;AAAA,QAGLtB,aAHK,UAGLA,aAHK;AAAA,QAILgB,SAJK,UAILA,SAJK;AAAA,QAKLxB,OALK,UAKLA,OALK;AAAA,QAMLgB,WANK,UAMLA,WANK;AAAA,QAOLO,WAPK,UAOLA,WAPK;AAAA,QAQLI,eARK,UAQLA,eARK;AAAA,QASLL,UATK,UASLA,UATK;AAAA,QAULI,UAVK,UAULA,UAVK;AAAA,QAWLE,cAXK,UAWLA,cAXK;AAAA,QAYLR,SAZK,UAYLA,SAZK;AAAA,QAaLD,UAbK,UAaLA,UAbK;AAAA,QAcLjB,QAdK,UAcLA,QAdK;AAAA,QAeLE,OAfK,UAeLA,OAfK;AAAA,QAgBL2B,KAhBK,UAgBLA,KAhBK;AAAA,QAiBFC,KAjBE;AAAA,QAoBAC,aApBA,GAoBiB,KAAKtC,OAAL,CAAaG,QApB9B,CAoBAmC,aApBA;;AAqBP,QAAMC,SAASzC,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,EAAoC,KAAKC,KAAzC,CAAf;;AAEA,QAAMuC,aAAa,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAK3C,KAAL,CAAW4C,QAA9B,EAAwC,UAACC,KAAD,EAAQC,YAAR,EAAyB;AAClF,UAAI,gBAAMC,cAAN,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,eAAO,gBAAMG,YAAN,CAAmBH,KAAnB,EAA0B;AAC/BC,wBAAcA,YADiB;AAE/BhB,qBAAW,OAAK9B,KAAL,CAAW8B,SAFS;AAG/BmB,eAAQ,OAAKjD,KAAL,CAAW0B,SAAnB,SAAgCoB,YAHD;AAI/BI,mBAAS,OAAK5B,WAJiB;AAK/B6B,mBAAS,OAAKtB,WALiB;AAM/BuB,uBAAa,OAAKnB,eANa;AAO/BI,iBAAO,sBAAc,EAAd,EAAkBG,OAAOrB,IAAzB,EAA+B0B,MAAM7C,KAAN,CAAYqC,KAA3C;AAPwB,SAA1B,CAAP;AASD;AACF,KAZkB,CAAnB;;AAcA,WACE;AAAA;AAAA;AACE,mBAAWD,SADb;AAEE,eAAOG,cAAc,sBAAcC,OAAO5B,IAArB,EAA2ByB,KAA3B,CAAd;AAFT,SAGMC,KAHN;AAKGG;AALH,KADF;AASD,G;;;4BAjMMY,S,GAAY;AACjB;;;AAGAT,YAAU,oBAAUU,IAJH;AAKjB;;;AAGAlB,aAAW,oBAAUmB,MARJ;AASjB;;;;AAIAzC,iBAAe,oBAAU0C,IAbR;AAcjB;;;AAGA1B,aAAW,oBAAU0B,IAjBJ;AAkBjB;;;;;;AAMAlD,WAAS,oBAAUkD,IAxBF;AAyBjB;;;;;;AAMAlC,eAAa,oBAAUmC,IA/BN;AAgCjB;;;;;;AAMA5B,eAAa,oBAAU4B,IAtCN;AAuCjB;;;;;;AAMAxB,mBAAiB,oBAAUwB,IA7CV;AA8CjB;;;;AAIA7B,cAAY,oBAAU6B,IAlDL;AAmDjB;;;;;AAKAzB,cAAY,oBAAUyB,IAxDL;AAyDjB;;;;;AAKAvB,kBAAgB,oBAAUuB,IA9DT;AA+DjB;;;;AAIA/B,aAAW,oBAAUgC,MAnEJ;AAoEjB;;;;;AAKAjC,cAAY,oBAAU+B,IAzEL;AA0EjB;;;;AAIAhD,YAAU,oBAAUgD,IA9EH;AA+EjB;;;AAGA9C,WAAS,oBAAU8C,IAlFF;AAmFjB;;;AAGAnB,SAAO,oBAAUsB;AAtFA,C,SAyFZC,Y,GAAe;AACpB9C,iBAAe,IADK;AAEpBgB,aAAW,KAFS;AAGpBxB,WAAS,KAHW;AAIpBmB,cAAY,IAJQ;AAKpBf,WAAS;AALW,C,SAQfmD,Y,GAAe;AACpBzD,YAAU,oBAAUuD,MAAV,CAAiBG;AADP,C;kBAmGTzC,Q","file":"TableRow.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context, state) {\n  const {tableRow} = context.muiTheme;\n\n  let cellBgColor = 'inherit';\n  if (props.hovered || state.hovered) {\n    cellBgColor = tableRow.hoverColor;\n  } else if (props.selected) {\n    cellBgColor = tableRow.selectedColor;\n  } else if (props.striped) {\n    cellBgColor = tableRow.stripeColor;\n  }\n\n  return {\n    root: {\n      borderBottom: props.displayBorder && `1px solid ${tableRow.borderColor}`,\n      color: tableRow.textColor,\n      height: tableRow.height,\n    },\n    cell: {\n      backgroundColor: cellBgColor,\n    },\n  };\n}\n\nclass TableRow extends Component {\n  static propTypes = {\n    /**\n     * Children passed to table row.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * If true, row border will be displayed for the row.\n     * If false, no border will be drawn.\n     */\n    displayBorder: PropTypes.bool,\n    /**\n     * Controls whether or not the row responds to hover events.\n     */\n    hoverable: PropTypes.bool,\n    /**\n     * Controls whether or not the row should be rendered as being\n     * hovered. This property is evaluated in addition to this.state.hovered\n     * and can be used to synchronize the hovered state with some other\n     * external events.\n     */\n    hovered: PropTypes.bool,\n    /**\n     * @ignore\n     * Called when a row cell is clicked.\n     * rowNumber is the row number and columnId is\n     * the column number or the column key.\n     */\n    onCellClick: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table cell is hovered.\n     * rowNumber is the row number of the hovered row\n     * and columnId is the column number or the column key of the cell.\n     */\n    onCellHover: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table cell is no longer hovered.\n     * rowNumber is the row number of the row and columnId\n     * is the column number or the column key of the cell.\n     */\n    onCellHoverExit: PropTypes.func,\n    /**\n     * @ignore\n     * Called when row is clicked.\n     */\n    onRowClick: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table row is hovered.\n     * rowNumber is the row number of the hovered row.\n     */\n    onRowHover: PropTypes.func,\n    /**\n     * @ignore\n     * Called when a table row is no longer hovered.\n     * rowNumber is the row number of the row that is no longer hovered.\n     */\n    onRowHoverExit: PropTypes.func,\n    /**\n     * Number to identify the row. This property is\n     * automatically populated when used with the TableBody component.\n     */\n    rowNumber: PropTypes.number,\n    /**\n     * If true, table rows can be selected. If multiple row\n     * selection is desired, enable multiSelectable.\n     * The default value is true.\n     */\n    selectable: PropTypes.bool,\n    /**\n     * Indicates that a particular row is selected.\n     * This property can be used to programmatically select rows.\n     */\n    selected: PropTypes.bool,\n    /**\n     * Indicates whether or not the row is striped.\n     */\n    striped: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    displayBorder: true,\n    hoverable: false,\n    hovered: false,\n    selectable: true,\n    striped: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  onRowClick(event) {\n    if (this.props.selectable && this.props.onRowClick) {\n      this.props.onRowClick(event, this.props.rowNumber);\n    }\n  }\n\n  onRowHover(event) {\n    if (this.props.onRowHover) {\n      this.props.onRowHover(event, this.props.rowNumber);\n    }\n  }\n\n  onRowHoverExit(event) {\n    if (this.props.onRowHoverExit) {\n      this.props.onRowHoverExit(event, this.props.rowNumber);\n    }\n  }\n\n  onCellClick = (event, columnIndex) => {\n    if (this.props.selectable && this.props.onCellClick) {\n      this.props.onCellClick(event, this.props.rowNumber, columnIndex);\n    }\n    event.ctrlKey = true;\n    this.onRowClick(event);\n  };\n\n  onCellHover = (event, columnIndex) => {\n    if (this.props.hoverable) {\n      this.setState({hovered: true});\n      if (this.props.onCellHover) this.props.onCellHover(event, this.props.rowNumber, columnIndex);\n      this.onRowHover(event);\n    }\n  };\n\n  onCellHoverExit = (event, columnIndex) => {\n    if (this.props.hoverable) {\n      this.setState({hovered: false});\n      if (this.props.onCellHoverExit) this.props.onCellHoverExit(event, this.props.rowNumber, columnIndex);\n      this.onRowHoverExit(event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      displayBorder, // eslint-disable-line no-unused-vars\n      hoverable, // eslint-disable-line no-unused-vars\n      hovered, // eslint-disable-line no-unused-vars\n      onCellClick, // eslint-disable-line no-unused-vars\n      onCellHover, // eslint-disable-line no-unused-vars\n      onCellHoverExit, // eslint-disable-line no-unused-vars\n      onRowClick, // eslint-disable-line no-unused-vars\n      onRowHover, // eslint-disable-line no-unused-vars\n      onRowHoverExit, // eslint-disable-line no-unused-vars\n      rowNumber, // eslint-disable-line no-unused-vars\n      selectable, // eslint-disable-line no-unused-vars\n      selected, // eslint-disable-line no-unused-vars\n      striped, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context, this.state);\n\n    const rowColumns = React.Children.map(this.props.children, (child, columnNumber) => {\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          columnNumber: columnNumber,\n          hoverable: this.props.hoverable,\n          key: `${this.props.rowNumber}-${columnNumber}`,\n          onClick: this.onCellClick,\n          onHover: this.onCellHover,\n          onHoverExit: this.onCellHoverExit,\n          style: Object.assign({}, styles.cell, child.props.style),\n        });\n      }\n    });\n\n    return (\n      <tr\n        className={className}\n        style={prepareStyles(Object.assign(styles.root, style))}\n        {...other}\n      >\n        {rowColumns}\n      </tr>\n    );\n  }\n}\n\nexport default TableRow;\n"]}