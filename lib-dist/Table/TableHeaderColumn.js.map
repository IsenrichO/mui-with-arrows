{"version":3,"sources":["../../src/Table/TableHeaderColumn.js"],"names":["getStyles","props","context","tableHeaderColumn","muiTheme","root","fontWeight","fontSize","paddingLeft","spacing","paddingRight","height","textAlign","whiteSpace","textOverflow","color","textColor","position","tooltip","boxSizing","marginTop","TableHeaderColumn","state","hovered","onMouseEnter","undefined","setState","onMouseLeave","onClick","event","columnNumber","render","children","className","hoverable","onHover","onHoverExit","style","tooltipStyle","other","prepareStyles","styles","handlers","tooltipNode","propTypes","node","string","number","bool","func","object","contextTypes","isRequired"],"mappings":"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","file":"TableHeaderColumn.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '../internal/Tooltip';\n\nfunction getStyles(props, context) {\n  const {tableHeaderColumn} = context.muiTheme;\n\n  return {\n    root: {\n      fontWeight: 'normal',\n      fontSize: 12,\n      paddingLeft: tableHeaderColumn.spacing,\n      paddingRight: tableHeaderColumn.spacing,\n      height: tableHeaderColumn.height,\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      color: tableHeaderColumn.textColor,\n      position: 'relative',\n    },\n    tooltip: {\n      boxSizing: 'border-box',\n      marginTop: tableHeaderColumn.height / 2,\n    },\n  };\n}\n\nclass TableHeaderColumn extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Number to identify the header row. This property\n     * is automatically populated when used with TableHeader.\n     */\n    columnNumber: PropTypes.number,\n    /**\n     * @ignore\n     * Not used here but we need to remove it from the root element.\n     */\n    hoverable: PropTypes.bool,\n    /** @ignore */\n    onClick: PropTypes.func,\n    /**\n     * @ignore\n     * Not used here but we need to remove it from the root element.\n     */\n    onHover: PropTypes.func,\n    /**\n     * @ignore\n     * Not used here but we need to remove it from the root element.\n     */\n    onHoverExit: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The string to supply to the tooltip. If not\n     * string is supplied no tooltip will be shown.\n     */\n    tooltip: PropTypes.string,\n    /**\n     * Additional styling that can be applied to the tooltip.\n     */\n    tooltipStyle: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  onMouseEnter = () => {\n    if (this.props.tooltip !== undefined) {\n      this.setState({hovered: true});\n    }\n  };\n\n  onMouseLeave = () => {\n    if (this.props.tooltip !== undefined) {\n      this.setState({hovered: false});\n    }\n  };\n\n  onClick = (event) => {\n    if (this.props.onClick) {\n      this.props.onClick(event, this.props.columnNumber);\n    }\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      columnNumber, // eslint-disable-line no-unused-vars\n      hoverable, // eslint-disable-line no-unused-vars\n      onClick, // eslint-disable-line no-unused-vars\n      onHover, // eslint-disable-line no-unused-vars\n      onHoverExit, // eslint-disable-line no-unused-vars\n      style,\n      tooltip,\n      tooltipStyle,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    const handlers = {\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave,\n      onClick: this.onClick,\n    };\n\n    let tooltipNode;\n\n    if (tooltip !== undefined) {\n      tooltipNode = (\n        <Tooltip\n          label={tooltip}\n          show={this.state.hovered}\n          style={Object.assign(styles.tooltip, tooltipStyle)}\n        />\n      );\n    }\n\n    return (\n      <th\n        className={className}\n        style={prepareStyles(Object.assign(styles.root, style))}\n        {...handlers}\n        {...other}\n      >\n        {tooltipNode}\n        {children}\n      </th>\n    );\n  }\n}\n\nexport default TableHeaderColumn;\n"]}