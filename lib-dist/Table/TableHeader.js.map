{"version":3,"sources":["../../src/Table/TableHeader.js"],"names":["getStyles","props","context","tableHeader","muiTheme","root","borderBottom","borderColor","TableHeader","handleCheckAll","event","checked","onSelectAll","createSuperHeaderRows","numChildren","Children","count","children","undefined","superHeaders","index","child","isValidElement","key","rowNumber","push","createSuperHeaderRow","length","adjustForCheckbox","getCheckboxPlaceholder","forEach","cloneElement","createBaseHeaderRow","childrenArray","toArray","getSelectAllCheckboxColumn","disabled","enableSelectAll","width","cursor","displaySelectAll","checkbox","selectAllSelected","render","className","style","prepareStyles","styles","superHeaderRows","baseHeaderRow","muiName","propTypes","bool","node","string","func","object","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"TableHeader.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '../Checkbox';\nimport TableHeaderColumn from './TableHeaderColumn';\n\nfunction getStyles(props, context) {\n  const {tableHeader} = context.muiTheme;\n\n  return {\n    root: {\n      borderBottom: `1px solid ${tableHeader.borderColor}`,\n    },\n  };\n}\n\nclass TableHeader extends Component {\n  static muiName = 'TableHeader';\n\n  static propTypes = {\n    /**\n     * Controls whether or not header rows should be\n     * adjusted for a checkbox column. If the select all\n     * checkbox is true, this property will not influence\n     * the number of columns. This is mainly useful for\n     * \"super header\" rows so that the checkbox column\n     * does not create an offset that needs to be accounted\n     * for manually.\n     */\n    adjustForCheckbox: PropTypes.bool,\n    /**\n     * Children passed to table header.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Controls whether or not the select all checkbox is displayed.\n     */\n    displaySelectAll: PropTypes.bool,\n    /**\n     * If set to true, the select all button will be interactable.\n     * If set to false, the button will not be interactable.\n     * To hide the checkbox, set displaySelectAll to false.\n     */\n    enableSelectAll: PropTypes.bool,\n    /**\n     * @ignore\n     * Callback when select all has been checked.\n     */\n    onSelectAll: PropTypes.func,\n    /**\n     * @ignore\n     * True when select all has been checked.\n     */\n    selectAllSelected: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    adjustForCheckbox: true,\n    displaySelectAll: true,\n    enableSelectAll: true,\n    selectAllSelected: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  createSuperHeaderRows() {\n    const numChildren = React.Children.count(this.props.children);\n    if (numChildren === 1) return undefined;\n\n    const superHeaders = [];\n    for (let index = 0; index < numChildren - 1; index++) {\n      const child = this.props.children[index];\n\n      if (!React.isValidElement(child)) continue;\n\n      const props = {\n        key: `sh${index}`,\n        rowNumber: index,\n      };\n      superHeaders.push(this.createSuperHeaderRow(child, props));\n    }\n\n    if (superHeaders.length) return superHeaders;\n  }\n\n  createSuperHeaderRow(child, props) {\n    const children = [];\n    if (this.props.adjustForCheckbox) {\n      children.push(this.getCheckboxPlaceholder(props));\n    }\n    React.Children.forEach(child.props.children, (child) => {\n      children.push(child);\n    });\n\n    return React.cloneElement(child, props, children);\n  }\n\n  createBaseHeaderRow() {\n    const childrenArray = React.Children.toArray(this.props.children);\n    const numChildren = childrenArray.length;\n    if (numChildren < 1) {\n      return null;\n    }\n\n    const child = childrenArray[numChildren - 1];\n\n    const props = {\n      key: `h${numChildren}`,\n      rowNumber: numChildren,\n    };\n\n    const children = [this.getSelectAllCheckboxColumn(props)];\n    React.Children.forEach(child.props.children, (child) => {\n      children.push(child);\n    });\n\n    return React.cloneElement(\n      child,\n      props,\n      children\n    );\n  }\n\n  getCheckboxPlaceholder(props) {\n    if (!this.props.adjustForCheckbox) return null;\n\n    const disabled = !this.props.enableSelectAll;\n    const key = `hpcb${props.rowNumber}`;\n    return (\n      <TableHeaderColumn\n        key={key}\n        style={{\n          width: 24,\n          cursor: disabled ? 'default' : 'inherit',\n        }}\n      />\n    );\n  }\n\n  getSelectAllCheckboxColumn(props) {\n    if (!this.props.displaySelectAll) return this.getCheckboxPlaceholder(props);\n\n    const disabled = !this.props.enableSelectAll;\n    const checkbox = (\n      <Checkbox\n        key=\"selectallcb\"\n        name=\"selectallcb\"\n        value=\"selected\"\n        disabled={disabled}\n        checked={this.props.selectAllSelected}\n        onCheck={this.handleCheckAll}\n      />\n    );\n\n    const key = `hpcb${props.rowNumber}`;\n    return (\n      <TableHeaderColumn\n        key={key}\n        style={{\n          width: 24,\n          cursor: disabled ? 'not-allowed' : 'inherit',\n        }}\n      >\n        {checkbox}\n      </TableHeaderColumn>\n    );\n  }\n\n  handleCheckAll = (event, checked) => {\n    if (this.props.onSelectAll) {\n      this.props.onSelectAll(checked);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      style,\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n    const superHeaderRows = this.createSuperHeaderRows();\n    const baseHeaderRow = this.createBaseHeaderRow();\n\n    return (\n      <thead className={className} style={prepareStyles(Object.assign(styles.root, style))}>\n        {superHeaderRows}\n        {baseHeaderRow}\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n"]}