{"version":3,"sources":["../../src/TextField/TextField.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","mountWithContext","childContextTypes","object","it","done","wrapper","event","value","strictEqual","target","find","simulate","props","shrink","update","is","values","undefined","forEach","state","hasValue","MyComponent1","handleChange","setState","render","input","show","color","isFocused","style","transform","shrinkStyle","bottom","errorWrapper","children","last","setProps"],"mappings":"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","file":"TextField.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {shallow, mount} from 'enzyme';\nimport {assert} from 'chai';\nimport TextField from './TextField';\nimport TextFieldHint from './TextFieldHint';\nimport TextFieldLabel from './TextFieldLabel';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<TextField />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const mountWithContext = (node) => mount(node, {\n    context: {muiTheme},\n    childContextTypes: {muiTheme: PropTypes.object},\n  });\n\n  it('passes event and value to the onChange callback', (done) => {\n    const wrapper = shallowWithContext(\n      <TextField\n        onChange={(event, value) => {\n          assert.strictEqual(event.target.value, 'woof');\n          assert.strictEqual(value, 'woof', 'should pass the value as the 2nd arg');\n          done();\n        }}\n        id=\"unique\"\n      />\n    );\n\n    wrapper.find('input').simulate('change', {target: {value: 'woof'}});\n  });\n\n  it('shrinks TextFieldLabel when defaultValue', () => {\n    const wrapper = shallowWithContext(\n      <TextField\n        floatingLabelText=\"floating label text\"\n        defaultValue=\"default value\"\n      />\n    );\n\n    assert.strictEqual(wrapper.find(TextFieldLabel).props().shrink, true, 'should shrink TextFieldLabel');\n    wrapper.update();\n    assert.strictEqual(wrapper.find(TextFieldLabel).props().shrink, true, 'should shrink TextFieldLabel');\n  });\n\n  describe('prop: children', () => {\n    it('should forward any property to the root', () => {\n      const wrapper = shallowWithContext(\n        <TextField data-test=\"hello\" id=\"unique\">\n          <div />\n        </TextField>\n      );\n\n      assert.strictEqual(\n        wrapper.is('[data-test=\"hello\"]'), true,\n        'The root element should receive any additional properties'\n      );\n    });\n  });\n\n  describe('isValid', () => {\n    it('should consider the input as empty', () => {\n      const values = [\n        undefined,\n        null,\n        '',\n      ];\n\n      values.forEach((value) => {\n        const wrapper = shallowWithContext(\n          <TextField value={value} id=\"unique\" />\n        );\n\n        assert.strictEqual(wrapper.state().hasValue, false,\n          `Should consider '${value}' as empty`);\n      });\n    });\n\n    it('should consider the input as not empty', () => {\n      const values = [\n        ' ',\n        0,\n        false,\n      ];\n\n      values.forEach((value) => {\n        const wrapper = shallowWithContext(\n          <TextField value={value} id=\"unique\" />\n        );\n\n        assert.strictEqual(wrapper.state().hasValue, true,\n          `Should consider '${value}' as not empty`);\n      });\n    });\n  });\n\n  describe('<TextFieldHint>', () => {\n    it('should be hidden when the component is rerender with the same props', () => {\n      class MyComponent1 extends Component {\n        state = {\n          value: '',\n        };\n\n        handleChange = () => {\n          this.setState({value: ''});\n        };\n\n        render() {\n          return (\n            <TextField\n              id=\"foo\"\n              value={this.state.value}\n              hintText=\"bar\"\n              onChange={this.handleChange}\n            />\n          );\n        }\n      }\n\n      const wrapper = mountWithContext(<MyComponent1 />);\n      const input = wrapper.find('input');\n      input.simulate('change', {target: {value: 'a'}});\n      assert.strictEqual(wrapper.find(TextFieldHint).props().show, true,\n        'The hint text should keep the same state');\n    });\n  });\n\n  describe('prop: floatingLabelFocusStyle', () => {\n    it('should be applied when the input is focused', () => {\n      const wrapper = shallowWithContext(\n        <TextField\n          floatingLabelText=\"Name\"\n          floatingLabelFixed={true}\n          floatingLabelFocusStyle={{color: 'blue'}}\n          floatingLabelStyle={{color: 'red'}}\n        />\n      );\n      wrapper.setState({\n        isFocused: true,\n      });\n      assert.strictEqual(wrapper.find(TextFieldLabel).props().style.color, 'blue');\n    });\n  });\n\n  describe('prop: floatingLabelFocusStyle', () => {\n    it('should be applied', () => {\n      const wrapper = shallowWithContext(\n        <TextField\n          floatingLabelText=\"Name\"\n          floatingLabelShrinkStyle={{transform: 'none'}}\n        />\n      );\n      assert.strictEqual(wrapper.find(TextFieldLabel).props().shrinkStyle.transform, 'none');\n    });\n  });\n\n  describe('prop: errorStyle', () => {\n    it('should override the errorText', () => {\n      const wrapper = shallowWithContext(\n        <TextField\n          id=\"foo\"\n          floatingLabelText=\"password\"\n          errorStyle={{\n            color: 'red',\n            bottom: 10,\n          }}\n          errorText=\"error message\"\n        />\n      );\n\n      const errorWrapper = wrapper.children().last();\n      assert.strictEqual(errorWrapper.props().style.bottom, 10, 'Users should have the higher priority');\n    });\n  });\n\n  describe('state: hasValue', () => {\n    describe('of uncontrolled component', () => {\n      it('should change depending on the input', () => {\n        const wrapper = shallowWithContext(\n          <TextField id=\"unique\" />\n        );\n        const input = wrapper.find('input');\n        assert.strictEqual(wrapper.state().hasValue, false);\n        input.simulate('change', {target: {value: 'a'}});\n        assert.strictEqual(wrapper.state().hasValue, true);\n        input.simulate('change', {target: {value: ''}});\n        assert.strictEqual(wrapper.state().hasValue, false);\n      });\n    });\n\n    describe('of controlled component', () => {\n      it('should be false if onChange does nothing despite the input', () => {\n        const wrapper = shallowWithContext(\n          <TextField value=\"\" id=\"unique\" />\n        );\n        wrapper.find('input').simulate('change', {target: {value: 'a'}});\n        assert.strictEqual(wrapper.state().hasValue, false, 'because props.value is still invalid.');\n      });\n\n      it('should be true if and only if props.value is set', () => {\n        const wrapper = shallowWithContext(\n          <TextField value=\"\" id=\"unique\" />\n        );\n        assert.strictEqual(wrapper.state().hasValue, false);\n        wrapper.setProps({value: 'a'});\n        assert.strictEqual(wrapper.state().hasValue, true, 'it is consistent with props.value');\n      });\n    });\n  });\n});\n"]}