{"version":3,"sources":["../../src/internal/AppCanvas.js"],"names":["AppCanvas","render","context","muiTheme","baseTheme","prepareStyles","styles","height","color","palette","textColor","backgroundColor","canvasColor","direction","newChildren","Children","map","props","children","currentChild","type","muiName","cloneElement","style","position","propTypes","node","contextTypes","object","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEMA,S;;;;;;;;sBASJC,M,qBAAS;AAAA,4BAIH,KAAKC,OAAL,CAAaC,QAJV;AAAA,QAELC,SAFK,qBAELA,SAFK;AAAA,QAGLC,aAHK,qBAGLA,aAHK;;;AAMP,QAAMC,SAAS;AACbC,cAAQ,MADK;AAEbC,aAAOJ,UAAUK,OAAV,CAAkBC,SAFZ;AAGbC,uBAAiBP,UAAUK,OAAV,CAAkBG,WAHtB;AAIbC,iBAAW;AAJE,KAAf;;AAOA,QAAMC,cAAc,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKC,KAAL,CAAWC,QAA9B,EAAwC,UAACC,YAAD,EAAkB;AAC5E,UAAI,CAACA,YAAL,EAAmB;AAAE;AACnB,eAAO,IAAP;AACD;;AAED,cAAQA,aAAaC,IAAb,CAAkBC,OAA1B;AACE,aAAK,QAAL;AACE,iBAAO,gBAAMC,YAAN,CAAmBH,YAAnB,EAAiC;AACtCI,mBAAO,sBAAc,EAAd,EAAkBJ,aAAaF,KAAb,CAAmBM,KAArC,EAA4C;AACjDC,wBAAU;AADuC,aAA5C;AAD+B,WAAjC,CAAP;AAKF;AACE,iBAAOL,YAAP;AARJ;AAUD,KAfmB,EAejB,IAfiB,CAApB;;AAiBA,WACE;AAAA;AAAA,QAAK,OAAOd,cAAcC,MAAd,CAAZ;AACGQ;AADH,KADF;AAKD,G;;;4BA3CMW,S,GAAY;AACjBP,YAAU,oBAAUQ;AADH,C,SAIZC,Y,GAAe;AACpBxB,YAAU,oBAAUyB,MAAV,CAAiBC;AADP,C;kBA0CT7B,S","file":"AppCanvas.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass AppCanvas extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      baseTheme,\n      prepareStyles,\n    } = this.context.muiTheme;\n\n    const styles = {\n      height: '100%',\n      color: baseTheme.palette.textColor,\n      backgroundColor: baseTheme.palette.canvasColor,\n      direction: 'ltr',\n    };\n\n    const newChildren = React.Children.map(this.props.children, (currentChild) => {\n      if (!currentChild) { // If undefined, skip it\n        return null;\n      }\n\n      switch (currentChild.type.muiName) {\n        case 'AppBar' :\n          return React.cloneElement(currentChild, {\n            style: Object.assign({}, currentChild.props.style, {\n              position: 'fixed',\n            }),\n          });\n        default:\n          return currentChild;\n      }\n    }, this);\n\n    return (\n      <div style={prepareStyles(styles)}>\n        {newChildren}\n      </div>\n    );\n  }\n}\n\nexport default AppCanvas;\n"]}