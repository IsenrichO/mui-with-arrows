{"version":3,"sources":["../../src/internal/EnhancedButton.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","testChildren","it","wrapper","ok","text","is","strictEqual","props","tabIndex","contains","clicked","touched","setProps","onClick","onTouchTap","simulate","notOk","color","style","background","backgroundColor","undefined","type","eventStack","reset","splice","length","push","disableKeyboardFocus","disabled","touchRipple","find","centerRipple","opacity","setState","isKeyboardFocused","focusRipple","show","which"],"mappings":"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","file":"EnhancedButton.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport EnhancedButton from './EnhancedButton';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<EnhancedButton />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const testChildren = <div className=\"unique\">Hello World</div>;\n\n  it('renders a button', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton>Button</EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.ok(wrapper.is('button'), 'should match a button element');\n    assert.strictEqual(wrapper.props().tabIndex, 0, 'should receive the focus');\n  });\n\n  it('renders a link when href is provided', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton href=\"http://google.com\">Button</EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.ok(wrapper.is('a'), 'should match a <a> element');\n  });\n\n  it('renders any container element', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton containerElement={<div />}>Button</EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.ok(wrapper.is('div'), 'should match a div element');\n  });\n\n  it('renders children', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton>{testChildren}</EnhancedButton>\n    );\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n  });\n\n  it('renders a disabled button when disabled={true} which blocks onTouchTap from firing', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton disabled={true}>Button</EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.ok(wrapper.is('button[disabled]'), 'should be a disabled button element');\n\n    let clicked = false;\n    let touched = false;\n    wrapper.setProps({\n      onClick: () => clicked = true,\n      onTouchTap: () => touched = true,\n    });\n    wrapper.simulate('click');\n    wrapper.simulate('touchTap');\n    assert.strictEqual(clicked, false, 'should not trigger the click');\n    assert.strictEqual(touched, false, 'should not trigger the touchTap');\n  });\n\n  it('renders a dummy link button when disabled={true} which blocks onTouchTap from firing', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        disabled={true}\n        href=\"http://google.com\"\n      >\n        Button\n      </EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.notOk(wrapper.is('a'), 'should not be an <a> element');\n    assert.notOk(wrapper.is('button'), 'should not be an <a> element');\n\n    let clicked = false;\n    let touched = false;\n    wrapper.setProps({\n      onClick: () => clicked = true,\n      onTouchTap: () => touched = true,\n    });\n    wrapper.simulate('click');\n    wrapper.simulate('touchTap');\n    assert.strictEqual(clicked, false, 'should not trigger the click');\n    assert.strictEqual(touched, false, 'should not trigger the touchTap');\n  });\n\n  it('should be styleable', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton style={{color: 'red'}}>Button</EnhancedButton>\n    );\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.strictEqual(wrapper.node.props.style.color, 'red', 'should be red');\n  });\n\n  it('overrides default styles', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton>Button</EnhancedButton>\n    );\n    assert.strictEqual(wrapper.node.props.style.background, 'none', 'should be none');\n    wrapper.setProps({\n      style: {\n        background: 'blue',\n      },\n    });\n    assert.strictEqual(wrapper.node.props.style.background, 'blue', 'should be blue');\n  });\n\n  it('should not have \"background: none\" style when passed a backgroundColor', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton>Button</EnhancedButton>\n    );\n    assert.strictEqual(wrapper.node.props.style.background, 'none', 'should be none');\n    wrapper.setProps({style: {backgroundColor: 'blue'}});\n    assert.strictEqual(wrapper.node.props.style.background, undefined, 'background should be undefined');\n    assert.strictEqual(wrapper.node.props.style.backgroundColor, 'blue', 'backgroundColor should be blue');\n    wrapper.setProps({style: {backgroundColor: null}});\n    assert.strictEqual(wrapper.node.props.style.background, 'none', 'should be none');\n  });\n\n  describe('prop: type', () => {\n    it('should set a button type by default', () => {\n      const wrapper = shallowWithContext(\n        <EnhancedButton>Button</EnhancedButton>\n      );\n\n      assert.strictEqual(wrapper.is('button[type=\"button\"]'), true);\n    });\n\n    it('should not set a button type on span', () => {\n      const wrapper = shallowWithContext(\n        <EnhancedButton containerElement=\"span\">Button</EnhancedButton>\n      );\n\n      assert.strictEqual(wrapper.props().type, undefined);\n    });\n\n    it('should set the button type', () => {\n      const wrapper = shallowWithContext(\n        <EnhancedButton type=\"submit\">Button</EnhancedButton>\n      );\n\n      assert.strictEqual(wrapper.type(), 'button', 'should say Button');\n      assert.strictEqual(wrapper.is('button[type=\"submit\"]'), true, 'should have the type attribute');\n      wrapper.setProps({type: 'reset'});\n      assert.strictEqual(wrapper.is('button[type=\"reset\"]'), true, 'should have the type attribute');\n    });\n  });\n\n  it('should pass through other html attributes', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton name=\"hello\">Button</EnhancedButton>\n    );\n    assert.ok(wrapper.is('button[name=\"hello\"]'), 'should have the name attribute');\n  });\n\n  it('should handle focus propagation based on disabled props', () => {\n    const eventStack = [];\n    eventStack.reset = () => eventStack.splice(0, eventStack.length);\n\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        disableKeyboardFocus={true}\n        onFocus={() => eventStack.push('focus')}\n      >\n        Button\n      </EnhancedButton>\n    );\n\n    wrapper.simulate('focus');\n    assert.strictEqual(eventStack.length, 0);\n    wrapper.setProps({disableKeyboardFocus: false});\n    wrapper.simulate('focus');\n    assert.strictEqual(eventStack.length, 1);\n    wrapper.setProps({disabled: true});\n    wrapper.simulate('focus');\n    assert.strictEqual(eventStack.length, 1);\n    wrapper.setProps({disabled: false});\n    wrapper.simulate('focus');\n    assert.strictEqual(eventStack.length, 2);\n    wrapper.setProps({disableKeyboardFocus: true});\n    wrapper.simulate('focus');\n    assert.strictEqual(eventStack.length, 2);\n  });\n\n  it('have a TouchRipple and control it using props', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        centerRipple={true}\n        touchRippleColor=\"red\"\n        touchRippleOpacity={0.8}\n      >\n        Button\n      </EnhancedButton>\n    );\n\n    const touchRipple = wrapper.find('TouchRipple');\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.strictEqual(touchRipple.length, 1, 'should have a TouchRipple');\n    assert.strictEqual(touchRipple.node.props.centerRipple, true);\n    assert.strictEqual(touchRipple.node.props.color, 'red');\n    assert.strictEqual(touchRipple.node.props.opacity, 0.8);\n  });\n\n  it('has no TouchRipple when disableTouchRipple={true}', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton disableTouchRipple={true}>Button</EnhancedButton>\n    );\n    assert.strictEqual(wrapper.find('TouchRipple').length, 0, 'should not have a TouchRipple');\n  });\n\n  it('have a FocusRipple when keyboard focused (tracked internally) and control it using props', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        focusRippleColor=\"red\"\n        focusRippleOpacity={0.8}\n      >\n        Button\n      </EnhancedButton>\n    );\n\n    assert.strictEqual(wrapper.find('FocusRipple').length, 0, 'should not have a FocusRipple');\n\n    wrapper.setState({\n      isKeyboardFocused: true,\n    });\n\n    const focusRipple = wrapper.find('FocusRipple');\n    assert.ok(wrapper.text(), 'Button', 'should say Button');\n    assert.strictEqual(focusRipple.length, 1, 'should have a FocusRipple');\n    assert.strictEqual(focusRipple.node.props.show, true);\n    assert.strictEqual(focusRipple.node.props.color, 'red');\n    assert.strictEqual(focusRipple.node.props.opacity, 0.8);\n\n    wrapper.setProps({\n      disableKeyboardFocus: true,\n    });\n    wrapper.setState({\n      isKeyboardFocused: true,\n    });\n\n    assert.strictEqual(wrapper.find('FocusRipple').length, 0, 'should not have a FocusRipple');\n\n    wrapper.setProps({\n      disableKeyboardFocus: false,\n    });\n    wrapper.setState({\n      isKeyboardFocused: true,\n    });\n\n    assert.strictEqual(wrapper.find('FocusRipple').length, 1, 'should have a FocusRipple');\n  });\n\n  it('should remove a FocusRipple on blur', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton>Button</EnhancedButton>\n    );\n    wrapper.setState({\n      isKeyboardFocused: true,\n    });\n    assert.strictEqual(wrapper.find('FocusRipple').length, 1, 'should have a FocusRipple');\n    wrapper.simulate('blur');\n    assert.strictEqual(wrapper.find('FocusRipple').length, 0, 'should not have a FocusRipple');\n  });\n\n  describe('prop: disabled', () => {\n    it('should have no ripples when button is disabled', () => {\n      const wrapper = shallowWithContext(\n        <EnhancedButton keyboardFocused={true} disabled={true}>Button</EnhancedButton>\n      );\n      assert.strictEqual(wrapper.find('TouchRipple').length, 0, 'should not have a TouchRipple');\n      assert.strictEqual(wrapper.find('FocusRipple').length, 0, 'should not have a FocusRipple');\n      assert.strictEqual(wrapper.props().tabIndex, -1, 'should not receive the focus');\n    });\n  });\n\n  it('should have no ripples when both are disabled', () => {\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        keyboardFocused={true}\n        disableFocusRipple={true}\n        disableTouchRipple={true}\n      >\n        Button\n      </EnhancedButton>\n    );\n    assert.strictEqual(wrapper.find('TouchRipple').length, 0, 'should not have a TouchRipple');\n    assert.strictEqual(wrapper.find('FocusRipple').length, 0, 'should not have a FocusRipple');\n  });\n\n  it('should fire the touchtap handler if keyboard focused and the enter or space keys are hit', () => {\n    const eventStack = [];\n    eventStack.reset = () => eventStack.splice(0, eventStack.length);\n\n    const wrapper = shallowWithContext(\n      <EnhancedButton\n        keyboardFocused={true}\n        onTouchTap={() => eventStack.push('touchTap')}\n      >\n        Button\n      </EnhancedButton>\n    );\n\n    wrapper.simulate('keyDown', {which: 13});\n    assert.strictEqual(eventStack.length, 1);\n\n    wrapper.setState({isKeyboardFocused: true});\n    wrapper.simulate('keyUp', {which: 32});\n    assert.strictEqual(eventStack.length, 2);\n\n    wrapper.setState({isKeyboardFocused: true});\n    wrapper.setProps({disabled: true});\n    wrapper.simulate('keyDown', {which: 13});\n    assert.strictEqual(eventStack.length, 2, 'should not work when button is disabled');\n  });\n});\n"]}