{"version":3,"sources":["../../src/internal/FocusRipple.js"],"names":["pulsateDuration","FocusRipple","pulsate","innerCircle","findDOMNode","refs","startScale","endScale","currentScale","style","transform","nextScale","set","timeout","setTimeout","componentDidMount","props","show","setRippleSize","shouldComponentUpdate","nextProps","nextState","state","componentDidUpdate","clearTimeout","componentWillUnmount","getRippleElement","color","innerStyle","opacity","context","muiTheme","prepareStyles","ripple","innerStyles","position","height","width","borderRadius","backgroundColor","transition","easeOut","easeInOutFunction","el","offsetHeight","offsetWidth","size","Math","max","oldTop","top","indexOf","length","parseInt","render","mergedRootStyles","left","propTypes","string","object","number","bool","contextTypes","isRequired"],"mappings":"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","file":"FocusRipple.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport shallowEqual from 'recompose/shallowEqual';\nimport autoPrefix from '../utils/autoPrefix';\nimport transitions from '../styles/transitions';\nimport ScaleInTransitionGroup from './ScaleIn';\n\nconst pulsateDuration = 750;\n\nclass FocusRipple extends Component {\n  static propTypes = {\n    color: PropTypes.string,\n    innerStyle: PropTypes.object,\n    opacity: PropTypes.number,\n    show: PropTypes.bool,\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    if (this.props.show) {\n      this.setRippleSize();\n      this.pulsate();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      !shallowEqual(this.props, nextProps) ||\n      !shallowEqual(this.state, nextState)\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.props.show) {\n      this.setRippleSize();\n      this.pulsate();\n    } else {\n      if (this.timeout) clearTimeout(this.timeout);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  getRippleElement(props) {\n    const {\n      color,\n      innerStyle,\n      opacity,\n    } = props;\n\n    const {prepareStyles, ripple} = this.context.muiTheme;\n\n    const innerStyles = Object.assign({\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      borderRadius: '50%',\n      opacity: opacity ? opacity : 0.16,\n      backgroundColor: color || ripple.color,\n      transition: transitions.easeOut(`${pulsateDuration}ms`, 'transform', null, transitions.easeInOutFunction),\n    }, innerStyle);\n\n    return <div ref=\"innerCircle\" style={prepareStyles(Object.assign({}, innerStyles))} />;\n  }\n\n  pulsate = () => {\n    const innerCircle = ReactDOM.findDOMNode(this.refs.innerCircle);\n    if (!innerCircle) return;\n\n    const startScale = 'scale(1)';\n    const endScale = 'scale(0.85)';\n    const currentScale = innerCircle.style.transform || startScale;\n    const nextScale = currentScale === startScale ? endScale : startScale;\n\n    autoPrefix.set(innerCircle.style, 'transform', nextScale);\n    this.timeout = setTimeout(this.pulsate, pulsateDuration);\n  };\n\n  setRippleSize() {\n    const el = ReactDOM.findDOMNode(this.refs.innerCircle);\n    const height = el.offsetHeight;\n    const width = el.offsetWidth;\n    const size = Math.max(height, width);\n\n    let oldTop = 0;\n    // For browsers that don't support endsWith()\n    if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {\n      oldTop = parseInt(el.style.top);\n    }\n    el.style.height = `${size}px`;\n    el.style.top = `${(height / 2) - (size / 2 ) + oldTop}px`;\n  }\n\n  render() {\n    const {\n      show,\n      style,\n    } = this.props;\n\n    const mergedRootStyles = Object.assign({\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n    }, style);\n\n    const ripple = show ? this.getRippleElement(this.props) : null;\n\n    return (\n      <ScaleInTransitionGroup\n        maxScale={0.85}\n        style={mergedRootStyles}\n      >\n        {ripple}\n      </ScaleInTransitionGroup>\n    );\n  }\n}\n\nexport default FocusRipple;\n"]}