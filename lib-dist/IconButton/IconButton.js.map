{"version":3,"sources":["../../src/IconButton/IconButton.js"],"names":["getStyles","props","context","baseTheme","muiTheme","root","boxSizing","overflow","transition","easeOut","padding","spacing","iconSize","width","height","fontSize","tooltip","disabled","color","palette","disabledColor","fill","cursor","IconButton","state","hovered","isKeyboardFocused","touch","tooltipShown","handleBlur","event","hideTooltip","onBlur","handleFocus","showTooltip","onFocus","handleMouseLeave","button","setState","onMouseLeave","handleMouseOut","onMouseOut","handleMouseEnter","onMouseEnter","handleTouchStart","onTouchStart","handleKeyboardFocus","onKeyboardFocus","componentWillReceiveProps","nextProps","setKeyboardFocus","render","hoveredStyle","disableTouchRipple","children","iconClassName","style","tooltipPositionProp","tooltipPosition","tooltipStyles","iconStyle","other","fonticon","styles","split","mergedRootStyles","tooltipElement","iconHoverColor","iconStyleFontIcon","textColor","childrenStyle","ref","muiName","propTypes","node","className","string","bool","object","href","func","onTouchTap","cornersAndCenter","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"IconButton.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport propTypes from '../utils/propTypes';\nimport EnhancedButton from '../internal/EnhancedButton';\nimport FontIcon from '../FontIcon';\nimport Tooltip from '../internal/Tooltip';\nimport {extendChildren} from '../utils/childUtils';\n\nfunction getStyles(props, context) {\n  const {baseTheme} = context.muiTheme;\n\n  return {\n    root: {\n      boxSizing: 'border-box',\n      overflow: 'visible',\n      transition: transitions.easeOut(),\n      padding: baseTheme.spacing.iconSize / 2,\n      width: baseTheme.spacing.iconSize * 2,\n      height: baseTheme.spacing.iconSize * 2,\n      fontSize: 0,\n    },\n    tooltip: {\n      boxSizing: 'border-box',\n    },\n    disabled: {\n      color: baseTheme.palette.disabledColor,\n      fill: baseTheme.palette.disabledColor,\n      cursor: 'default',\n    },\n  };\n}\n\nclass IconButton extends Component {\n  static muiName = 'IconButton';\n\n  static propTypes = {\n    /**\n     * Can be used to pass a `FontIcon` element as the icon for the button.\n     */\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * If true, the element's ripple effect will be disabled.\n     */\n    disableTouchRipple: PropTypes.bool,\n    /**\n     * If true, the element will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element when the component is hovered.\n     */\n    hoveredStyle: PropTypes.object,\n    /**\n     * The URL to link to when the button is clicked.\n     */\n    href: PropTypes.string,\n    /**\n     * The CSS class name of the icon. Used for setting the icon with a stylesheet.\n     */\n    iconClassName: PropTypes.string,\n    /**\n     * Override the inline-styles of the icon element.\n     * Note: you can specify iconHoverColor as a String inside this object.\n     */\n    iconStyle: PropTypes.object,\n    /** @ignore */\n    onBlur: PropTypes.func,\n    /** @ignore */\n    onFocus: PropTypes.func,\n    /**\n     * Callback function fired when the element is focused or blurred by the keyboard.\n     *\n     * @param {object} event `focus` or `blur` event targeting the element.\n     * @param {boolean} keyboardFocused Indicates whether the element is focused.\n     */\n    onKeyboardFocus: PropTypes.func,\n    /** @ignore */\n    onMouseEnter: PropTypes.func,\n    /** @ignore */\n    onMouseLeave: PropTypes.func,\n    /** @ignore */\n    onMouseOut: PropTypes.func,\n    /** @ignore */\n    onTouchStart: PropTypes.func,\n    /**\n     * Callback function fired when the button is touch-tapped.\n     *\n     * @param {object} event TouchTap event targeting the button.\n     */\n    onTouchTap: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The text to supply to the element's tooltip.\n     */\n    tooltip: PropTypes.node,\n    /**\n     * The vertical and horizontal positions, respectively, of the element's tooltip.\n     * Possible values are: \"bottom-center\", \"top-center\", \"bottom-right\", \"top-right\",\n     * \"bottom-left\", and \"top-left\".\n     */\n    tooltipPosition: propTypes.cornersAndCenter,\n    /**\n     * Override the inline-styles of the tooltip element.\n     */\n    tooltipStyles: PropTypes.object,\n    /**\n     * If true, increase the tooltip element's size. Useful for increasing tooltip\n     * readability on mobile devices.\n     */\n    touch: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    disabled: false,\n    disableTouchRipple: false,\n    iconStyle: {},\n    tooltipPosition: 'bottom-center',\n    touch: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n    isKeyboardFocused: false,\n    // Not to be confonded with the touch property.\n    // This state is to determined if it's a mobile device.\n    touch: false,\n    tooltipShown: false,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.disabled) {\n      this.setState({hovered: false});\n    }\n  }\n\n  setKeyboardFocus() {\n    this.button.setKeyboardFocus();\n  }\n\n  showTooltip() {\n    if (this.props.tooltip) {\n      this.setState({tooltipShown: true});\n    }\n  }\n\n  hideTooltip() {\n    if (this.props.tooltip) this.setState({tooltipShown: false});\n  }\n\n  handleBlur = (event) => {\n    this.hideTooltip();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n  };\n\n  handleFocus = (event) => {\n    this.showTooltip();\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n  };\n\n  handleMouseLeave = (event) => {\n    if (!this.button.isKeyboardFocused()) {\n      this.hideTooltip();\n    }\n    this.setState({hovered: false});\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(event);\n    }\n  };\n\n  handleMouseOut = (event) => {\n    if (this.props.disabled) this.hideTooltip();\n    if (this.props.onMouseOut) this.props.onMouseOut(event);\n  };\n\n  handleMouseEnter = (event) => {\n    this.showTooltip();\n\n    // Cancel hover styles for touch devices\n    if (!this.state.touch) {\n      this.setState({hovered: true});\n    }\n    if (this.props.onMouseEnter) {\n      this.props.onMouseEnter(event);\n    }\n  };\n\n  handleTouchStart = (event) => {\n    this.setState({touch: true});\n\n    if (this.props.onTouchStart) {\n      this.props.onTouchStart(event);\n    }\n  };\n\n  handleKeyboardFocus = (event, isKeyboardFocused) => {\n    const {disabled, onFocus, onBlur, onKeyboardFocus} = this.props;\n    if (isKeyboardFocused && !disabled) {\n      this.showTooltip();\n      if (onFocus) {\n        onFocus(event);\n      }\n    } else {\n      this.hideTooltip();\n      if (onBlur) {\n        onBlur(event);\n      }\n    }\n\n    this.setState({isKeyboardFocused});\n    if (onKeyboardFocus) {\n      onKeyboardFocus(event, isKeyboardFocused);\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      hoveredStyle,\n      disableTouchRipple,\n      children,\n      iconClassName,\n      style,\n      tooltip,\n      tooltipPosition: tooltipPositionProp,\n      tooltipStyles,\n      touch,\n      iconStyle,\n      ...other\n    } = this.props;\n    let fonticon;\n\n    const styles = getStyles(this.props, this.context);\n    const tooltipPosition = tooltipPositionProp.split('-');\n\n    const hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;\n\n    const mergedRootStyles = Object.assign(\n      styles.root,\n      style,\n      hovered ? hoveredStyle : {}\n    );\n\n    const tooltipElement = tooltip ? (\n      <Tooltip\n        label={tooltip}\n        show={this.state.tooltipShown}\n        touch={touch}\n        style={Object.assign(styles.tooltip, tooltipStyles)}\n        verticalPosition={tooltipPosition[0]}\n        horizontalPosition={tooltipPosition[1]}\n      />\n    ) : null;\n\n    if (iconClassName) {\n      const {\n        iconHoverColor,\n        ...iconStyleFontIcon\n      } = iconStyle;\n\n      fonticon = (\n        <FontIcon\n          className={iconClassName}\n          hoverColor={disabled ? null : iconHoverColor}\n          style={Object.assign(\n            {},\n            disabled && styles.disabled,\n            iconStyleFontIcon\n          )}\n          color={this.context.muiTheme.baseTheme.palette.textColor}\n        >\n          {children}\n        </FontIcon>\n      );\n    }\n\n    const childrenStyle = disabled ? Object.assign({}, iconStyle, styles.disabled) : iconStyle;\n\n    return (\n      <EnhancedButton\n        ref={(ref) => this.button = ref}\n        {...other}\n        centerRipple={true}\n        disabled={disabled}\n        onTouchStart={this.handleTouchStart}\n        style={mergedRootStyles}\n        disableTouchRipple={disableTouchRipple}\n        onBlur={this.handleBlur}\n        onFocus={this.handleFocus}\n        onMouseLeave={this.handleMouseLeave}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseOut={this.handleMouseOut}\n        onKeyboardFocus={this.handleKeyboardFocus}\n      >\n        {tooltipElement}\n        {fonticon}\n        {extendChildren(children, {\n          style: childrenStyle,\n        })}\n      </EnhancedButton>\n    );\n  }\n}\n\nexport default IconButton;\n"]}