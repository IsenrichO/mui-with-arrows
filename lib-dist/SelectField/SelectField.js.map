{"version":3,"sources":["../../src/SelectField/SelectField.js"],"names":["getStyles","props","label","paddingLeft","top","floatingLabelText","icon","right","hideDropDownUnderline","borderTop","dropDownMenu","display","SelectField","render","autoWidth","multiple","children","style","labelStyle","iconStyle","id","underlineDisabledStyle","underlineFocusStyle","menuItemStyle","selectedMenuItemStyle","underlineStyle","dropDownMenuProps","errorStyle","disabled","floatingLabelFixed","floatingLabelStyle","hintStyle","hintText","fullWidth","errorText","listStyle","maxHeight","menuStyle","onFocus","onBlur","onChange","selectionRenderer","value","other","styles","context","propTypes","bool","node","object","string","number","func","any","defaultProps","contextTypes","muiTheme","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAO;AACLC,WAAO;AACLC,mBAAa,CADR;AAELC,WAAKH,MAAMI,iBAAN,GAA0B,CAA1B,GAA8B,CAAC;AAF/B,KADF;AAKLC,UAAM;AACJC,aAAO,CADH;AAEJH,WAAKH,MAAMI,iBAAN,GAA0B,CAA1B,GAA8B;AAF/B,KALD;AASLG,2BAAuB;AACrBC,iBAAW;AADU,KATlB;AAYLC,kBAAc;AACZC,eAAS;AADG;AAZT,GAAP;AAgBD;;IAEKC,W;;;;;;;;wBA4JJC,M,qBAAS;AAAA,iBAiCH,KAAKZ,KAjCF;AAAA,QAELa,SAFK,UAELA,SAFK;AAAA,QAGLC,QAHK,UAGLA,QAHK;AAAA,QAILC,QAJK,UAILA,QAJK;AAAA,QAKLC,KALK,UAKLA,KALK;AAAA,QAMLC,UANK,UAMLA,UANK;AAAA,QAOLC,SAPK,UAOLA,SAPK;AAAA,QAQLC,EARK,UAQLA,EARK;AAAA,QASLC,sBATK,UASLA,sBATK;AAAA,QAULC,mBAVK,UAULA,mBAVK;AAAA,QAWLC,aAXK,UAWLA,aAXK;AAAA,QAYLC,qBAZK,UAYLA,qBAZK;AAAA,QAaLC,cAbK,UAaLA,cAbK;AAAA,QAcLC,iBAdK,UAcLA,iBAdK;AAAA,QAeLC,UAfK,UAeLA,UAfK;AAAA,QAgBLC,QAhBK,UAgBLA,QAhBK;AAAA,QAiBLC,kBAjBK,UAiBLA,kBAjBK;AAAA,QAkBLxB,iBAlBK,UAkBLA,iBAlBK;AAAA,QAmBLyB,kBAnBK,UAmBLA,kBAnBK;AAAA,QAoBLC,SApBK,UAoBLA,SApBK;AAAA,QAqBLC,QArBK,UAqBLA,QArBK;AAAA,QAsBLC,SAtBK,UAsBLA,SAtBK;AAAA,QAuBLC,SAvBK,UAuBLA,SAvBK;AAAA,QAwBLC,SAxBK,UAwBLA,SAxBK;AAAA,QAyBLC,SAzBK,UAyBLA,SAzBK;AAAA,QA0BLC,SA1BK,UA0BLA,SA1BK;AAAA,QA2BLC,OA3BK,UA2BLA,OA3BK;AAAA,QA4BLC,MA5BK,UA4BLA,MA5BK;AAAA,QA6BLC,QA7BK,UA6BLA,QA7BK;AAAA,QA8BLC,iBA9BK,UA8BLA,iBA9BK;AAAA,QA+BLC,KA/BK,UA+BLA,KA/BK;AAAA,QAgCFC,KAhCE;;;AAmCP,QAAMC,SAAS5C,UAAU,KAAKC,KAAf,EAAsB,KAAK4C,OAA3B,CAAf;;AAEA,WACE;AAAA;AAAA,iCACMF,KADN;AAEE,eAAO1B,KAFT;AAGE,kBAAUW,QAHZ;AAIE,4BAAoBC,kBAJtB;AAKE,2BAAmBxB,iBALrB;AAME,4BAAoByB,kBANtB;AAOE,mBAAWC,SAPb;AAQE,kBAAW,CAACC,QAAD,IAAa,CAAC3B,iBAAf,GAAoC,GAApC,GAA0C2B,QARtD;AASE,mBAAWC,SATb;AAUE,mBAAWC,SAVb;AAWE,wBAAgBT,cAXlB;AAYE,oBAAYE,UAZd;AAaE,iBAASW,OAbX;AAcE,gBAAQC,MAdV;AAeE,YAAInB,EAfN;AAgBE,gCAAwBC,sBAhB1B;AAiBE,6BAAqBC;AAjBvB;AAmBE;AAAA;AAAA;AACE,oBAAUM,QADZ;AAEE,iBAAO,sBAAcgB,OAAOlC,YAArB,EAAmC2B,SAAnC,CAFT;AAGE,sBAAY,sBAAcO,OAAO1C,KAArB,EAA4BgB,UAA5B,CAHd;AAIE,qBAAW,sBAAc0B,OAAOtC,IAArB,EAA2Ba,SAA3B,CAJb;AAKE,yBAAeI,aALjB;AAME,iCAAuBC,qBANzB;AAOE,0BAAgBoB,OAAOpC,qBAPzB;AAQE,qBAAW2B,SARb;AASE,qBAAWrB,SATb;AAUE,iBAAO4B,KAVT;AAWE,oBAAUF,QAXZ;AAYE,qBAAWJ,SAZb;AAaE,oBAAUrB,QAbZ;AAcE,6BAAmB0B;AAdrB,WAeMf,iBAfN;AAiBGV;AAjBH;AAnBF,KADF;AAyCD,G;;;4BAzOM8B,S,GAAY;AACjB;;;;;AAKAhC,aAAW,oBAAUiC,IANJ;AAOjB;;;;;AAKA/B,YAAU,oBAAUgC,IAZH;AAajB;;;AAGApB,YAAU,oBAAUmB,IAhBH;AAiBjB;;;AAGArB,qBAAmB,oBAAUuB,MApBZ;AAqBjB;;;AAGAtB,cAAY,oBAAUsB,MAxBL;AAyBjB;;;AAGAf,aAAW,oBAAUc,IA5BJ;AA6BjB;;;AAGAnB,sBAAoB,oBAAUkB,IAhCb;AAiCjB;;;AAGAjB,sBAAoB,oBAAUmB,MApCb;AAqCjB;;;AAGA5C,qBAAmB,oBAAU2C,IAxCZ;AAyCjB;;;AAGAf,aAAW,oBAAUc,IA5CJ;AA6CjB;;;AAGAhB,aAAW,oBAAUkB,MAhDJ;AAiDjB;;;AAGAjB,YAAU,oBAAUgB,IApDH;AAqDjB;;;AAGA7B,aAAW,oBAAU8B,MAxDJ;AAyDjB;;;AAGA7B,MAAI,oBAAU8B,MA5DG;AA6DjB;;;AAGAhC,cAAY,oBAAU+B,MAhEL;AAiEjB;;;AAGAd,aAAW,oBAAUc,MApEJ;AAqEjB;;;AAGAb,aAAW,oBAAUe,MAxEJ;AAyEjB;;;AAGA5B,iBAAe,oBAAU0B,MA5ER;AA6EjB;;;AAGAZ,aAAW,oBAAUY,MAhFJ;AAiFjB;;;;AAIAlC,YAAU,oBAAUgC,IArFH;AAsFjB;AACAR,UAAQ,oBAAUa,IAvFD;AAwFjB;;;;;;;;;;;;AAYAZ,YAAU,oBAAUY,IApGH;AAqGjB;AACAd,WAAS,oBAAUc,IAtGF;AAuGjB;;;AAGA5B,yBAAuB,oBAAUyB,MA1GhB;AA2GjB;;;;;;;;;;AAUAR,qBAAmB,oBAAUW,IArHZ;AAsHjB;;;AAGAnC,SAAO,oBAAUgC,MAzHA;AA0HjB;;;;AAIA5B,0BAAwB,oBAAU4B,MA9HjB;AA+HjB;;;;AAIA3B,uBAAqB,oBAAU2B,MAnId;AAoIjB;;;AAGAxB,kBAAgB,oBAAUwB,MAvIT;AAwIjB;;;;;AAKAP,SAAO,oBAAUW;AA7IA,C,SAgJZC,Y,GAAe;AACpBxC,aAAW,KADS;AAEpBc,YAAU,KAFU;AAGpBK,aAAW,KAHS;AAIpBlB,YAAU;AAJU,C,SAOfwC,Y,GAAe;AACpBC,YAAU,oBAAUP,MAAV,CAAiBQ;AADP,C;kBAqFT7C,W","file":"SelectField.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '../TextField';\nimport DropDownMenu from '../DropDownMenu';\n\nfunction getStyles(props) {\n  return {\n    label: {\n      paddingLeft: 0,\n      top: props.floatingLabelText ? 6 : -4,\n    },\n    icon: {\n      right: 0,\n      top: props.floatingLabelText ? 8 : 0,\n    },\n    hideDropDownUnderline: {\n      borderTop: 'none',\n    },\n    dropDownMenu: {\n      display: 'block',\n    },\n  };\n}\n\nclass SelectField extends Component {\n  static propTypes = {\n    /**\n     * If true, the width will automatically be set according to the\n     * items inside the menu.\n     * To control the width in CSS instead, leave this prop set to `false`.\n     */\n    autoWidth: PropTypes.bool,\n    /**\n     * The `MenuItem` elements to populate the select field with.\n     * If the menu items have a `label` prop, that value will\n     * represent the selected menu item in the rendered select field.\n     */\n    children: PropTypes.node,\n    /**\n     * If true, the select field will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Object that can handle and override any property of component DropDownMenu.\n     */\n    dropDownMenuProps: PropTypes.object,\n    /**\n     * Override the inline-styles of the error element.\n     */\n    errorStyle: PropTypes.object,\n    /**\n     * The error content to display.\n     */\n    errorText: PropTypes.node,\n    /**\n     * If true, the floating label will float even when no value is selected.\n     */\n    floatingLabelFixed: PropTypes.bool,\n    /**\n     * Override the inline-styles of the floating label.\n     */\n    floatingLabelStyle: PropTypes.object,\n    /**\n     * The content of the floating label.\n     */\n    floatingLabelText: PropTypes.node,\n    /**\n     * If true, the select field will take up the full width of its container.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Override the inline-styles of the hint element.\n     */\n    hintStyle: PropTypes.object,\n    /**\n     * The hint content to display.\n     */\n    hintText: PropTypes.node,\n    /**\n     * Override the inline-styles of the icon element.\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * The id prop for the text field.\n     */\n    id: PropTypes.string,\n    /**\n     * Override the label style when the select field is inactive.\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the underlying `List` element.\n     */\n    listStyle: PropTypes.object,\n    /**\n     * Override the default max-height of the underlying `DropDownMenu` element.\n     */\n    maxHeight: PropTypes.number,\n    /**\n     * Override the inline-styles of menu items.\n     */\n    menuItemStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the underlying `DropDownMenu` element.\n     */\n    menuStyle: PropTypes.object,\n    /**\n     * If true, `value` must be an array and the menu will support\n     * multiple selections.\n     */\n    multiple: PropTypes.bool,\n    /** @ignore */\n    onBlur: PropTypes.func,\n    /**\n     * Callback function fired when a menu item is selected.\n     *\n     * @param {object} event TouchTap event targeting the menu item\n     * that was selected.\n     * @param {number} key The index of the selected menu item, or undefined\n     * if `multiple` is true.\n     * @param {any} payload If `multiple` is true, the menu's `value`\n     * array with either the menu item's `value` added (if\n     * it wasn't already selected) or omitted (if it was already selected).\n     * Otherwise, the `value` of the menu item.\n     */\n    onChange: PropTypes.func,\n    /** @ignore */\n    onFocus: PropTypes.func,\n    /**\n     * Override the inline-styles of selected menu items.\n     */\n    selectedMenuItemStyle: PropTypes.object,\n    /**\n     * Customize the rendering of the selected item.\n     *\n     * @param {any} value If `multiple` is true, the menu's `value`\n     * array with either the menu item's `value` added (if\n     * it wasn't already selected) or omitted (if it was already selected).\n     * Otherwise, the `value` of the menu item.\n     * @param {any} menuItem The selected `MenuItem`.\n     * If `multiple` is true, this will be an array with the `MenuItem`s matching the `value`s parameter.\n     */\n    selectionRenderer: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * Override the inline-styles of the underline element when the select\n     * field is disabled.\n     */\n    underlineDisabledStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the underline element when the select field\n     * is focused.\n     */\n    underlineFocusStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the underline element.\n     */\n    underlineStyle: PropTypes.object,\n    /**\n     * If `multiple` is true, an array of the `value`s of the selected\n     * menu items. Otherwise, the `value` of the selected menu item.\n     * If provided, the menu will be a controlled component.\n     */\n    value: PropTypes.any,\n  };\n\n  static defaultProps = {\n    autoWidth: false,\n    disabled: false,\n    fullWidth: false,\n    multiple: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      autoWidth,\n      multiple,\n      children,\n      style,\n      labelStyle,\n      iconStyle,\n      id,\n      underlineDisabledStyle,\n      underlineFocusStyle,\n      menuItemStyle,\n      selectedMenuItemStyle,\n      underlineStyle,\n      dropDownMenuProps,\n      errorStyle,\n      disabled,\n      floatingLabelFixed,\n      floatingLabelText,\n      floatingLabelStyle,\n      hintStyle,\n      hintText,\n      fullWidth,\n      errorText,\n      listStyle,\n      maxHeight,\n      menuStyle,\n      onFocus,\n      onBlur,\n      onChange,\n      selectionRenderer,\n      value,\n      ...other\n    } = this.props;\n\n    const styles = getStyles(this.props, this.context);\n\n    return (\n      <TextField\n        {...other}\n        style={style}\n        disabled={disabled}\n        floatingLabelFixed={floatingLabelFixed}\n        floatingLabelText={floatingLabelText}\n        floatingLabelStyle={floatingLabelStyle}\n        hintStyle={hintStyle}\n        hintText={(!hintText && !floatingLabelText) ? ' ' : hintText}\n        fullWidth={fullWidth}\n        errorText={errorText}\n        underlineStyle={underlineStyle}\n        errorStyle={errorStyle}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        id={id}\n        underlineDisabledStyle={underlineDisabledStyle}\n        underlineFocusStyle={underlineFocusStyle}\n      >\n        <DropDownMenu\n          disabled={disabled}\n          style={Object.assign(styles.dropDownMenu, menuStyle)}\n          labelStyle={Object.assign(styles.label, labelStyle)}\n          iconStyle={Object.assign(styles.icon, iconStyle)}\n          menuItemStyle={menuItemStyle}\n          selectedMenuItemStyle={selectedMenuItemStyle}\n          underlineStyle={styles.hideDropDownUnderline}\n          listStyle={listStyle}\n          autoWidth={autoWidth}\n          value={value}\n          onChange={onChange}\n          maxHeight={maxHeight}\n          multiple={multiple}\n          selectionRenderer={selectionRenderer}\n          {...dropDownMenuProps}\n        >\n          {children}\n        </DropDownMenu>\n      </TextField>\n    );\n  }\n}\n\nexport default SelectField;\n"]}