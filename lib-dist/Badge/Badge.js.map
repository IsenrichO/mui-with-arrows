{"version":3,"sources":["../../src/Badge/Badge.js"],"names":["getStyles","props","context","primary","secondary","badge","muiTheme","badgeBackgroundColor","badgeTextColor","primaryColor","primaryTextColor","secondaryColor","secondaryTextColor","color","textColor","radius","radius2x","Math","floor","root","position","display","padding","flexDirection","flexWrap","justifyContent","alignContent","alignItems","top","right","fontWeight","fontSize","width","height","borderRadius","backgroundColor","Badge","render","badgeContent","badgeStyle","children","style","other","prepareStyles","styles","propTypes","node","isRequired","object","className","string","bool","defaultProps","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,MAC1BC,OAD0B,GACJF,KADI,CAC1BE,OAD0B;AAAA,MACjBC,SADiB,GACJH,KADI,CACjBG,SADiB;AAAA,MAE1BC,KAF0B,GAEjBH,QAAQI,QAFS,CAE1BD,KAF0B;;;AAIjC,MAAIE,6BAAJ;AACA,MAAIC,uBAAJ;;AAEA,MAAIL,OAAJ,EAAa;AACXI,2BAAuBF,MAAMI,YAA7B;AACAD,qBAAiBH,MAAMK,gBAAvB;AACD,GAHD,MAGO,IAAIN,SAAJ,EAAe;AACpBG,2BAAuBF,MAAMM,cAA7B;AACAH,qBAAiBH,MAAMO,kBAAvB;AACD,GAHM,MAGA;AACLL,2BAAuBF,MAAMQ,KAA7B;AACAL,qBAAiBH,MAAMS,SAAvB;AACD;;AAED,MAAMC,SAAS,EAAf;AACA,MAAMC,WAAWC,KAAKC,KAAL,CAAW,IAAIH,MAAf,CAAjB;;AAEA,SAAO;AACLI,UAAM;AACJC,gBAAU,UADN;AAEJC,eAAS,cAFL;AAGJC,eAAYN,QAAZ,WAA0BA,QAA1B,WAAwCD,MAAxC,WAAoDA,MAApD;AAHI,KADD;AAMLV,WAAO;AACLgB,eAAS,MADJ;AAELE,qBAAe,KAFV;AAGLC,gBAAU,MAHL;AAILC,sBAAgB,QAJX;AAKLC,oBAAc,QALT;AAMLC,kBAAY,QANP;AAOLP,gBAAU,UAPL;AAQLQ,WAAK,CARA;AASLC,aAAO,CATF;AAULC,kBAAYzB,MAAMyB,UAVb;AAWLC,gBAAUhB,MAXL;AAYLiB,aAAOhB,QAZF;AAaLiB,cAAQjB,QAbH;AAcLkB,oBAAc,KAdT;AAeLC,uBAAiB5B,oBAfZ;AAgBLM,aAAOL;AAhBF;AANF,GAAP;AAyBD;;IAEK4B,K;;;;;;;;kBAyCJC,M,qBAAS;AAAA,iBASH,KAAKpC,KATF;AAAA,QAELqC,YAFK,UAELA,YAFK;AAAA,QAGLC,UAHK,UAGLA,UAHK;AAAA,QAILC,QAJK,UAILA,QAJK;AAAA,QAKLrC,OALK,UAKLA,OALK;AAAA,QAMLC,SANK,UAMLA,SANK;AAAA,QAOLqC,KAPK,UAOLA,KAPK;AAAA,QAQFC,KARE;AAAA,QAWAC,aAXA,GAWiB,KAAKzC,OAAL,CAAaI,QAX9B,CAWAqC,aAXA;;AAYP,QAAMC,SAAS5C,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;;AAEA,WACE;AAAA;AAAA,iCAASwC,KAAT,IAAgB,OAAOC,cAAc,sBAAc,EAAd,EAAkBC,OAAOzB,IAAzB,EAA+BsB,KAA/B,CAAd,CAAvB;AACGD,cADH;AAEE;AAAA;AAAA,UAAM,OAAOG,cAAc,sBAAc,EAAd,EAAkBC,OAAOvC,KAAzB,EAAgCkC,UAAhC,CAAd,CAAb;AACGD;AADH;AAFF,KADF;AAQD,G;;;4BA9DMO,S,GAAY;AACjB;;;AAGAP,gBAAc,oBAAUQ,IAAV,CAAeC,UAJZ;AAKjB;;;AAGAR,cAAY,oBAAUS,MARL;AASjB;;;AAGAR,YAAU,oBAAUM,IAZH;AAajB;;;AAGAG,aAAW,oBAAUC,MAhBJ;AAiBjB;;;AAGA/C,WAAS,oBAAUgD,IApBF;AAqBjB;;;AAGA/C,aAAW,oBAAU+C,IAxBJ;AAyBjB;;;AAGAV,SAAO,oBAAUO;AA5BA,C,SA+BZI,Y,GAAe;AACpBjD,WAAS,KADW;AAEpBC,aAAW;AAFS,C,SAKfiD,Y,GAAe;AACpB/C,YAAU,oBAAU0C,MAAV,CAAiBD;AADP,C;kBA6BTX,K","file":"Badge.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {primary, secondary} = props;\n  const {badge} = context.muiTheme;\n\n  let badgeBackgroundColor;\n  let badgeTextColor;\n\n  if (primary) {\n    badgeBackgroundColor = badge.primaryColor;\n    badgeTextColor = badge.primaryTextColor;\n  } else if (secondary) {\n    badgeBackgroundColor = badge.secondaryColor;\n    badgeTextColor = badge.secondaryTextColor;\n  } else {\n    badgeBackgroundColor = badge.color;\n    badgeTextColor = badge.textColor;\n  }\n\n  const radius = 12;\n  const radius2x = Math.floor(2 * radius);\n\n  return {\n    root: {\n      position: 'relative',\n      display: 'inline-block',\n      padding: `${radius2x}px ${radius2x}px ${radius}px ${radius}px`,\n    },\n    badge: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      alignContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      fontWeight: badge.fontWeight,\n      fontSize: radius,\n      width: radius2x,\n      height: radius2x,\n      borderRadius: '50%',\n      backgroundColor: badgeBackgroundColor,\n      color: badgeTextColor,\n    },\n  };\n}\n\nclass Badge extends Component {\n  static propTypes = {\n    /**\n     * This is the content rendered within the badge.\n     */\n    badgeContent: PropTypes.node.isRequired,\n    /**\n     * Override the inline-styles of the badge element.\n     */\n    badgeStyle: PropTypes.object,\n    /**\n     * The badge will be added relativelty to this node.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * If true, the badge will use the primary badge colors.\n     */\n    primary: PropTypes.bool,\n    /**\n     * If true, the badge will use the secondary badge colors.\n     */\n    secondary: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    primary: false,\n    secondary: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      badgeContent,\n      badgeStyle,\n      children,\n      primary, // eslint-disable-line no-unused-vars\n      secondary, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    return (\n      <div {...other} style={prepareStyles(Object.assign({}, styles.root, style))}>\n        {children}\n        <span style={prepareStyles(Object.assign({}, styles.badge, badgeStyle))}>\n          {badgeContent}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Badge;\n"]}