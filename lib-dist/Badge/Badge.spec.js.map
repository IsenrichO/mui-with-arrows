{"version":3,"sources":["../../src/Badge/Badge.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","badgeTheme","badge","testChildren","it","wrapper","ok","contains","find","length","badgeStyle","backgroundColor","equal","props","style","is","primaryColor","color","primaryTextColor","secondaryColor","secondaryTextColor"],"mappings":"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","file":"Badge.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport Badge from './Badge';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<Badge />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const badgeTheme = muiTheme.badge;\n  const testChildren = <div className=\"unique\">Hello World</div>;\n\n  it('renders children and badgeContent', () => {\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.ok(wrapper.find('span').length, 'should contain the badgeContent');\n  });\n\n  it('renders children and overwrite badge styles', () => {\n    const badgeStyle = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10} badgeStyle={badgeStyle}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.equal(wrapper.find('span').node.props.style.backgroundColor,\n    badgeStyle.backgroundColor, 'should overwrite badge backgroundColor');\n  });\n\n  it('renders children by default', () => {\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n  });\n\n  it('renders children and className', () => {\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10} className=\"testClassName\">{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.ok(wrapper.is('.testClassName'), 'should contain the className');\n  });\n\n  it('renders children and have primary styles', () => {\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10} primary={true}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.equal(wrapper.find('span').node.props.style.backgroundColor,\n    badgeTheme.primaryColor, 'should have primary badge backgroundColor');\n    assert.equal(wrapper.find('span').node.props.style.color,\n    badgeTheme.primaryTextColor, 'should have primary badge text color');\n  });\n\n  it('renders children and have secondary styles', () => {\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10} secondary={true}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.equal(wrapper.find('span').node.props.style.backgroundColor,\n    badgeTheme.secondaryColor, 'should have secondary badge backgroundColor');\n    assert.equal(wrapper.find('span').node.props.style.color,\n    badgeTheme.secondaryTextColor, 'should have secondary badge text color');\n  });\n\n  it('renders children and overwrite root styles', () => {\n    const style = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <Badge badgeContent={10} style={style}>{testChildren}</Badge>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n    assert.equal(wrapper.node.props.style.backgroundColor, style.backgroundColor,\n    'should overwrite badge backgroundColor');\n  });\n});\n"]}