{"version":3,"sources":["../../src/List/makeSelectable.js"],"names":["makeSelectable","MyComponent","hasSelectedDescendant","previousValue","child","isValidElement","props","nestedItems","length","reduce","isChildSelected","handleItemTouchTap","event","item","itemValue","value","onChange","extendChild","styles","selectedItemStyle","type","muiName","selected","selectedChildrenStyles","mergedChildrenStyles","style","keyIndex","cloneElement","onTouchTap","key","map","initiallyOpen","isInitiallyOpen","render","children","other","textColor","context","muiTheme","baseTheme","palette","backgroundColor","state","propTypes","node","func","object","any","contextTypes","isRequired"],"mappings":"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","file":"makeSelectable.js","sourcesContent":["import React, {Component, Children} from 'react';\nimport PropTypes from 'prop-types';\nimport {fade} from '../utils/colorManipulator';\n\nexport const makeSelectable = (MyComponent) => {\n  return class extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      onChange: PropTypes.func,\n      selectedItemStyle: PropTypes.object,\n      value: PropTypes.any,\n    };\n\n    static contextTypes = {\n      muiTheme: PropTypes.object.isRequired,\n    };\n\n    extendChild(child, styles, selectedItemStyle) {\n      if (child && child.type && child.type.muiName === 'ListItem') {\n        const selected = this.isChildSelected(child, this.props);\n        let selectedChildrenStyles;\n        if (selected) {\n          selectedChildrenStyles = Object.assign({}, styles, selectedItemStyle);\n        }\n\n        const mergedChildrenStyles = Object.assign({}, child.props.style, selectedChildrenStyles);\n\n        this.keyIndex += 1;\n\n        return React.cloneElement(child, {\n          onTouchTap: (event) => {\n            this.handleItemTouchTap(event, child);\n            if (child.props.onTouchTap) {\n              child.props.onTouchTap(event);\n            }\n          },\n          key: this.keyIndex,\n          style: mergedChildrenStyles,\n          nestedItems: child.props.nestedItems.map((child) => this.extendChild(child, styles, selectedItemStyle)),\n          initiallyOpen: this.isInitiallyOpen(child),\n        });\n      } else {\n        return child;\n      }\n    }\n\n    isInitiallyOpen(child) {\n      if (child.props.initiallyOpen) {\n        return child.props.initiallyOpen;\n      }\n      return this.hasSelectedDescendant(false, child);\n    }\n\n    hasSelectedDescendant = (previousValue, child) => {\n      if (React.isValidElement(child) && child.props.nestedItems && child.props.nestedItems.length > 0) {\n        return child.props.nestedItems.reduce(this.hasSelectedDescendant, previousValue);\n      }\n      return previousValue || this.isChildSelected(child, this.props);\n    };\n\n    isChildSelected(child, props) {\n      return props.value === child.props.value;\n    }\n\n    handleItemTouchTap = (event, item) => {\n      const itemValue = item.props.value;\n\n      if (itemValue !== this.props.value) {\n        if (this.props.onChange) {\n          this.props.onChange(event, itemValue);\n        }\n      }\n    };\n\n    render() {\n      const {\n        children,\n        selectedItemStyle,\n        ...other\n      } = this.props;\n\n      this.keyIndex = 0;\n      const styles = {};\n\n      if (!selectedItemStyle) {\n        const textColor = this.context.muiTheme.baseTheme.palette.textColor;\n        styles.backgroundColor = fade(textColor, 0.2);\n      }\n\n      return (\n        <MyComponent {...other} {...this.state}>\n          {Children.map(children, (child) => (\n            this.extendChild(child, styles, selectedItemStyle))\n          )}\n        </MyComponent>\n      );\n    }\n  };\n};\n\nexport default makeSelectable;\n"]}