{"version":3,"sources":["../../src/List/List.js"],"names":["List","render","props","children","style","other","prepareStyles","context","muiTheme","hasSubheader","firstChild","toArray","type","styles","root","padding","propTypes","node","object","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEMA,I;;;;;;;;iBAiBJC,M,qBAAS;AAAA,iBAKH,KAAKC,KALF;AAAA,QAELC,QAFK,UAELA,QAFK;AAAA,QAGLC,KAHK,UAGLA,KAHK;AAAA,QAIFC,KAJE;AAAA,QAOAC,aAPA,GAOiB,KAAKC,OAAL,CAAaC,QAP9B,CAOAF,aAPA;;;AASP,QAAIG,eAAe,KAAnB;;AAEA,QAAMC,aAAa,gBAASC,OAAT,CAAiBR,QAAjB,EAA2B,CAA3B,CAAnB;AACA,QAAI,2BAAeO,UAAf,KAA8BA,WAAWE,IAAX,wBAAlC,EAAiE;AAC/DH,qBAAe,IAAf;AACD;;AAED,QAAMI,SAAS;AACbC,YAAM;AACJC,kBAAYN,eAAe,CAAf,GAAmB,CAA/B;AADI;AADO,KAAf;;AAMA,WACE;AAAA;AAAA,iCAASJ,KAAT,IAAgB,OAAOC,cAAc,sBAAcO,OAAOC,IAArB,EAA2BV,KAA3B,CAAd,CAAvB;AACGD;AADH,KADF;AAKD,G;;;4BA3CMa,S,GAAY;AACjB;;;;AAIAb,YAAU,oBAAUc,IALH;AAMjB;;;AAGAb,SAAO,oBAAUc;AATA,C,SAYZC,Y,GAAe;AACpBX,YAAU,oBAAUU,MAAV,CAAiBE;AADP,C;kBAkCTpB,I","file":"List.js","sourcesContent":["import React, {Component, Children, isValidElement} from 'react';\nimport PropTypes from 'prop-types';\nimport Subheader from '../Subheader';\n\nclass List extends Component {\n  static propTypes = {\n    /**\n     * These are usually `ListItem`s that are passed to\n     * be part of the list.\n     */\n    children: PropTypes.node,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      children,\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n\n    let hasSubheader = false;\n\n    const firstChild = Children.toArray(children)[0];\n    if (isValidElement(firstChild) && firstChild.type === Subheader) {\n      hasSubheader = true;\n    }\n\n    const styles = {\n      root: {\n        padding: `${hasSubheader ? 0 : 8}px 0px 8px 0px`,\n      },\n    };\n\n    return (\n      <div {...other} style={prepareStyles(Object.assign(styles.root, style))}>\n        {children}\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]}