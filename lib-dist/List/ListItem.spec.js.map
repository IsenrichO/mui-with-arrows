{"version":3,"sources":["../../src/List/ListItem.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","it","wrapper","enhancedButton","find","ok","length","testText","strictEqual","children","text","testClass","prop","notOk","primaryTextButton","props","open","simulate","stopPropagation","filter","setProps","testColor","style","backgroundColor","state","hovered","disabled","button","dive","is","CustomElement"],"mappings":"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","file":"ListItem.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport ListItem from './ListItem';\nimport EnhancedButton from '../internal/EnhancedButton';\nimport getMuiTheme from '../styles/getMuiTheme';\nimport NestedList from './NestedList';\n\ndescribe('<ListItem />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  it('should render an EnhancedButton', () => {\n    const wrapper = shallowWithContext(\n      <ListItem />\n    );\n    const enhancedButton = wrapper.find(EnhancedButton);\n    assert.ok(enhancedButton.length);\n  });\n\n  it('should display a list-item with text if primaryText is specified', () => {\n    const testText = 'Primary Text';\n    const wrapper = shallowWithContext(\n      <ListItem\n        primaryText={testText}\n      />\n    );\n    const enhancedButton = wrapper.find(EnhancedButton);\n\n    assert.strictEqual(enhancedButton.children().text(), testText);\n  });\n\n  it('should display a list-item elment with a class if specified', () => {\n    const testClass = 'test-class';\n    const wrapper = shallowWithContext(\n      <ListItem\n        className={testClass}\n      />\n    );\n    const enhancedButton = wrapper.find(EnhancedButton);\n    assert.strictEqual(enhancedButton.prop('className'), testClass);\n  });\n\n  it('should display a disabled list-item if specified.', () => {\n    const wrapper = shallowWithContext(\n      <ListItem\n        disabled={true}\n      />\n    );\n    assert.notOk(wrapper.find(EnhancedButton).length, 'should not have an EnhancedButton');\n  });\n\n  it('should display a disabled list-item with a class if specified.', () => {\n    const testClass = 'test-class';\n    const wrapper = shallowWithContext(\n      <ListItem\n        className={testClass}\n        disabled={true}\n      />\n    );\n\n    assert.notOk(wrapper.find(EnhancedButton).length, 'should not have an EnhancedButton');\n    assert.strictEqual(wrapper.find(`.${testClass}`).length, 1, 'should have a div with the test class');\n  });\n\n  it('should display a checkbox in the list-item if specified.', () => {\n    const testClass = 'test-class';\n    const wrapper = shallowWithContext(\n      <ListItem\n        leftCheckbox={<div className=\"test-checkbox\" />}\n        className={testClass}\n      />\n    );\n    assert.ok(wrapper.find('.test-checkbox').length);\n    assert.strictEqual(wrapper.find(`.${testClass}`).length, 1, 'should have a div with the test class');\n  });\n\n  describe('prop: primaryTogglesNestedList', () => {\n    it('should toggle nested list when true', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          primaryTogglesNestedList={true}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n      const primaryTextButton = wrapper.find(EnhancedButton);\n\n      assert.strictEqual(wrapper.find(NestedList).props().open, false);\n\n      primaryTextButton.simulate('touchTap', {stopPropagation: () => {}});\n      assert.strictEqual(wrapper.find(NestedList).props().open, true);\n\n      primaryTextButton.simulate('touchTap', {stopPropagation: () => {}});\n      assert.strictEqual(wrapper.find(NestedList).props().open, false);\n    });\n\n    it('should not render primary text button when false', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          primaryTogglesNestedList={false}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n\n      assert.strictEqual(wrapper.filter(EnhancedButton).length, 0);\n    });\n  });\n\n  describe('prop: open', () => {\n    it('should initially open nested list', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          initiallyOpen={true}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n\n      assert.strictEqual(wrapper.find(NestedList).length > 0, true);\n      assert.strictEqual(wrapper.find(NestedList).props().open, true);\n    });\n\n    it('should toggle nested list', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          open={false}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n\n      assert.strictEqual(wrapper.find(NestedList).props().open, false);\n      wrapper.setProps({\n        open: true,\n      });\n      assert.strictEqual(wrapper.find(NestedList).props().open, true);\n    });\n\n    it('should not control the state', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          initiallyOpen={false}\n          primaryTogglesNestedList={true}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n\n      const primaryTextButton = wrapper.find(EnhancedButton);\n      primaryTextButton.simulate('touchTap', {stopPropagation: () => {}});\n      assert.strictEqual(wrapper.find(NestedList).props().open, true);\n    });\n\n    it('should control the state', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          open={false}\n          primaryTogglesNestedList={true}\n          nestedItems={[\n            <ListItem key={1} />,\n          ]}\n        />\n      );\n\n      const primaryTextButton = wrapper.find(EnhancedButton);\n      primaryTextButton.simulate('touchTap', {stopPropagation: () => {}});\n      assert.strictEqual(wrapper.find(NestedList).props().open, false);\n    });\n  });\n\n  describe('prop: hoverColor', () => {\n    const testColor = '#ededed';\n\n    it('should use a background color on hover if hoverColor is specified', () => {\n      const wrapper = shallowWithContext(\n        <ListItem hoverColor={testColor} />\n      );\n      wrapper.find(EnhancedButton).simulate('mouseEnter');\n      assert.strictEqual(wrapper.find(EnhancedButton).props().style.backgroundColor, testColor);\n    });\n\n    it('should use a background color if isKeyboardFocused is true', () => {\n      const wrapper = shallowWithContext(\n        <ListItem hoverColor={testColor} isKeyboardFocused={true} />\n      );\n      assert.strictEqual(wrapper.find(EnhancedButton).props().style.backgroundColor, testColor);\n    });\n  });\n\n  describe('hover state', () => {\n    it('should reset the hover state when disabled', () => {\n      const wrapper = shallowWithContext(\n        <ListItem primaryText=\"foo\" />\n      );\n\n      wrapper.find(EnhancedButton).simulate('mouseEnter');\n      assert.strictEqual(wrapper.state().hovered, true, 'should respond to the event');\n      wrapper.setProps({\n        disabled: true,\n      });\n      assert.strictEqual(wrapper.state().hovered, false, 'should reset the state');\n    });\n  });\n\n  describe('prop: containerElement', () => {\n    it('should use the given string containerElement prop', () => {\n      const wrapper = shallowWithContext(\n        <ListItem\n          containerElement=\"a\"\n          primaryText=\"Links are great\"\n        />\n      );\n      const button = wrapper.find(EnhancedButton).dive({context: {muiTheme}});\n      assert.strictEqual(button.is('a'), true, 'should match an a element');\n    });\n\n    it('should use the given ReactElement containerElement', () => {\n      const CustomElement = (props) => <a {...props} />;\n      const wrapper = shallowWithContext(\n        <ListItem\n          containerElement={<CustomElement someProp=\"yuuuuuge\" />}\n          primaryText=\"Custom links are even greater\"\n        />\n      );\n      const button = wrapper.find(EnhancedButton).dive({context: {muiTheme}});\n      assert.strictEqual(button.is(CustomElement), true, 'should match the custom element');\n    });\n  });\n});\n"]}