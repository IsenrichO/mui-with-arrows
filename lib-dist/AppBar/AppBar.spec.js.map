{"version":3,"sources":["../../src/AppBar/AppBar.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","it","testChildren","wrapper","ok","contains","is","iconClassName","strictEqual","find","get","props","iconClassNameLeft","iconClassNameRight","length","iconStyle","handleTouchTap","simulate","callCount","style","onLeftIconButtonTouchTap","handleRightIconButtonTouchTap","at","onTitleTouchTap","backgroundColor","titleStyle","zDepth","menuElementLeft","iconButtonStyle","deepEqual","marginTop","expectedStyle","muiPrepared"],"mappings":"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","file":"AppBar.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {spy} from 'sinon';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport AppBar, {getStyles} from './AppBar';\nimport getMuiTheme from '../styles/getMuiTheme';\nimport IconButton from '../IconButton';\nimport FlatButton from '../FlatButton';\n\ndescribe('<AppBar />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  it('renders children by default', () => {\n    const testChildren = <div />;\n    const wrapper = shallowWithContext(\n      <AppBar>{testChildren}</AppBar>\n    );\n\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n  });\n\n  it('renders className', () => {\n    const wrapper = shallowWithContext(\n      <AppBar className=\"testClassName\" />\n    );\n\n    assert.ok(wrapper.is('.testClassName'), 'should contain the className');\n  });\n\n  it('renders iconClassNameLeft', () => {\n    const iconClassName = 'muidocs-icon-navigation-expand-more';\n    const wrapper = shallowWithContext(\n      <AppBar iconClassNameLeft={iconClassName} />\n    );\n\n    assert.strictEqual(wrapper.find(IconButton).get(0).props.iconClassName, iconClassName,\n      'should contain iconClassNameLeft');\n  });\n\n  it('renders iconClassNameRight', () => {\n    const iconClassName = 'muidocs-icon-navigation-expand-more';\n    const wrapper = shallowWithContext(\n      <AppBar iconClassNameRight={iconClassName} />\n    );\n\n    assert.strictEqual(wrapper.find(IconButton).get(1).props.iconClassName, iconClassName,\n      'should contain iconClassNameRight');\n  });\n\n  it('renders iconClassNameLeft and iconClassNameRight', () => {\n    const iconClassNameLeft = 'muidocs-icon-action-home';\n    const iconClassNameRight = 'muidocs-icon-navigation-expand-more';\n    const wrapper = shallowWithContext(\n      <AppBar iconClassNameLeft={iconClassNameLeft} iconClassNameRight={iconClassNameRight} />\n    );\n\n    assert.strictEqual(wrapper.find(IconButton).get(0).props.iconClassName, iconClassNameLeft,\n      'should contain iconClassNameLeft');\n    assert.strictEqual(wrapper.find(IconButton).get(1).props.iconClassName, iconClassNameRight,\n      'should contain iconClassNameRight');\n  });\n\n  describe('iconElementLeft', () => {\n    it('renders the node', () => {\n      const wrapper = shallowWithContext(\n        <AppBar iconElementLeft={<span className=\"icon\" />} />\n      );\n\n      assert.strictEqual(wrapper.find('.icon').length, 1, 'should contain iconElementLeft');\n    });\n\n    it('renders the IconButton with a correct style', () => {\n      const wrapper = shallowWithContext(\n        <AppBar iconElementLeft={<IconButton><div /></IconButton>} />\n      );\n\n      assert.strictEqual(\n        Object.keys(wrapper.find(IconButton).get(0).props.iconStyle).length > 0,\n        true,\n        'should add some properties to the iconStyle'\n      );\n    });\n\n    it('should triggers the onTouchTap', () => {\n      const handleTouchTap = spy();\n      const wrapper = shallowWithContext(\n        <AppBar iconElementLeft={<IconButton onTouchTap={handleTouchTap}><div /></IconButton>} />\n      );\n      wrapper.find(IconButton).simulate('touchTap');\n      assert.strictEqual(handleTouchTap.callCount, 1);\n    });\n  });\n\n  describe('iconElementRight', () => {\n    it('renders the node', () => {\n      const wrapper = shallowWithContext(\n        <AppBar iconElementRight={<span className=\"icon\" />} />\n      );\n\n      assert.strictEqual(wrapper.find('.icon').length, 1, 'should contain iconElementRight');\n    });\n\n    it('renders the FlatButton with a correct style', () => {\n      const wrapper = shallowWithContext(\n        <AppBar iconElementRight={<FlatButton><div /></FlatButton>} />\n      );\n\n      assert.strictEqual(\n\n        Object.keys(wrapper.find(FlatButton).get(0).props.style).length > 1,\n        true,\n        'should add some properties to the style'\n      );\n    });\n  });\n\n  describe('onLeftIconButtonTouchTap', () => {\n    it('should trigger the onTouchTap', () => {\n      const onLeftIconButtonTouchTap = spy();\n      const wrapper = shallowWithContext(\n        <AppBar onLeftIconButtonTouchTap={onLeftIconButtonTouchTap} />\n      );\n\n      wrapper.find(IconButton).simulate('touchTap');\n      assert.strictEqual(onLeftIconButtonTouchTap.callCount, 1,\n        'should have called onLeftIconButtonTouchTap callback function');\n    });\n\n    it('should forward the onTouchTap to onLeftIconButtonTouchTap', () => {\n      const handleTouchTap = spy();\n      const wrapper = shallowWithContext(\n        <AppBar\n          iconElementLeft={<IconButton><div /></IconButton>}\n          onLeftIconButtonTouchTap={handleTouchTap}\n        />\n      );\n      wrapper.find(IconButton).simulate('touchTap');\n      assert.strictEqual(handleTouchTap.callCount, 1);\n    });\n  });\n\n  describe('onRightIconButtonTouchTap', () => {\n    it('should trigger the onTouchTap', () => {\n      const handleRightIconButtonTouchTap = spy();\n      const wrapper = shallowWithContext(\n        <AppBar onRightIconButtonTouchTap={handleRightIconButtonTouchTap} iconClassNameRight=\"foo\" />\n      );\n\n      wrapper.find(IconButton).at(1).simulate('touchTap');\n      assert.strictEqual(handleRightIconButtonTouchTap.callCount, 1,\n        'should have called onRightIconButtonTouchTap callback function');\n    });\n\n    it('should forward the onTouchTap to onRightIconButtonTouchTap', () => {\n      const handleTouchTap = spy();\n      const wrapper = shallowWithContext(\n        <AppBar\n          iconElementRight={<IconButton><div /></IconButton>}\n          onRightIconButtonTouchTap={handleTouchTap}\n        />\n      );\n      wrapper.find(IconButton).at(1).simulate('touchTap');\n      assert.strictEqual(handleTouchTap.callCount, 1);\n    });\n  });\n\n  it('call onTitleTouchTap callback', () => {\n    const onTitleTouchTap = spy();\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" onTitleTouchTap={onTitleTouchTap} />\n    );\n\n    wrapper.find('h1').simulate('touchTap');\n    assert.strictEqual(onTitleTouchTap.callCount, 1,\n      'should have called onTitleTouchTap callback function');\n  });\n\n  it('hide menu icon when showMenuIconButton is false', () => {\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" showMenuIconButton={false} />\n    );\n\n    assert.strictEqual(wrapper.find(IconButton).length, 0, 'should not have menu icon');\n  });\n\n  it('renders AppBar and overwrite styles', () => {\n    const style = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" style={style} />\n    );\n\n    assert.strictEqual(wrapper.get(0).props.style.backgroundColor, style.backgroundColor,\n      'should have backgroundColor to red');\n  });\n\n  it('renders title', () => {\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" />\n    );\n\n    assert.strictEqual(wrapper.find('h1').length, 1, 'should have title');\n  });\n\n  it('renders title and overwrite title styles', () => {\n    const titleStyle = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" titleStyle={titleStyle} />\n    );\n\n    assert.strictEqual(wrapper.find('h1').length, 1, 'should have title');\n    assert.strictEqual(wrapper.find('h1').get(0).props.style.backgroundColor,\n      titleStyle.backgroundColor, 'should have backgroundColor to red');\n  });\n\n  it('renders zDepth to paper component', () => {\n    const wrapper = shallowWithContext(\n      <AppBar title=\"Title\" zDepth={2} />\n    );\n\n    assert.strictEqual(wrapper.find('Paper').get(0).props.zDepth, 2, 'should have zDepth to 2');\n  });\n\n  it('menuElementLeft\\'s style should be iconButtonStyle', () => {\n    const wrapper = shallowWithContext(\n      <AppBar />\n    );\n\n    const menuElementLeft = wrapper.find(IconButton).get(0);\n    const style = menuElementLeft.props.style;\n    const iconButtonStyle = getStyles(wrapper.props(), wrapper.context()).iconButtonStyle;\n    assert.deepEqual(style, iconButtonStyle, 'style should be iconButtonStyle');\n  });\n\n  it('if pass iconStyleLeft={marginTop}, change the marginTop only', () => {\n    const wrapper = shallowWithContext(\n      <AppBar iconStyleLeft={{marginTop: 99}} />\n    );\n\n    const menuElementLeft = wrapper.find(IconButton).get(0);\n    const style = menuElementLeft.props.style;\n    const iconButtonStyle = getStyles(wrapper.props(), wrapper.context()).iconButtonStyle;\n    const expectedStyle = Object.assign({}, iconButtonStyle, {marginTop: 99});\n    assert.deepEqual(style, expectedStyle, 'should be change style.marginTop only');\n  });\n\n  it('if pass iconElementLeft and iconStyleLeft={marginTop}, change the marginTop/muiPrepared only', () => {\n    const wrapper = shallowWithContext(\n      <AppBar iconElementLeft={<span>foo</span>} iconStyleLeft={{marginTop: 99}} />\n    );\n\n    const menuElementLeft = wrapper.find('div').get(0);\n    const style = menuElementLeft.props.style;\n    const iconButtonStyle = getStyles(wrapper.props(), wrapper.context()).iconButtonStyle;\n    const expectedStyle = Object.assign({}, iconButtonStyle, {marginTop: 99, muiPrepared: true});\n    assert.deepEqual(style, expectedStyle, 'should be change style.marginTop/muiPrepared only');\n  });\n});\n"]}