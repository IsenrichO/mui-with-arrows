{"version":3,"sources":["../../src/Stepper/StepButton.js"],"names":["isLabel","child","type","muiName","getStyles","props","context","state","hovered","muiTheme","stepper","backgroundColor","hoverBackgroundColor","styles","root","padding","transition","easeOut","orientation","width","StepButton","touched","handleMouseEnter","event","onMouseEnter","setState","handleMouseLeave","onMouseLeave","handleTouchStart","onTouchStart","render","active","children","completed","disabled","icon","iconContainerStyle","last","style","other","cloneElement","propTypes","bool","node","oneOfType","element","string","number","object","func","contextTypes","isRequired"],"mappings":"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","file":"StepButton.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport EnhancedButton from '../internal/EnhancedButton';\nimport StepLabel from './StepLabel';\n\nconst isLabel = (child) => {\n  return child && child.type && child.type.muiName === 'StepLabel';\n};\n\nconst getStyles = (props, context, state) => {\n  const {hovered} = state;\n  const {backgroundColor, hoverBackgroundColor} = context.muiTheme.stepper;\n\n  const styles = {\n    root: {\n      padding: 0,\n      backgroundColor: hovered ? hoverBackgroundColor : backgroundColor,\n      transition: transitions.easeOut(),\n    },\n  };\n\n  if (context.stepper.orientation === 'vertical') {\n    styles.root.width = '100%';\n  }\n\n  return styles;\n};\n\nclass StepButton extends Component {\n\n  static propTypes = {\n    /**\n     * Passed from `Step` Is passed to StepLabel.\n     */\n    active: PropTypes.bool,\n    /**\n     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.\n     */\n    children: PropTypes.node,\n    /**\n     * Sets completed styling. Is passed to StepLabel.\n     */\n    completed: PropTypes.bool,\n    /**\n     * Disables the button and sets disabled styling. Is passed to StepLabel.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * The icon displayed by the step label.\n     */\n    icon: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * Override the inline-styles of the icon container element.\n     */\n    iconContainerStyle: PropTypes.object,\n    /** @ignore */\n    last: PropTypes.bool,\n    /** @ignore */\n    onMouseEnter: PropTypes.func,\n    /** @ignore */\n    onMouseLeave: PropTypes.func,\n    /** @ignore */\n    onTouchStart: PropTypes.func,\n    /**\n     * Override the inline-style of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    stepper: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n    touched: false,\n  };\n\n  handleMouseEnter = (event) => {\n    const {onMouseEnter} = this.props;\n    // Cancel hover styles for touch devices\n    if (!this.state.touched) {\n      this.setState({hovered: true});\n    }\n    if (typeof onMouseEnter === 'function') {\n      onMouseEnter(event);\n    }\n  };\n\n  handleMouseLeave = (event) => {\n    const {onMouseLeave} = this.props;\n    this.setState({hovered: false});\n    if (typeof onMouseLeave === 'function') {\n      onMouseLeave(event);\n    }\n  };\n\n  handleTouchStart = (event) => {\n    const {onTouchStart} = this.props;\n    if (!this.state.touched) {\n      this.setState({touched: true});\n    }\n    if (typeof onTouchStart === 'function') {\n      onTouchStart(event);\n    }\n  };\n\n  render() {\n    const {\n      active,\n      children,\n      completed,\n      disabled,\n      icon,\n      iconContainerStyle,\n      last, // eslint-disable-line no-unused-vars\n      onMouseEnter, // eslint-disable-line no-unused-vars\n      onMouseLeave, // eslint-disable-line no-unused-vars\n      onTouchStart, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const styles = getStyles(this.props, this.context, this.state);\n\n    const child = isLabel(children) ? children : <StepLabel>{children}</StepLabel>;\n\n    return (\n      <EnhancedButton\n        disabled={disabled}\n        style={Object.assign(styles.root, style)}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        onTouchStart={this.handleTouchStart}\n        {...other}\n      >\n        {React.cloneElement(child, {active, completed, disabled, icon, iconContainerStyle})}\n      </EnhancedButton>\n    );\n  }\n}\n\nexport default StepButton;\n"]}