{"version":3,"sources":["../../src/Stepper/StepConnector.js"],"names":["propTypes","style","object","contextTypes","muiTheme","isRequired","stepper","StepConnector","props","context","styles","wrapper","flex","line","display","borderColor","connectorLineColor","orientation","marginLeft","borderTopStyle","borderTopWidth","borderLeftStyle","borderLeftWidth","minHeight","prepareStyles","PlainStepConnector"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY;AAChB;;;AAGAC,SAAO,oBAAUC;AAJD,CAAlB;;AAOA,IAAMC,eAAe;AACnBC,YAAU,oBAAUF,MAAV,CAAiBG,UADR;AAEnBC,WAAS,oBAAUJ;AAFA,CAArB;;AAKA,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAAA,MACjCL,QADiC,GACZK,OADY,CACjCL,QADiC;AAAA,MACvBE,OADuB,GACZG,OADY,CACvBH,OADuB;;;AAGxC,MAAMI,SAAS;AACbC,aAAS;AACPC,YAAM;AADC,KADI;AAIbC,UAAM;AACJC,eAAS,OADL;AAEJC,mBAAaX,SAASE,OAAT,CAAiBU;AAF1B;AAJO,GAAf;;AAUA;;;AAGA,MAAIV,QAAQW,WAAR,KAAwB,YAA5B,EAA0C;AACxCP,WAAOG,IAAP,CAAYK,UAAZ,GAAyB,CAAC,CAA1B;AACAR,WAAOG,IAAP,CAAYM,cAAZ,GAA6B,OAA7B;AACAT,WAAOG,IAAP,CAAYO,cAAZ,GAA6B,CAA7B;AACD,GAJD,MAIO,IAAId,QAAQW,WAAR,KAAwB,UAA5B,EAAwC;AAC7CP,WAAOC,OAAP,CAAeO,UAAf,GAA4B,KAAK,EAAjC,CAD6C,CACR;AACrCR,WAAOG,IAAP,CAAYQ,eAAZ,GAA8B,OAA9B;AACAX,WAAOG,IAAP,CAAYS,eAAZ,GAA8B,CAA9B;AACAZ,WAAOG,IAAP,CAAYU,SAAZ,GAAwB,EAAxB;AACD;;AAzBuC,MA2BjCC,aA3BiC,GA2BhBpB,QA3BgB,CA2BjCoB,aA3BiC;;;AA6BxC,SACE;AAAA;AAAA,MAAK,OAAOA,cAAcd,OAAOC,OAArB,CAAZ;AACE,4CAAM,OAAOa,cAAcd,OAAOG,IAArB,CAAb;AADF,GADF;AAKD,CAlCD;;AAoCAN,cAAcP,SAAd,GAA0BA,SAA1B;AACAO,cAAcJ,YAAd,GAA6BA,YAA7B;;QAEyBsB,kB,GAAjBlB,a;kBACO,oBAAKA,aAAL,C","file":"StepConnector.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport pure from 'recompose/pure';\n\nconst propTypes = {\n  /**\n   * Override the inline-style of the root element.\n   */\n  style: PropTypes.object,\n};\n\nconst contextTypes = {\n  muiTheme: PropTypes.object.isRequired,\n  stepper: PropTypes.object,\n};\n\nconst StepConnector = (props, context) => {\n  const {muiTheme, stepper} = context;\n\n  const styles = {\n    wrapper: {\n      flex: '1 1 auto',\n    },\n    line: {\n      display: 'block',\n      borderColor: muiTheme.stepper.connectorLineColor,\n    },\n  };\n\n  /**\n   * Clean up once we can use CSS pseudo elements\n   */\n  if (stepper.orientation === 'horizontal') {\n    styles.line.marginLeft = -6;\n    styles.line.borderTopStyle = 'solid';\n    styles.line.borderTopWidth = 1;\n  } else if (stepper.orientation === 'vertical') {\n    styles.wrapper.marginLeft = 14 + 11; // padding + 1/2 icon\n    styles.line.borderLeftStyle = 'solid';\n    styles.line.borderLeftWidth = 1;\n    styles.line.minHeight = 28;\n  }\n\n  const {prepareStyles} = muiTheme;\n\n  return (\n    <div style={prepareStyles(styles.wrapper)}>\n      <span style={prepareStyles(styles.line)} />\n    </div>\n  );\n};\n\nStepConnector.propTypes = propTypes;\nStepConnector.contextTypes = contextTypes;\n\nexport {StepConnector as PlainStepConnector};\nexport default pure(StepConnector);\n"]}