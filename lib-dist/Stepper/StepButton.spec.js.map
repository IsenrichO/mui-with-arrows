{"version":3,"sources":["../../src/Stepper/StepButton.spec.js"],"names":["describe","muiTheme","themedShallow","node","context","stepper","orientation","it","wrapper","backgroundColor","strictEqual","props","style","ok","is","stepLabel","find","length","children","width","color","marginTop","border","iconContainerStyle","prop","handleMouseEnter","handleMouseLeave","simulate","state","callCount","setState","hovered","hoverBackgroundColor","handleTouchStart"],"mappings":"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","file":"StepButton.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport {spy} from 'sinon';\nimport StepButton from './StepButton';\nimport StepLabel from './StepLabel';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<StepButton />', () => {\n  const muiTheme = getMuiTheme();\n  const themedShallow = (node) => {\n    const context = {muiTheme, stepper: {orientation: 'horizontal'}};\n    return shallow(node, {context});\n  };\n\n  it('should merge user styles in', () => {\n    const wrapper = themedShallow(\n      <StepButton style={{backgroundColor: 'purple'}}>Step One</StepButton>\n    );\n\n    assert.strictEqual(wrapper.props().style.backgroundColor, 'purple');\n  });\n\n  it('should render an EnhancedButton with a StepLabel', () => {\n    const wrapper = themedShallow(\n      <StepButton>Step One</StepButton>\n    );\n    assert.ok(wrapper.is('EnhancedButton'), 'should be an EnhancedButton');\n    const stepLabel = wrapper.find(StepLabel);\n    assert.strictEqual(stepLabel.length, 1, 'should have a stepLabel');\n    assert.strictEqual(stepLabel.props().children, 'Step One');\n  });\n\n  it('should pass iconContainerStyle to StepLabel', () => {\n    const wrapper = themedShallow(\n      <StepButton\n        iconContainerStyle={{width: 50, color: 'cyan', marginTop: 200, border: '1px solid violet'}}\n        icon={1}\n      >\n        StepOne\n      </StepButton>\n    );\n    const iconContainerStyle = wrapper.find(StepLabel).props().iconContainerStyle;\n    assert.strictEqual(iconContainerStyle.width, 50);\n    assert.strictEqual(iconContainerStyle.color, 'cyan');\n    assert.strictEqual(iconContainerStyle.marginTop, 200);\n    assert.strictEqual(iconContainerStyle.border, '1px solid violet');\n  });\n\n  it('should pass props to StepLabel', () => {\n    const wrapper = themedShallow(\n      <StepButton\n        active={true}\n        completed={true}\n        disabled={true}\n        label=\"Step One\"\n      >\n        Step One\n      </StepButton>\n    );\n    const stepLabel = wrapper.find(StepLabel);\n    assert.strictEqual(stepLabel.prop('active'), true, 'should be active');\n    assert.strictEqual(stepLabel.prop('completed'), true, 'should be completed');\n    assert.strictEqual(stepLabel.prop('disabled'), true, 'should be disabled');\n  });\n\n  it('should pass props to EnhancedButton', () => {\n    const wrapper = themedShallow(\n      <StepButton disabled={true}>Step One</StepButton>\n    );\n    const stepLabel = wrapper.find('EnhancedButton');\n    assert.strictEqual(stepLabel.prop('disabled'), true);\n  });\n\n  describe('event handlers', () => {\n    describe('handleMouseEnter/Leave', () => {\n      const handleMouseEnter = spy();\n      const handleMouseLeave = spy();\n      const wrapper = themedShallow(\n        <StepButton\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          Step One\n        </StepButton>\n      );\n\n      it('should set the hovered state', () => {\n        wrapper.simulate('mouseEnter');\n        assert.strictEqual(wrapper.state('hovered'), true, 'should be hovered');\n        assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n        wrapper.simulate('mouseLeave');\n        assert.strictEqual(wrapper.state('hovered'), false, 'should not be hovered');\n        assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n        assert.strictEqual(handleMouseLeave.callCount, 1, 'should call handleMouseLeave once');\n      });\n\n      it('should set the EnhancedButton backgroundColor on hover', () => {\n        wrapper.setState({hovered: false});\n        assert.strictEqual(wrapper.prop('style').backgroundColor, muiTheme.stepper.backgroundColor);\n        wrapper.setState({hovered: true});\n        assert.strictEqual(wrapper.prop('style').backgroundColor, muiTheme.stepper.hoverBackgroundColor);\n      });\n    });\n\n    describe('handleTouchStart', () => {\n      const handleTouchStart = spy();\n      const handleMouseEnter = spy();\n      const wrapper = themedShallow(\n        <StepButton\n          onTouchStart={handleTouchStart}\n          onMouseEnter={handleMouseEnter}\n        >\n          Step One\n        </StepButton>\n      );\n\n      it('should set the touched state', () => {\n        assert.strictEqual(wrapper.state('touched'), false, 'should not be touched');\n        wrapper.simulate('touchStart');\n        assert.strictEqual(wrapper.state('touched'), true, 'should be touched');\n        assert.strictEqual(handleTouchStart.callCount, 1, 'should call handleTouchStart once');\n      });\n\n      it('should not set the hovered state with touch set', () => {\n        wrapper.simulate('mouseEnter');\n        assert.strictEqual(wrapper.state('hovered'), false, 'should not be hovered');\n        assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n      });\n    });\n\n    it('should bubble callbacks used internally', () => {\n      const handleMouseEnter = spy();\n      const handleMouseLeave = spy();\n      const handleTouchStart = spy();\n      const wrapper = themedShallow(\n        <StepButton\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          onTouchStart={handleTouchStart}\n        >\n          Step One\n        </StepButton>\n      );\n      wrapper.simulate('mouseEnter');\n      assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n      wrapper.simulate('mouseLeave');\n      assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n      assert.strictEqual(handleMouseLeave.callCount, 1, 'should call handleMouseLeave once');\n      wrapper.simulate('touchStart');\n      assert.strictEqual(handleMouseEnter.callCount, 1, 'should call handleMouseEnter once');\n      assert.strictEqual(handleMouseLeave.callCount, 1, 'should call handleMouseLeave once');\n      assert.strictEqual(handleTouchStart.callCount, 1, 'should call handleTouchStart once');\n      wrapper.simulate('mouseEnter');\n      wrapper.simulate('touchStart');\n      assert.strictEqual(handleMouseEnter.callCount, 2, 'should call handleMouseEnter twice');\n      assert.strictEqual(handleMouseLeave.callCount, 1, 'should call handleMouseLeave once');\n      assert.strictEqual(handleTouchStart.callCount, 2, 'should call handleTouchStart twice');\n    });\n  });\n});\n"]}