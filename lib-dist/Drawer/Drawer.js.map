{"version":3,"sources":["../../src/Drawer/Drawer.js"],"names":["openNavEventHandler","Drawer","handleTouchTapOverlay","event","preventDefault","close","handleKeyUp","state","open","props","docked","onBodyTouchStart","swipeAreaWidth","touchStartX","context","muiTheme","isRtl","document","body","offsetWidth","touches","pageX","touchStartY","pageY","openSecondary","disableSwipeToOpen","maybeSwiping","addEventListener","onBodyTouchMove","onBodyTouchEnd","currentX","currentY","swiping","setPosition","getTranslateX","dXAbs","Math","abs","dYAbs","threshold","swipeStartX","setState","changedTouches","translateRatio","getMaxTranslateX","removeEventListener","componentWillMount","componentDidMount","enableSwipeHandling","componentWillReceiveProps","nextProps","componentDidUpdate","componentWillUnmount","disableSwipeHandling","getStyles","theme","drawer","x","getTranslateMultiplier","styles","root","height","width","getTranslatedWidth","position","zIndex","left","top","transform","transition","easeOut","backgroundColor","color","overflow","WebkitOverflowScrolling","overlay","drawerOverlay","pointerEvents","rootWhenOpenRight","right","shouldShow","reason","onRequestChange","test","Error","parseFloat","window","innerWidth","translateX","rtlTranslateMultiplier","findDOMNode","refs","clickAwayableElement","transformCSS","setOpacity","set","style","min","max","render","children","className","containerClassName","containerStyle","overlayClassName","overlayStyle","zDepth","propTypes","node","string","object","bool","func","number","oneOfType","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,sBAAsB,IAA1B;;IAEMC,M;;;;;;;;;;;;0JAoLJC,qB,GAAwB,UAACC,KAAD,EAAW;AACjCA,YAAMC,cAAN;AACA,YAAKC,KAAL,CAAW,WAAX;AACD,K,QAEDC,W,GAAc,UAACH,KAAD,EAAW;AACvB,UAAI,MAAKI,KAAL,CAAWC,IAAX,IAAmB,CAAC,MAAKC,KAAL,CAAWC,MAA/B,IAAyC,uBAAQP,KAAR,MAAmB,KAAhE,EAAuE;AACrE,cAAKE,KAAL,CAAW,QAAX;AACD;AACF,K,QA2CDM,gB,GAAmB,UAACR,KAAD,EAAW;AAC5B,UAAMS,iBAAiB,MAAKH,KAAL,CAAWG,cAAlC;;AAEA,UAAMC,cAAc,MAAKC,OAAL,CAAaC,QAAb,CAAsBC,KAAtB,GACjBC,SAASC,IAAT,CAAcC,WAAd,GAA4BhB,MAAMiB,OAAN,CAAc,CAAd,EAAiBC,KAD5B,GAElBlB,MAAMiB,OAAN,CAAc,CAAd,EAAiBC,KAFnB;AAGA,UAAMC,cAAcnB,MAAMiB,OAAN,CAAc,CAAd,EAAiBG,KAArC;;AAEA;AACA,UAAIX,mBAAmB,IAAnB,IAA2B,CAAC,MAAKL,KAAL,CAAWC,IAA3C,EAAiD;AAC/C,YAAI,MAAKC,KAAL,CAAWe,aAAf,EAA8B;AAC5B;AACA,cAAIX,cAAcI,SAASC,IAAT,CAAcC,WAAd,GAA4BP,cAA9C,EAA8D;AAC/D,SAHD,MAGO;AACL;AACA,cAAIC,cAAcD,cAAlB,EAAkC;AACnC;AACF;;AAED,UAAI,CAAC,MAAKL,KAAL,CAAWC,IAAZ,KACER,wBAAwB,MAAKW,gBAA7B,IACA,MAAKF,KAAL,CAAWgB,kBAFb,CAAJ,EAGK;AACH;AACD;;AAED,YAAKC,YAAL,GAAoB,IAApB;AACA,YAAKb,WAAL,GAAmBA,WAAnB;AACA,YAAKS,WAAL,GAAmBA,WAAnB;;AAEAL,eAASC,IAAT,CAAcS,gBAAd,CAA+B,WAA/B,EAA4C,MAAKC,eAAjD;AACAX,eAASC,IAAT,CAAcS,gBAAd,CAA+B,UAA/B,EAA2C,MAAKE,cAAhD;AACAZ,eAASC,IAAT,CAAcS,gBAAd,CAA+B,aAA/B,EAA8C,MAAKE,cAAnD;AACD,K,QAsBDD,e,GAAkB,UAACzB,KAAD,EAAW;AAC3B,UAAM2B,WAAW,MAAKhB,OAAL,CAAaC,QAAb,CAAsBC,KAAtB,GACdC,SAASC,IAAT,CAAcC,WAAd,GAA4BhB,MAAMiB,OAAN,CAAc,CAAd,EAAiBC,KAD/B,GAEflB,MAAMiB,OAAN,CAAc,CAAd,EAAiBC,KAFnB;AAGA,UAAMU,WAAW5B,MAAMiB,OAAN,CAAc,CAAd,EAAiBG,KAAlC;;AAEA,UAAI,MAAKhB,KAAL,CAAWyB,OAAf,EAAwB;AACtB7B,cAAMC,cAAN;AACA,cAAK6B,WAAL,CAAiB,MAAKC,aAAL,CAAmBJ,QAAnB,CAAjB;AACD,OAHD,MAGO,IAAI,MAAKJ,YAAT,EAAuB;AAC5B,YAAMS,QAAQC,KAAKC,GAAL,CAASP,WAAW,MAAKjB,WAAzB,CAAd;AACA,YAAMyB,QAAQF,KAAKC,GAAL,CAASN,WAAW,MAAKT,WAAzB,CAAd;AACA;AACA;AACA;AACA,YAAMiB,YAAY,EAAlB;;AAEA,YAAIJ,QAAQI,SAAR,IAAqBD,SAASC,SAAlC,EAA6C;AAC3C,gBAAKC,WAAL,GAAmBV,QAAnB;AACA,gBAAKW,QAAL,CAAc;AACZT,qBAAS,MAAKzB,KAAL,CAAWC,IAAX,GAAkB,SAAlB,GAA8B;AAD3B,WAAd;AAGA,gBAAKyB,WAAL,CAAiB,MAAKC,aAAL,CAAmBJ,QAAnB,CAAjB;AACD,SAND,MAMO,IAAIK,SAASI,SAAT,IAAsBD,QAAQC,SAAlC,EAA6C;AAClD,gBAAKV,cAAL;AACD;AACF;AACF,K,QAEDA,c,GAAiB,UAAC1B,KAAD,EAAW;AAC1B,UAAI,MAAKI,KAAL,CAAWyB,OAAf,EAAwB;AACtB,YAAMF,WAAW,MAAKhB,OAAL,CAAaC,QAAb,CAAsBC,KAAtB,GACdC,SAASC,IAAT,CAAcC,WAAd,GAA4BhB,MAAMuC,cAAN,CAAqB,CAArB,EAAwBrB,KADtC,GAEflB,MAAMuC,cAAN,CAAqB,CAArB,EAAwBrB,KAF1B;AAGA,YAAMsB,iBAAiB,MAAKT,aAAL,CAAmBJ,QAAnB,IAA+B,MAAKc,gBAAL,EAAtD;;AAEA,cAAKlB,YAAL,GAAoB,KAApB;AACA,YAAMM,UAAU,MAAKzB,KAAL,CAAWyB,OAA3B;AACA,cAAKS,QAAL,CAAc;AACZT,mBAAS;AADG,SAAd;;AAIA;AACA;AACA,YAAIW,iBAAiB,GAArB,EAA0B;AACxB,cAAIX,YAAY,SAAhB,EAA2B;AACzB,kBAAKC,WAAL,CAAiB,MAAKW,gBAAL,EAAjB;AACD,WAFD,MAEO;AACL,kBAAKvC,KAAL,CAAW,OAAX;AACD;AACF,SAND,MAMO;AACL,cAAI2B,YAAY,SAAhB,EAA2B;AACzB,kBAAKxB,IAAL,CAAU,OAAV;AACD,WAFD,MAEO;AACL,kBAAKyB,WAAL,CAAiB,CAAjB;AACD;AACF;AACF,OA3BD,MA2BO;AACL,cAAKP,YAAL,GAAoB,KAApB;AACD;;AAEDT,eAASC,IAAT,CAAc2B,mBAAd,CAAkC,WAAlC,EAA+C,MAAKjB,eAApD;AACAX,eAASC,IAAT,CAAc2B,mBAAd,CAAkC,UAAlC,EAA8C,MAAKhB,cAAnD;AACAZ,eAASC,IAAT,CAAc2B,mBAAd,CAAkC,aAAlC,EAAiD,MAAKhB,cAAtD;AACD,K;;;mBAlQDiB,kB,iCAAqB;AACnB,SAAKpB,YAAL,GAAoB,KAApB;AACA,SAAKb,WAAL,GAAmB,IAAnB;AACA,SAAKS,WAAL,GAAmB,IAAnB;AACA,SAAKkB,WAAL,GAAmB,IAAnB;;AAEA,SAAKC,QAAL,CAAc;AACZjC,YAAO,KAAKC,KAAL,CAAWD,IAAX,KAAoB,IAArB,GAA8B,KAAKC,KAAL,CAAWD,IAAzC,GAAgD,KAAKC,KAAL,CAAWC,MADrD;AAEZsB,eAAS;AAFG,KAAd;AAID,G;;mBAEDe,iB,gCAAoB;AAClB,SAAKC,mBAAL;AACD,G;;mBAEDC,yB,sCAA0BC,S,EAAW;AACnC;AACA,QAAIA,UAAU1C,IAAV,KAAmB,IAAvB,EAA6B;AAC3B,WAAKiC,QAAL,CAAc;AACZjC,cAAM0C,UAAU1C;AADJ,OAAd;AAGA;AACD,KALD,MAKO,IAAI,KAAKC,KAAL,CAAWC,MAAX,KAAsBwC,UAAUxC,MAApC,EAA4C;AACjD,WAAK+B,QAAL,CAAc;AACZjC,cAAM0C,UAAUxC;AADJ,OAAd;AAGD;AACF,G;;mBAEDyC,kB,iCAAqB;AACnB,SAAKH,mBAAL;AACD,G;;mBAEDI,oB,mCAAuB;AACrB,SAAKC,oBAAL;AACD,G;;mBAEDC,S,wBAAY;AACV,QAAMvC,WAAW,KAAKD,OAAL,CAAaC,QAA9B;AACA,QAAMwC,QAAQxC,SAASyC,MAAvB;;AAEA,QAAMC,IAAI,KAAKC,sBAAL,MAAiC,KAAKnD,KAAL,CAAWC,IAAX,GAAkB,CAAlB,GAAsB,KAAKoC,gBAAL,EAAvD,CAAV;;AAEA,QAAMe,SAAS;AACbC,YAAM;AACJC,gBAAQ,MADJ;AAEJC,eAAO,KAAKC,kBAAL,MAA6BR,MAAMO,KAFtC;AAGJE,kBAAU,OAHN;AAIJC,gBAAQlD,SAASkD,MAAT,CAAgBT,MAJpB;AAKJU,cAAM,CALF;AAMJC,aAAK,CAND;AAOJC,kCAAwBX,CAAxB,WAPI;AAQJY,oBAAY,CAAC,KAAK9D,KAAL,CAAWyB,OAAZ,IAAuB,sBAAYsC,OAAZ,CAAoB,IAApB,EAA0B,WAA1B,EAAuC,IAAvC,CAR/B;AASJC,yBAAiBhB,MAAMiB,KATnB;AAUJC,kBAAU,MAVN;AAWJC,iCAAyB,OAXrB,EADO;AAcbC,eAAS;AACPV,gBAAQlD,SAASkD,MAAT,CAAgBW,aADjB;AAEPC,uBAAe,KAAKtE,KAAL,CAAWC,IAAX,GAAkB,MAAlB,GAA2B,MAFnC,EAdI;AAkBbsE,yBAAmB;AACjBZ,cAAM,MADW;AAEjBa,eAAO;AAFU;AAlBN,KAAf;;AAwBA,WAAOpB,MAAP;AACD,G;;mBAEDqB,U,yBAAa;AACX,WAAO,KAAKzE,KAAL,CAAWC,IAAX,IAAmB,CAAC,CAAC,KAAKD,KAAL,CAAWyB,OAAvC,CADW,CACsC;AAClD,G;;mBAED3B,K,kBAAM4E,M,EAAQ;AACZ,QAAI,KAAKxE,KAAL,CAAWD,IAAX,KAAoB,IAAxB,EAA8B,KAAKiC,QAAL,CAAc,EAACjC,MAAM,KAAP,EAAd;AAC9B,QAAI,KAAKC,KAAL,CAAWyE,eAAf,EAAgC,KAAKzE,KAAL,CAAWyE,eAAX,CAA2B,KAA3B,EAAkCD,MAAlC;AAChC,WAAO,IAAP;AACD,G;;mBAEDzE,I,iBAAKyE,M,EAAQ;AACX,QAAI,KAAKxE,KAAL,CAAWD,IAAX,KAAoB,IAAxB,EAA8B,KAAKiC,QAAL,CAAc,EAACjC,MAAM,IAAP,EAAd;AAC9B,QAAI,KAAKC,KAAL,CAAWyE,eAAf,EAAgC,KAAKzE,KAAL,CAAWyE,eAAX,CAA2B,IAA3B,EAAiCD,MAAjC;AAChC,WAAO,IAAP;AACD,G;;mBAaDlB,kB,iCAAqB;AACnB,QAAI,OAAO,KAAKtD,KAAL,CAAWqD,KAAlB,KAA4B,QAAhC,EAA0C;AACxC,UAAI,CAAC,iBAAiBqB,IAAjB,CAAsB,KAAK1E,KAAL,CAAWqD,KAAjC,CAAL,EAA8C;AAC5C,cAAM,IAAIsB,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,UAAMtB,QAAQuB,WAAW,KAAK5E,KAAL,CAAWqD,KAAtB,IAA+B,KAA7C;AACA;AACA;AACA,aAAOwB,SAASxB,QAAQwB,OAAOC,UAAxB,GAAqC,KAA5C;AACD,KARD,MAQO;AACL,aAAO,KAAK9E,KAAL,CAAWqD,KAAlB;AACD;AACF,G;;mBAEDlB,gB,+BAAmB;AACjB,QAAMkB,QAAQ,KAAKC,kBAAL,MAA6B,KAAKjD,OAAL,CAAaC,QAAb,CAAsByC,MAAtB,CAA6BM,KAAxE;AACA,WAAOA,QAAQ,EAAf;AACD,G;;mBAEDJ,sB,qCAAyB;AACvB,WAAO,KAAKjD,KAAL,CAAWe,aAAX,GAA2B,CAA3B,GAA+B,CAAC,CAAvC;AACD,G;;mBAEDwB,mB,kCAAsB;AACpB,QAAI,CAAC,KAAKvC,KAAL,CAAWC,MAAhB,EAAwB;AACtBO,eAASC,IAAT,CAAcS,gBAAd,CAA+B,YAA/B,EAA6C,KAAKhB,gBAAlD;AACA,UAAI,CAACX,mBAAL,EAA0B;AACxBA,8BAAsB,KAAKW,gBAA3B;AACD;AACF,KALD,MAKO;AACL,WAAK0C,oBAAL;AACD;AACF,G;;mBAEDA,oB,mCAAuB;AACrBpC,aAASC,IAAT,CAAc2B,mBAAd,CAAkC,YAAlC,EAAgD,KAAKlC,gBAArD;AACA,QAAIX,wBAAwB,KAAKW,gBAAjC,EAAmD;AACjDX,4BAAsB,IAAtB;AACD;AACF,G;;mBAqCDiC,W,wBAAYuD,U,EAAY;AACtB,QAAMC,yBAAyB,KAAK3E,OAAL,CAAaC,QAAb,CAAsBC,KAAtB,GAA8B,CAAC,CAA/B,GAAmC,CAAlE;AACA,QAAMwC,SAAS,mBAASkC,WAAT,CAAqB,KAAKC,IAAL,CAAUC,oBAA/B,CAAf;AACA,QAAMC,8BAA6B,KAAKnC,sBAAL,KAAgC+B,sBAAhC,GAAyDD,UAAtF,WAAN;AACA,SAAKG,IAAL,CAAUhB,OAAV,CAAkBmB,UAAlB,CAA6B,IAAIN,aAAa,KAAK5C,gBAAL,EAA9C;AACA,yBAAWmD,GAAX,CAAevC,OAAOwC,KAAtB,EAA6B,WAA7B,EAA0CH,YAA1C;AACD,G;;mBAED3D,a,0BAAcJ,Q,EAAU;AACtB,WAAOM,KAAK6D,GAAL,CACE7D,KAAK8D,GAAL,CACE,KAAK3F,KAAL,CAAWyB,OAAX,KAAuB,SAAvB,GACE,KAAK0B,sBAAL,MAAiC5B,WAAW,KAAKU,WAAjD,CADF,GAEE,KAAKI,gBAAL,KAA0B,KAAKc,sBAAL,MAAiC,KAAKlB,WAAL,GAAmBV,QAApD,CAH9B,EAIE,CAJF,CADF,EAOE,KAAKc,gBAAL,EAPF,CAAP;AASD,G;;mBAoEDuD,M,qBAAS;AAAA,iBAYH,KAAK1F,KAZF;AAAA,QAEL2F,QAFK,UAELA,QAFK;AAAA,QAGLC,SAHK,UAGLA,SAHK;AAAA,QAILC,kBAJK,UAILA,kBAJK;AAAA,QAKLC,cALK,UAKLA,cALK;AAAA,QAML7F,MANK,UAMLA,MANK;AAAA,QAOLc,aAPK,UAOLA,aAPK;AAAA,QAQLgF,gBARK,UAQLA,gBARK;AAAA,QASLC,YATK,UASLA,YATK;AAAA,QAULT,KAVK,UAULA,KAVK;AAAA,QAWLU,MAXK,UAWLA,MAXK;;;AAcP,QAAM/C,SAAS,KAAKL,SAAL,EAAf;;AAEA,QAAIqB,gBAAJ;AACA,QAAI,CAACjE,MAAL,EAAa;AACXiE,gBACE;AACE,aAAI,SADN;AAEE,cAAM,KAAKK,UAAL,EAFR;AAGE,mBAAWwB,gBAHb;AAIE,eAAO,sBAAc7C,OAAOgB,OAArB,EAA8B8B,YAA9B,CAJT;AAKE,2BAAmB,CAAC,KAAKlG,KAAL,CAAWyB,OALjC;AAME,oBAAY,KAAK9B;AANnB,QADF;AAUD;;AAED,WACE;AAAA;AAAA;AACE,mBAAWmG,SADb;AAEE,eAAOL;AAFT;AAIE,oEAAe,QAAO,QAAtB,EAA+B,SAAS,KAAK1F,WAA7C,GAJF;AAKGqE,aALH;AAME;AAAA;AAAA;AACE,eAAI,sBADN;AAEE,kBAAQ+B,MAFV;AAGE,mBAAS,KAHX;AAIE,6BAAmB,CAAC,KAAKnG,KAAL,CAAWyB,OAJjC;AAKE,qBAAWsE,kBALb;AAME,iBAAO,sBAAc3C,OAAOC,IAArB,EAA2BpC,iBAAiBmC,OAAOmB,iBAAnD,EAAsEyB,cAAtE;AANT;AAQGH;AARH;AANF,KADF;AAmBD,G;;;4BAjZMO,S,GAAY;AACjB;;;AAGAP,YAAU,oBAAUQ,IAJH;AAKjB;;;AAGAP,aAAW,oBAAUQ,MARJ;AASjB;;;AAGAP,sBAAoB,oBAAUO,MAZb;AAajB;;;AAGAN,kBAAgB,oBAAUO,MAhBT;AAiBjB;;;AAGArF,sBAAoB,oBAAUsF,IApBb;AAqBjB;;;;AAIArG,UAAQ,oBAAUqG,IAzBD;AA0BjB;;;;;;;;AAQA7B,mBAAiB,oBAAU8B,IAlCV;AAmCjB;;;;AAIAxG,QAAM,oBAAUuG,IAvCC;AAwCjB;;;AAGAvF,iBAAe,oBAAUuF,IA3CR;AA4CjB;;;AAGAP,oBAAkB,oBAAUK,MA/CX;AAgDjB;;;AAGAJ,gBAAc,oBAAUK,MAnDP;AAoDjB;;;AAGAd,SAAO,oBAAUc,MAvDA;AAwDjB;;;;;;AAMAlG,kBAAgB,oBAAUqG,MA9DT;AA+DjB;;;;AAIAnD,SAAO,oBAAUoD,SAAV,CAAoB,CACzB,oBAAUL,MADe,EAEzB,oBAAUI,MAFe,CAApB,CAnEU;AAuEjB;;;AAGAP,UAAQ,oBAAUA;;AA1ED,C,SA8EZS,Y,GAAe;AACpB1F,sBAAoB,KADA;AAEpBf,UAAQ,IAFY;AAGpBF,QAAM,IAHc;AAIpBgB,iBAAe,KAJK;AAKpBZ,kBAAgB,EALI;AAMpBkD,SAAO,IANa;AAOpB4C,UAAQ;AAPY,C,SAUfU,Y,GAAe;AACpBrG,YAAU,oBAAU+F,MAAV,CAAiBO;AADP,C;kBA4TTpH,M","file":"Drawer.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport EventListener from 'react-event-listener';\nimport keycode from 'keycode';\nimport autoPrefix from '../utils/autoPrefix';\nimport transitions from '../styles/transitions';\nimport Overlay from '../internal/Overlay';\nimport Paper from '../Paper';\nimport propTypes from '../utils/propTypes';\n\nlet openNavEventHandler = null;\n\nclass Drawer extends Component {\n  static propTypes = {\n    /**\n     * The contents of the `Drawer`\n     */\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * The CSS class name of the container element.\n     */\n    containerClassName: PropTypes.string,\n    /**\n     * Override the inline-styles of the container element.\n     */\n    containerStyle: PropTypes.object,\n    /**\n     * If true, swiping sideways when the `Drawer` is closed will not open it.\n     */\n    disableSwipeToOpen: PropTypes.bool,\n    /**\n     * If true, the `Drawer` will be docked. In this state, the overlay won't show and\n     * clicking on a menu item will not close the `Drawer`.\n     */\n    docked: PropTypes.bool,\n    /**\n     * Callback function fired when the `open` state of the `Drawer` is requested to be changed.\n     *\n     * @param {boolean} open If true, the `Drawer` was requested to be opened.\n     * @param {string} reason The reason for the open or close request. Possible values are\n     * 'swipe' for open requests; 'clickaway' (on overlay clicks),\n     * 'escape' (on escape key press), and 'swipe' for close requests.\n     */\n    onRequestChange: PropTypes.func,\n    /**\n     * If true, the `Drawer` is opened.  Providing a value will turn the `Drawer`\n     * into a controlled component.\n     */\n    open: PropTypes.bool,\n    /**\n     * If true, the `Drawer` is positioned to open from the opposite side.\n     */\n    openSecondary: PropTypes.bool,\n    /**\n     * The CSS class name to add to the `Overlay` component that is rendered behind the `Drawer`.\n     */\n    overlayClassName: PropTypes.string,\n    /**\n     * Override the inline-styles of the `Overlay` component that is rendered behind the `Drawer`.\n     */\n    overlayStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The width of the left most (or right most) area in pixels where the `Drawer` can be\n     * swiped open from. Setting this to `null` spans that area to the entire page\n     * (**CAUTION!** Setting this property to `null` might cause issues with sliders and\n     * swipeable `Tabs`: use at your own risk).\n     */\n    swipeAreaWidth: PropTypes.number,\n    /**\n     * The width of the `Drawer` in pixels or percentage in string format ex. `50%` to fill\n     * half of the window or `100%` and so on. Defaults to using the values from theme.\n     */\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * The zDepth of the `Drawer`.\n     */\n    zDepth: propTypes.zDepth,\n\n  };\n\n  static defaultProps = {\n    disableSwipeToOpen: false,\n    docked: true,\n    open: null,\n    openSecondary: false,\n    swipeAreaWidth: 30,\n    width: null,\n    zDepth: 2,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentWillMount() {\n    this.maybeSwiping = false;\n    this.touchStartX = null;\n    this.touchStartY = null;\n    this.swipeStartX = null;\n\n    this.setState({\n      open: (this.props.open !== null ) ? this.props.open : this.props.docked,\n      swiping: null,\n    });\n  }\n\n  componentDidMount() {\n    this.enableSwipeHandling();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // If controlled then the open prop takes precedence.\n    if (nextProps.open !== null) {\n      this.setState({\n        open: nextProps.open,\n      });\n      // Otherwise, if docked is changed, change the open state for when uncontrolled.\n    } else if (this.props.docked !== nextProps.docked) {\n      this.setState({\n        open: nextProps.docked,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.enableSwipeHandling();\n  }\n\n  componentWillUnmount() {\n    this.disableSwipeHandling();\n  }\n\n  getStyles() {\n    const muiTheme = this.context.muiTheme;\n    const theme = muiTheme.drawer;\n\n    const x = this.getTranslateMultiplier() * (this.state.open ? 0 : this.getMaxTranslateX());\n\n    const styles = {\n      root: {\n        height: '100%',\n        width: this.getTranslatedWidth() || theme.width,\n        position: 'fixed',\n        zIndex: muiTheme.zIndex.drawer,\n        left: 0,\n        top: 0,\n        transform: `translate(${x}px, 0)`,\n        transition: !this.state.swiping && transitions.easeOut(null, 'transform', null),\n        backgroundColor: theme.color,\n        overflow: 'auto',\n        WebkitOverflowScrolling: 'touch', // iOS momentum scrolling\n      },\n      overlay: {\n        zIndex: muiTheme.zIndex.drawerOverlay,\n        pointerEvents: this.state.open ? 'auto' : 'none', // Bypass mouse events when left nav is closing.\n      },\n      rootWhenOpenRight: {\n        left: 'auto',\n        right: 0,\n      },\n    };\n\n    return styles;\n  }\n\n  shouldShow() {\n    return this.state.open || !!this.state.swiping;  // component is swiping\n  }\n\n  close(reason) {\n    if (this.props.open === null) this.setState({open: false});\n    if (this.props.onRequestChange) this.props.onRequestChange(false, reason);\n    return this;\n  }\n\n  open(reason) {\n    if (this.props.open === null) this.setState({open: true});\n    if (this.props.onRequestChange) this.props.onRequestChange(true, reason);\n    return this;\n  }\n\n  handleTouchTapOverlay = (event) => {\n    event.preventDefault();\n    this.close('clickaway');\n  };\n\n  handleKeyUp = (event) => {\n    if (this.state.open && !this.props.docked && keycode(event) === 'esc') {\n      this.close('escape');\n    }\n  };\n\n  getTranslatedWidth() {\n    if (typeof this.props.width === 'string') {\n      if (!/^\\d+(\\.\\d+)?%$/.test(this.props.width)) {\n        throw new Error('Not a valid percentage format.');\n      }\n      const width = parseFloat(this.props.width) / 100.0;\n      // We are doing our best on the Server to render a consistent UI, hence the\n      // default value of 10000\n      return window ? width * window.innerWidth : 10000;\n    } else {\n      return this.props.width;\n    }\n  }\n\n  getMaxTranslateX() {\n    const width = this.getTranslatedWidth() || this.context.muiTheme.drawer.width;\n    return width + 10;\n  }\n\n  getTranslateMultiplier() {\n    return this.props.openSecondary ? 1 : -1;\n  }\n\n  enableSwipeHandling() {\n    if (!this.props.docked) {\n      document.body.addEventListener('touchstart', this.onBodyTouchStart);\n      if (!openNavEventHandler) {\n        openNavEventHandler = this.onBodyTouchStart;\n      }\n    } else {\n      this.disableSwipeHandling();\n    }\n  }\n\n  disableSwipeHandling() {\n    document.body.removeEventListener('touchstart', this.onBodyTouchStart);\n    if (openNavEventHandler === this.onBodyTouchStart) {\n      openNavEventHandler = null;\n    }\n  }\n\n  onBodyTouchStart = (event) => {\n    const swipeAreaWidth = this.props.swipeAreaWidth;\n\n    const touchStartX = this.context.muiTheme.isRtl ?\n      (document.body.offsetWidth - event.touches[0].pageX) :\n      event.touches[0].pageX;\n    const touchStartY = event.touches[0].pageY;\n\n    // Open only if swiping from far left (or right) while closed\n    if (swipeAreaWidth !== null && !this.state.open) {\n      if (this.props.openSecondary) {\n        // If openSecondary is true calculate from the far right\n        if (touchStartX < document.body.offsetWidth - swipeAreaWidth) return;\n      } else {\n        // If openSecondary is false calculate from the far left\n        if (touchStartX > swipeAreaWidth) return;\n      }\n    }\n\n    if (!this.state.open &&\n         (openNavEventHandler !== this.onBodyTouchStart ||\n          this.props.disableSwipeToOpen)\n       ) {\n      return;\n    }\n\n    this.maybeSwiping = true;\n    this.touchStartX = touchStartX;\n    this.touchStartY = touchStartY;\n\n    document.body.addEventListener('touchmove', this.onBodyTouchMove);\n    document.body.addEventListener('touchend', this.onBodyTouchEnd);\n    document.body.addEventListener('touchcancel', this.onBodyTouchEnd);\n  };\n\n  setPosition(translateX) {\n    const rtlTranslateMultiplier = this.context.muiTheme.isRtl ? -1 : 1;\n    const drawer = ReactDOM.findDOMNode(this.refs.clickAwayableElement);\n    const transformCSS = `translate(${(this.getTranslateMultiplier() * rtlTranslateMultiplier * translateX)}px, 0)`;\n    this.refs.overlay.setOpacity(1 - translateX / this.getMaxTranslateX());\n    autoPrefix.set(drawer.style, 'transform', transformCSS);\n  }\n\n  getTranslateX(currentX) {\n    return Math.min(\n             Math.max(\n               this.state.swiping === 'closing' ?\n                 this.getTranslateMultiplier() * (currentX - this.swipeStartX) :\n                 this.getMaxTranslateX() - this.getTranslateMultiplier() * (this.swipeStartX - currentX),\n               0\n             ),\n             this.getMaxTranslateX()\n           );\n  }\n\n  onBodyTouchMove = (event) => {\n    const currentX = this.context.muiTheme.isRtl ?\n      (document.body.offsetWidth - event.touches[0].pageX) :\n      event.touches[0].pageX;\n    const currentY = event.touches[0].pageY;\n\n    if (this.state.swiping) {\n      event.preventDefault();\n      this.setPosition(this.getTranslateX(currentX));\n    } else if (this.maybeSwiping) {\n      const dXAbs = Math.abs(currentX - this.touchStartX);\n      const dYAbs = Math.abs(currentY - this.touchStartY);\n      // If the user has moved his thumb ten pixels in either direction,\n      // we can safely make an assumption about whether he was intending\n      // to swipe or scroll.\n      const threshold = 10;\n\n      if (dXAbs > threshold && dYAbs <= threshold) {\n        this.swipeStartX = currentX;\n        this.setState({\n          swiping: this.state.open ? 'closing' : 'opening',\n        });\n        this.setPosition(this.getTranslateX(currentX));\n      } else if (dXAbs <= threshold && dYAbs > threshold) {\n        this.onBodyTouchEnd();\n      }\n    }\n  };\n\n  onBodyTouchEnd = (event) => {\n    if (this.state.swiping) {\n      const currentX = this.context.muiTheme.isRtl ?\n        (document.body.offsetWidth - event.changedTouches[0].pageX) :\n        event.changedTouches[0].pageX;\n      const translateRatio = this.getTranslateX(currentX) / this.getMaxTranslateX();\n\n      this.maybeSwiping = false;\n      const swiping = this.state.swiping;\n      this.setState({\n        swiping: null,\n      });\n\n      // We have to open or close after setting swiping to null,\n      // because only then CSS transition is enabled.\n      if (translateRatio > 0.5) {\n        if (swiping === 'opening') {\n          this.setPosition(this.getMaxTranslateX());\n        } else {\n          this.close('swipe');\n        }\n      } else {\n        if (swiping === 'opening') {\n          this.open('swipe');\n        } else {\n          this.setPosition(0);\n        }\n      }\n    } else {\n      this.maybeSwiping = false;\n    }\n\n    document.body.removeEventListener('touchmove', this.onBodyTouchMove);\n    document.body.removeEventListener('touchend', this.onBodyTouchEnd);\n    document.body.removeEventListener('touchcancel', this.onBodyTouchEnd);\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      containerClassName,\n      containerStyle,\n      docked,\n      openSecondary,\n      overlayClassName,\n      overlayStyle,\n      style,\n      zDepth,\n    } = this.props;\n\n    const styles = this.getStyles();\n\n    let overlay;\n    if (!docked) {\n      overlay = (\n        <Overlay\n          ref=\"overlay\"\n          show={this.shouldShow()}\n          className={overlayClassName}\n          style={Object.assign(styles.overlay, overlayStyle)}\n          transitionEnabled={!this.state.swiping}\n          onTouchTap={this.handleTouchTapOverlay}\n        />\n      );\n    }\n\n    return (\n      <div\n        className={className}\n        style={style}\n      >\n        <EventListener target=\"window\" onKeyUp={this.handleKeyUp} />\n        {overlay}\n        <Paper\n          ref=\"clickAwayableElement\"\n          zDepth={zDepth}\n          rounded={false}\n          transitionEnabled={!this.state.swiping}\n          className={containerClassName}\n          style={Object.assign(styles.root, openSecondary && styles.rootWhenOpenRight, containerStyle)}\n        >\n          {children}\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default Drawer;\n"]}