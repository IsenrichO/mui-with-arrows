{"version":3,"sources":["../../src/SvgIcon/SvgIcon.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","path","it","wrapper","ok","contains","equal","props","style","fill","onMouseEnter","simulate","calledOnce","onMouseLeave","backgroundColor","get"],"mappings":"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","file":"SvgIcon.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {spy} from 'sinon';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport SvgIcon from './SvgIcon';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<SvgIcon />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const path = <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />;\n\n  it('renders children by default', () => {\n    const wrapper = shallowWithContext(\n      <SvgIcon>{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n  });\n\n  it('renders children and color', () => {\n    const wrapper = shallowWithContext(\n      <SvgIcon color=\"red\">{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    assert.equal(wrapper.node.props.style.fill, 'red', 'should have color set to red');\n  });\n\n  it('renders children and hoverColor when mouseEnter', () => {\n    const onMouseEnter = spy();\n    const wrapper = shallowWithContext(\n      <SvgIcon\n        className=\"material-icons\"\n        color=\"red\"\n        hoverColor=\"green\"\n        onMouseEnter={onMouseEnter}\n      >\n        {path}\n      </SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    assert.equal(wrapper.node.props.style.fill, 'red', 'should have color set to red');\n    wrapper.simulate('mouseEnter');\n    assert.equal(wrapper.node.props.style.fill, 'green', 'should have color set to green after hover');\n    assert.equal(onMouseEnter.calledOnce, true,\n      'should have called onMouseEnter callback function');\n  });\n\n  it('renders children and call onMouseEnter callback', () => {\n    const onMouseEnter = spy();\n    const wrapper = shallowWithContext(\n      <SvgIcon onMouseEnter={onMouseEnter} hoverColor=\"green\">{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    wrapper.simulate('mouseEnter');\n    assert.equal(onMouseEnter.calledOnce, true,\n      'should have called onMouseEnter callback function');\n  });\n\n  it('renders children and call onMouseEnter callback even when hoverColor is not set', () => {\n    const onMouseEnter = spy();\n    const wrapper = shallowWithContext(\n      <SvgIcon onMouseEnter={onMouseEnter}>{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    wrapper.simulate('mouseEnter');\n    assert.equal(onMouseEnter.calledOnce, true,\n      'should have called onMouseEnter callback function');\n  });\n\n  it('renders children and call onMouseLeave callback', () => {\n    const onMouseLeave = spy();\n    const wrapper = shallowWithContext(\n      <SvgIcon onMouseLeave={onMouseLeave} hoverColor=\"green\">{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    wrapper.simulate('mouseLeave');\n    assert.equal(onMouseLeave.calledOnce, true,\n      'should have called onMouseLeave callback function');\n  });\n\n  it('renders children and call onMouseLeave callback even when hoverColor is not set', () => {\n    const onMouseLeave = spy();\n    const wrapper = shallowWithContext(\n      <SvgIcon onMouseLeave={onMouseLeave}>{path}</SvgIcon>\n    );\n\n    assert.ok(wrapper.contains(path), 'should contain the children');\n    wrapper.simulate('mouseLeave');\n    assert.equal(onMouseLeave.calledOnce, true,\n      'should have called onMouseLeave callback function');\n  });\n\n  it('renders children and overwrite styles', () => {\n    const style = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <SvgIcon style={style}>{path}</SvgIcon>\n    );\n\n    assert.equal(wrapper.get(0).props.style.backgroundColor, style.backgroundColor,\n      'should have backgroundColor to red');\n  });\n});\n"]}