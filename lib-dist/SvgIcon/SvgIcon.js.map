{"version":3,"sources":["../../src/SvgIcon/SvgIcon.js"],"names":["SvgIcon","state","hovered","handleMouseLeave","event","setState","props","onMouseLeave","handleMouseEnter","onMouseEnter","render","children","color","hoverColor","style","viewBox","other","context","muiTheme","svgIcon","prepareStyles","offColor","onColor","mergedStyles","display","fill","height","width","userSelect","transition","easeOut","muiName","propTypes","node","string","func","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEMA,O;;;;;;;;;;;;0JA+CJC,K,GAAQ;AACNC,eAAS;AADH,K,QAIRC,gB,GAAmB,UAACC,KAAD,EAAW;AAC5B,YAAKC,QAAL,CAAc,EAACH,SAAS,KAAV,EAAd;AACA,YAAKI,KAAL,CAAWC,YAAX,CAAwBH,KAAxB;AACD,K,QAEDI,gB,GAAmB,UAACJ,KAAD,EAAW;AAC5B,YAAKC,QAAL,CAAc,EAACH,SAAS,IAAV,EAAd;AACA,YAAKI,KAAL,CAAWG,YAAX,CAAwBL,KAAxB;AACD,K;;;oBAEDM,M,qBAAS;AAAA,iBAUH,KAAKJ,KAVF;AAAA,QAELK,QAFK,UAELA,QAFK;AAAA,QAGLC,KAHK,UAGLA,KAHK;AAAA,QAILC,UAJK,UAILA,UAJK;AAAA,QAKLJ,YALK,UAKLA,YALK;AAAA,QAMLF,YANK,UAMLA,YANK;AAAA,QAOLO,KAPK,UAOLA,KAPK;AAAA,QAQLC,OARK,UAQLA,OARK;AAAA,QASFC,KATE;AAAA,4BAeH,KAAKC,OAAL,CAAaC,QAfV;AAAA,QAaLC,OAbK,qBAaLA,OAbK;AAAA,QAcLC,aAdK,qBAcLA,aAdK;;;AAiBP,QAAMC,WAAWT,QAAQA,KAAR,GAAgB,cAAjC;AACA,QAAMU,UAAUT,aAAaA,UAAb,GAA0BQ,QAA1C;;AAEA,QAAME,eAAe,sBAAc;AACjCC,eAAS,cADwB;AAEjCZ,aAAOO,QAAQP,KAFkB;AAGjCa,YAAM,KAAKxB,KAAL,CAAWC,OAAX,GAAqBoB,OAArB,GAA+BD,QAHJ;AAIjCK,cAAQ,EAJyB;AAKjCC,aAAO,EAL0B;AAMjCC,kBAAY,MANqB;AAOjCC,kBAAY,sBAAYC,OAAZ;AAPqB,KAAd,EAQlBhB,KARkB,CAArB;;AAUA,WACE;AAAA;AAAA,iCACME,KADN;AAEE,sBAAc,KAAKR,gBAFrB;AAGE,sBAAc,KAAKL,gBAHrB;AAIE,eAAOiB,cAAcG,YAAd,CAJT;AAKE,iBAASR;AALX;AAOGJ;AAPH,KADF;AAWD,G;;;4BArGMoB,O,GAAU,S,SAEVC,S,GAAY;AACjB;;;AAGArB,YAAU,oBAAUsB,IAJH;AAKjB;;;;;AAKArB,SAAO,oBAAUsB,MAVA;AAWjB;;;AAGArB,cAAY,oBAAUqB,MAdL;AAejB;AACAzB,gBAAc,oBAAU0B,IAhBP;AAiBjB;AACA5B,gBAAc,oBAAU4B,IAlBP;AAmBjB;;;AAGArB,SAAO,oBAAUsB,MAtBA;AAuBjB;;;;;;;;AAQArB,WAAS,oBAAUmB;AA/BF,C,SAkCZG,Y,GAAe;AACpB5B,gBAAc,wBAAM,CAAE,CADF;AAEpBF,gBAAc,wBAAM,CAAE,CAFF;AAGpBQ,WAAS;AAHW,C,SAMfuB,Y,GAAe;AACpBpB,YAAU,oBAAUkB,MAAV,CAAiBG;AADP,C;kBA8DTvC,O","file":"SvgIcon.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\n\nclass SvgIcon extends Component {\n  static muiName = 'SvgIcon';\n\n  static propTypes = {\n    /**\n     * Elements passed into the SVG Icon.\n     */\n    children: PropTypes.node,\n    /**\n     * This is the fill color of the svg icon.\n     * If not specified, this component will default\n     * to muiTheme.palette.textColor.\n     */\n    color: PropTypes.string,\n    /**\n     * This is the icon color when the mouse hovers over the icon.\n     */\n    hoverColor: PropTypes.string,\n    /** @ignore */\n    onMouseEnter: PropTypes.func,\n    /** @ignore */\n    onMouseLeave: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * Allows you to redefine what the coordinates\n     * without units mean inside an svg element. For example,\n     * if the SVG element is 500 (width) by 200 (height), and you\n     * pass viewBox=\"0 0 50 20\", this means that the coordinates inside\n     * the svg will go from the top left corner (0,0) to bottom right (50,20)\n     * and each unit will be worth 10px.\n     */\n    viewBox: PropTypes.string,\n  };\n\n  static defaultProps = {\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    viewBox: '0 0 24 24',\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleMouseLeave = (event) => {\n    this.setState({hovered: false});\n    this.props.onMouseLeave(event);\n  };\n\n  handleMouseEnter = (event) => {\n    this.setState({hovered: true});\n    this.props.onMouseEnter(event);\n  };\n\n  render() {\n    const {\n      children,\n      color,\n      hoverColor,\n      onMouseEnter, // eslint-disable-line no-unused-vars\n      onMouseLeave, // eslint-disable-line no-unused-vars\n      style,\n      viewBox,\n      ...other\n    } = this.props;\n\n    const {\n      svgIcon,\n      prepareStyles,\n    } = this.context.muiTheme;\n\n    const offColor = color ? color : 'currentColor';\n    const onColor = hoverColor ? hoverColor : offColor;\n\n    const mergedStyles = Object.assign({\n      display: 'inline-block',\n      color: svgIcon.color,\n      fill: this.state.hovered ? onColor : offColor,\n      height: 24,\n      width: 24,\n      userSelect: 'none',\n      transition: transitions.easeOut(),\n    }, style);\n\n    return (\n      <svg\n        {...other}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        style={prepareStyles(mergedStyles)}\n        viewBox={viewBox}\n      >\n        {children}\n      </svg>\n    );\n  }\n}\n\nexport default SvgIcon;\n"]}