{"version":3,"sources":["../../src/Card/CardActions.js"],"names":["getStyles","root","padding","position","action","marginRight","CardActions","render","props","actAsExpander","children","expandable","showExpandableButton","style","other","prepareStyles","context","muiTheme","styles","styledChildren","Children","map","child","isValidElement","cloneElement","propTypes","bool","node","object","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,GAAqB;AACnB,SAAO;AACLC,UAAM;AACJC,eAAS,CADL;AAEJC,gBAAU;AAFN,KADD;AAKLC,YAAQ;AACNC,mBAAa;AADP;AALH,GAAP;AASD;;IAEKC,W;;;;;;;;wBA4BJC,M,qBAAS;AAAA,iBAQH,KAAKC,KARF;AAAA,QAELC,aAFK,UAELA,aAFK;AAAA,QAGLC,QAHK,UAGLA,QAHK;AAAA,QAILC,UAJK,UAILA,UAJK;AAAA,QAKLC,oBALK,UAKLA,oBALK;AAAA,QAMLC,KANK,UAMLA,KANK;AAAA,QAOFC,KAPE;AAAA,QAUAC,aAVA,GAUiB,KAAKC,OAAL,CAAaC,QAV9B,CAUAF,aAVA;;AAWP,QAAMG,SAASlB,UAAU,KAAKQ,KAAf,EAAsB,KAAKQ,OAA3B,CAAf;;AAEA,QAAMG,iBAAiB,gBAAMC,QAAN,CAAeC,GAAf,CAAmBX,QAAnB,EAA6B,UAACY,KAAD,EAAW;AAC7D,UAAI,gBAAMC,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,eAAO,gBAAME,YAAN,CAAmBF,KAAnB,EAA0B;AAC/BT,iBAAO,sBAAc,EAAd,EAAkBK,OAAOd,MAAzB,EAAiCkB,MAAMd,KAAN,CAAYK,KAA7C;AADwB,SAA1B,CAAP;AAGD;AACF,KANsB,CAAvB;;AAQA,WACE;AAAA;AAAA,iCAASC,KAAT,IAAgB,OAAOC,cAAc,sBAAcG,OAAOjB,IAArB,EAA2BY,KAA3B,CAAd,CAAvB;AACGM;AADH,KADF;AAKD,G;;;4BArDMM,S,GAAY;AACjB;;;AAGAhB,iBAAe,oBAAUiB,IAJR;AAKjB;;;AAGAhB,YAAU,oBAAUiB,IARH;AASjB;;;AAGAhB,cAAY,oBAAUe,IAZL;AAajB;;;AAGAd,wBAAsB,oBAAUc,IAhBf;AAiBjB;;;AAGAb,SAAO,oBAAUe;AApBA,C,SAuBZC,Y,GAAe;AACpBZ,YAAU,oBAAUW,MAAV,CAAiBE;AADP,C;kBAiCTxB,W","file":"CardActions.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles() {\n  return {\n    root: {\n      padding: 8,\n      position: 'relative',\n    },\n    action: {\n      marginRight: 8,\n    },\n  };\n}\n\nclass CardActions extends Component {\n  static propTypes = {\n    /**\n     * If true, a click on this card component expands the card.\n     */\n    actAsExpander: PropTypes.bool,\n    /**\n     * Can be used to render elements inside the Card Action.\n     */\n    children: PropTypes.node,\n    /**\n     * If true, this card component is expandable.\n     */\n    expandable: PropTypes.bool,\n    /**\n     * If true, this card component will include a button to expand the card.\n     */\n    showExpandableButton: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      actAsExpander, // eslint-disable-line no-unused-vars\n      children,\n      expandable, // eslint-disable-line no-unused-vars\n      showExpandableButton, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    const styledChildren = React.Children.map(children, (child) => {\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          style: Object.assign({}, styles.action, child.props.style),\n        });\n      }\n    });\n\n    return (\n      <div {...other} style={prepareStyles(Object.assign(styles.root, style))}>\n        {styledChildren}\n      </div>\n    );\n  }\n}\n\nexport default CardActions;\n"]}