{"version":3,"sources":["../../src/Card/CardHeader.js"],"names":["getStyles","props","context","card","muiTheme","root","padding","fontWeight","boxSizing","position","whiteSpace","text","display","verticalAlign","paddingRight","avatar","marginRight","title","color","titleColor","fontSize","subtitle","subtitleColor","CardHeader","render","actAsExpander","avatarProp","children","closeIcon","expandable","openIcon","showExpandableButton","style","subtitleStyle","textStyle","titleStyle","iconStyle","other","prepareStyles","styles","cloneElement","muiName","propTypes","bool","node","object","string","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"CardHeader.js","sourcesContent":["import React, {Component, isValidElement} from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from '../Avatar';\n\nfunction getStyles(props, context) {\n  const {card} = context.muiTheme;\n\n  return {\n    root: {\n      padding: 16,\n      fontWeight: card.fontWeight,\n      boxSizing: 'border-box',\n      position: 'relative',\n      whiteSpace: 'nowrap',\n    },\n    text: {\n      display: 'inline-block',\n      verticalAlign: 'top',\n      whiteSpace: 'normal',\n      paddingRight: '90px',\n    },\n    avatar: {\n      marginRight: 16,\n    },\n    title: {\n      color: props.titleColor || card.titleColor,\n      display: 'block',\n      fontSize: 15,\n    },\n    subtitle: {\n      color: props.subtitleColor || card.subtitleColor,\n      display: 'block',\n      fontSize: 14,\n    },\n  };\n}\n\nclass CardHeader extends Component {\n  static muiName = 'CardHeader';\n\n  static propTypes = {\n    /**\n     * If true, a click on this card component expands the card.\n     */\n    actAsExpander: PropTypes.bool,\n    /**\n     * This is the [Avatar](/#/components/avatar) element to be displayed on the Card Header.\n     * If `avatar` is an `Avatar` or other element, it will be rendered.\n     * If `avatar` is a string, it will be used as the image `src` for an `Avatar`.\n     */\n    avatar: PropTypes.node,\n    /**\n     * Can be used to render elements inside the Card Header.\n     */\n    children: PropTypes.node,\n    /**\n     * Can be used to pass a closeIcon if you don't like the default expandable close Icon.\n     */\n    closeIcon: PropTypes.node,\n    /**\n     * If true, this card component is expandable.\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Override the iconStyle of the Icon Button.\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * Can be used to pass a openIcon if you don't like the default expandable open Icon.\n     */\n    openIcon: PropTypes.node,\n    /**\n     * If true, this card component will include a button to expand the card.\n     */\n    showExpandableButton: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * Can be used to render a subtitle in Card Header.\n     */\n    subtitle: PropTypes.node,\n    /**\n     * Override the subtitle color.\n     */\n    subtitleColor: PropTypes.string,\n    /**\n     * Override the inline-styles of the subtitle.\n     */\n    subtitleStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the text.\n     */\n    textStyle: PropTypes.object,\n    /**\n     * Can be used to render a title in Card Header.\n     */\n    title: PropTypes.node,\n    /**\n     * Override the title color.\n     */\n    titleColor: PropTypes.string,\n    /**\n     * Override the inline-styles of the title.\n     */\n    titleStyle: PropTypes.object,\n  };\n\n  static defaultProps = {\n    avatar: null,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      actAsExpander, // eslint-disable-line no-unused-vars\n      avatar: avatarProp,\n      children,\n      closeIcon, // eslint-disable-line no-unused-vars\n      expandable, // eslint-disable-line no-unused-vars\n      openIcon, // eslint-disable-line no-unused-vars\n      showExpandableButton, // eslint-disable-line no-unused-vars\n      style,\n      subtitle,\n      subtitleColor, // eslint-disable-line no-unused-vars\n      subtitleStyle,\n      textStyle,\n      title,\n      titleColor, // eslint-disable-line no-unused-vars\n      titleStyle,\n      iconStyle, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    let avatar = avatarProp;\n\n    if (isValidElement(avatarProp)) {\n      avatar = React.cloneElement(avatar, {\n        style: Object.assign(styles.avatar, avatar.props.style),\n      });\n    } else if (avatar !== null) {\n      avatar = <Avatar src={avatarProp} style={styles.avatar} />;\n    }\n\n    return (\n      <div {...other} style={prepareStyles(Object.assign(styles.root, style))}>\n        {avatar}\n        <div style={prepareStyles(Object.assign(styles.text, textStyle))}>\n          <span style={prepareStyles(Object.assign(styles.title, titleStyle))}>\n            {title}\n          </span>\n          <span style={prepareStyles(Object.assign(styles.subtitle, subtitleStyle))}>\n            {subtitle}\n          </span>\n        </div>\n        {children}\n      </div>\n    );\n  }\n}\n\nexport default CardHeader;\n"]}