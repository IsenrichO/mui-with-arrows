{"version":3,"sources":["../../src/Card/CardText.js"],"names":["getStyles","props","context","cardText","muiTheme","root","padding","fontSize","color","textColor","CardText","render","actAsExpander","children","expandable","style","other","prepareStyles","styles","rootStyle","muiName","propTypes","bool","node","string","object","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,MAC1BC,QAD0B,GACdD,QAAQE,QADM,CAC1BD,QAD0B;;;AAGjC,SAAO;AACLE,UAAM;AACJC,eAAS,EADL;AAEJC,gBAAU,EAFN;AAGJC,aAAOP,MAAMO,KAAN,IAAeL,SAASM;AAH3B;AADD,GAAP;AAOD;;IAEKC,Q;;;;;;;;qBA8BJC,M,qBAAS;AAAA,iBAQH,KAAKV,KARF;AAAA,QAELW,aAFK,UAELA,aAFK;AAAA,QAGLC,QAHK,UAGLA,QAHK;AAAA,QAILL,KAJK,UAILA,KAJK;AAAA,QAKLM,UALK,UAKLA,UALK;AAAA,QAMLC,KANK,UAMLA,KANK;AAAA,QAOFC,KAPE;AAAA,QAUAC,aAVA,GAUiB,KAAKf,OAAL,CAAaE,QAV9B,CAUAa,aAVA;;AAWP,QAAMC,SAASlB,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;AACA,QAAMiB,YAAY,sBAAcD,OAAOb,IAArB,EAA2BU,KAA3B,CAAlB;;AAEA,WACE;AAAA;AAAA,iCAASC,KAAT,IAAgB,OAAOC,cAAcE,SAAd,CAAvB;AACGN;AADH,KADF;AAKD,G;;;4BAhDMO,O,GAAU,U,SAEVC,S,GAAY;AACjB;;;AAGAT,iBAAe,oBAAUU,IAJR;AAKjB;;;AAGAT,YAAU,oBAAUU,IARH;AASjB;;;AAGAf,SAAO,oBAAUgB,MAZA;AAajB;;;AAGAV,cAAY,oBAAUQ,IAhBL;AAiBjB;;;AAGAP,SAAO,oBAAUU;AApBA,C,SAuBZC,Y,GAAe;AACpBtB,YAAU,oBAAUqB,MAAV,CAAiBE;AADP,C;kBA0BTjB,Q","file":"CardText.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {cardText} = context.muiTheme;\n\n  return {\n    root: {\n      padding: 16,\n      fontSize: 14,\n      color: props.color || cardText.textColor,\n    },\n  };\n}\n\nclass CardText extends Component {\n  static muiName = 'CardText';\n\n  static propTypes = {\n    /**\n     * If true, a click on this card component expands the card.\n     */\n    actAsExpander: PropTypes.bool,\n    /**\n     * Can be used to render elements inside the Card Text.\n     */\n    children: PropTypes.node,\n    /**\n     * Override the CardText color.\n     */\n    color: PropTypes.string,\n    /**\n     * If true, this card component is expandable.\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      actAsExpander, // eslint-disable-line no-unused-vars\n      children,\n      color, // eslint-disable-line no-unused-vars\n      expandable, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n    const rootStyle = Object.assign(styles.root, style);\n\n    return (\n      <div {...other} style={prepareStyles(rootStyle)}>\n        {children}\n      </div>\n    );\n  }\n}\n\nexport default CardText;\n"]}