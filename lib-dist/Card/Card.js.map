{"version":3,"sources":["../../src/Card/Card.js"],"names":["Card","state","expanded","handleExpanding","event","preventDefault","newExpandedState","props","setState","onExpandChange","componentWillMount","initiallyExpanded","componentWillReceiveProps","nextProps","render","style","containerStyle","children","expandable","expandedProp","other","lastElement","newChildren","Children","map","currentChild","doClone","newChild","undefined","newProps","element","actAsExpander","onTouchTap","cursor","showExpandableButton","closeIcon","openIcon","iconStyle","cloneElement","addBottomPadding","type","muiName","mergedStyles","zIndex","containerMergedStyles","paddingBottom","propTypes","node","object","bool","func","defaultProps"],"mappings":"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","file":"Card.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '../Paper';\nimport CardExpandable from './CardExpandable';\n\nclass Card extends Component {\n  static propTypes = {\n    /**\n     * Can be used to render elements inside the Card.\n     */\n    children: PropTypes.node,\n    /**\n     * Override the inline-styles of the container element.\n     */\n    containerStyle: PropTypes.object,\n    /**\n     * If true, this card component is expandable. Can be set on any child of the `Card` component.\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Whether this card is expanded.\n     * If `true` or `false` the component is controlled.\n     * if `null` the component is uncontrolled.\n     */\n    expanded: PropTypes.bool,\n    /**\n     * Whether this card is initially expanded.\n     */\n    initiallyExpanded: PropTypes.bool,\n    /**\n     * Callback function fired when the `expandable` state of the card has changed.\n     *\n     * @param {boolean} newExpandedState Represents the new `expanded` state of the card.\n     */\n    onExpandChange: PropTypes.func,\n    /**\n     * If true, this card component will include a button to expand the card. `CardTitle`,\n     * `CardHeader` and `CardActions` implement `showExpandableButton`. Any child component\n     * of `Card` can implements `showExpandableButton` or forwards the property to a child\n     * component supporting it.\n     */\n    showExpandableButton: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    expandable: false,\n    expanded: null,\n    initiallyExpanded: false,\n  };\n\n  state = {\n    expanded: null,\n  };\n\n  componentWillMount() {\n    this.setState({\n      expanded: this.props.expanded === null ? this.props.initiallyExpanded === true : this.props.expanded,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // update the state when the component is controlled.\n    if (nextProps.expanded !== null)\n      this.setState({expanded: nextProps.expanded});\n  }\n\n  handleExpanding = (event) => {\n    event.preventDefault();\n    const newExpandedState = !this.state.expanded;\n    // no automatic state update when the component is controlled\n    if (this.props.expanded === null) {\n      this.setState({expanded: newExpandedState});\n    }\n    if (this.props.onExpandChange) {\n      this.props.onExpandChange(newExpandedState);\n    }\n  };\n\n  render() {\n    const {\n      style,\n      containerStyle,\n      children,\n      expandable, // eslint-disable-line no-unused-vars\n      expanded: expandedProp, // eslint-disable-line no-unused-vars\n      initiallyExpanded, // eslint-disable-line no-unused-vars\n      onExpandChange, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props;\n\n    let lastElement;\n    const expanded = this.state.expanded;\n    const newChildren = React.Children.map(children, (currentChild) => {\n      let doClone = false;\n      let newChild = undefined;\n      const newProps = {};\n      let element = currentChild;\n      if (!currentChild || !currentChild.props) {\n        return null;\n      }\n      if (expanded === false && currentChild.props.expandable === true)\n        return;\n      if (currentChild.props.actAsExpander === true) {\n        doClone = true;\n        newProps.onTouchTap = this.handleExpanding;\n        newProps.style = Object.assign({cursor: 'pointer'}, currentChild.props.style);\n      }\n      if (currentChild.props.showExpandableButton === true) {\n        doClone = true;\n        newChild = (\n          <CardExpandable\n            closeIcon={currentChild.props.closeIcon}\n            expanded={expanded}\n            onExpanding={this.handleExpanding}\n            openIcon={currentChild.props.openIcon}\n            iconStyle={currentChild.props.iconStyle}\n          />\n        );\n      }\n      if (doClone) {\n        element = React.cloneElement(currentChild, newProps, currentChild.props.children, newChild);\n      }\n      lastElement = element;\n      return element;\n    }, this);\n\n    // If the last element is text or a title we should add\n    // 8px padding to the bottom of the card\n    const addBottomPadding = (lastElement && (lastElement.type.muiName === 'CardText' ||\n      lastElement.type.muiName === 'CardTitle'));\n\n    const mergedStyles = Object.assign({\n      zIndex: 1,\n    }, style);\n    const containerMergedStyles = Object.assign({\n      paddingBottom: addBottomPadding ? 8 : 0,\n    }, containerStyle);\n\n    return (\n      <Paper {...other} style={mergedStyles}>\n        <div style={containerMergedStyles}>\n          {newChildren}\n        </div>\n      </Paper>\n    );\n  }\n}\n\nexport default Card;\n"]}