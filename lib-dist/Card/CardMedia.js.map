{"version":3,"sources":["../../src/Card/CardMedia.js"],"names":["getStyles","props","context","cardMedia","muiTheme","root","position","overlayContainer","top","bottom","right","left","overlay","height","overlayContent","paddingTop","background","overlayContentBackground","media","mediaChild","verticalAlign","maxWidth","minWidth","width","CardMedia","render","actAsExpander","children","expandable","mediaStyle","overlayContainerStyle","overlayContentStyle","overlayStyle","style","other","prepareStyles","styles","rootStyle","extendedMediaStyle","extendedOverlayContainerStyle","extendedOverlayContentStyle","extendedOverlayStyle","titleColor","subtitleColor","color","styledChildren","Children","map","child","cloneElement","overlayChildren","type","muiName","propTypes","bool","node","object","contextTypes","isRequired"],"mappings":"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","file":"CardMedia.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {cardMedia} = context.muiTheme;\n\n  return {\n    root: {\n      position: 'relative',\n    },\n    overlayContainer: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n    },\n    overlay: {\n      height: '100%',\n      position: 'relative',\n    },\n    overlayContent: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      left: 0,\n      paddingTop: 8,\n      background: cardMedia.overlayContentBackground,\n    },\n    media: {},\n    mediaChild: {\n      verticalAlign: 'top',\n      maxWidth: '100%',\n      minWidth: '100%',\n      width: '100%',\n    },\n  };\n}\n\nclass CardMedia extends Component {\n  static propTypes = {\n    /**\n     * If true, a click on this card component expands the card.\n     */\n    actAsExpander: PropTypes.bool,\n    /**\n     * Can be used to render elements inside the Card Media.\n     */\n    children: PropTypes.node,\n    /**\n     * If true, this card component is expandable.\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Override the inline-styles of the Card Media.\n     */\n    mediaStyle: PropTypes.object,\n    /**\n     * Can be used to render overlay element in Card Media.\n     */\n    overlay: PropTypes.node,\n    /**\n     * Override the inline-styles of the overlay container.\n     */\n    overlayContainerStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the overlay content.\n     */\n    overlayContentStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the overlay element.\n     */\n    overlayStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      actAsExpander, // eslint-disable-line no-unused-vars\n      children,\n      expandable, // eslint-disable-line no-unused-vars\n      mediaStyle,\n      overlay,\n      overlayContainerStyle,\n      overlayContentStyle,\n      overlayStyle,\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n    const rootStyle = Object.assign(styles.root, style);\n    const extendedMediaStyle = Object.assign(styles.media, mediaStyle);\n    const extendedOverlayContainerStyle = Object.assign(styles.overlayContainer, overlayContainerStyle);\n    const extendedOverlayContentStyle = Object.assign(styles.overlayContent, overlayContentStyle);\n    const extendedOverlayStyle = Object.assign(styles.overlay, overlayStyle);\n    const titleColor = this.context.muiTheme.cardMedia.titleColor;\n    const subtitleColor = this.context.muiTheme.cardMedia.subtitleColor;\n    const color = this.context.muiTheme.cardMedia.color;\n\n    const styledChildren = React.Children.map(children, (child) => {\n      return React.cloneElement(child, {\n        style: prepareStyles(Object.assign({}, styles.mediaChild, child.props.style)),\n      });\n    });\n\n    const overlayChildren = React.Children.map(overlay, (child) => {\n      if (child.type.muiName === 'CardHeader' || child.type.muiName === 'CardTitle') {\n        return React.cloneElement(child, {\n          titleColor: titleColor,\n          subtitleColor: subtitleColor,\n        });\n      } else if (child.type.muiName === 'CardText') {\n        return React.cloneElement(child, {\n          color: color,\n        });\n      } else {\n        return child;\n      }\n    });\n\n    return (\n      <div {...other} style={prepareStyles(rootStyle)}>\n        <div style={prepareStyles(extendedMediaStyle)}>\n          {styledChildren}\n        </div>\n        {overlay ?\n          <div style={prepareStyles(extendedOverlayContainerStyle)}>\n            <div style={prepareStyles(extendedOverlayStyle)}>\n              <div style={prepareStyles(extendedOverlayContentStyle)}>\n                {overlayChildren}\n              </div>\n            </div>\n          </div> : ''}\n      </div>\n    );\n  }\n}\n\nexport default CardMedia;\n"]}