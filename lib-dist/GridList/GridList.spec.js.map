{"version":3,"sources":["../../src/GridList/GridList.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","tilesData","img","title","author","it","cellHeight","wrapper","map","tile","strictEqual","find","length","children","at","prop","height","width","padding","style","backgroundColor","props"],"mappings":"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","file":"GridList.spec.js","sourcesContent":["/* eslint-env mocha */\n\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport GridList from './GridList';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<GridList />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  const tilesData = [\n    {\n      img: 'images/grid-list/00-52-29-429_640.jpg',\n      title: 'Breakfast',\n      author: 'jill111',\n    },\n    {\n      img: 'images/grid-list/burger-827309_640.jpg',\n      title: 'Tasty burger',\n      author: 'pashminu',\n    },\n  ];\n\n  it('renders children and change cellHeight', () => {\n    const cellHeight = 250;\n    const wrapper = shallowWithContext(\n      <GridList cellHeight={cellHeight}>\n        {tilesData.map((tile) => (\n          <span\n            key={tile.img}\n            className=\"grid-tile\"\n            title={tile.title}\n            subtitle={<span>by <b>{tile.author}</b></span>}\n          >\n            <img src={tile.img} />\n          </span>\n        ))}\n      </GridList>\n    );\n\n    assert.strictEqual(wrapper.find('.grid-tile').length, 2, 'should contain the children');\n    assert.strictEqual(wrapper.children().at(0).prop('style').height, cellHeight + 4, 'should have height to 254');\n  });\n\n  it('renders children by default', () => {\n    const wrapper = shallowWithContext(\n      <GridList>\n        {tilesData.map((tile) => (\n          <span\n            key={tile.img}\n            className=\"grid-tile\"\n            title={tile.title}\n            subtitle={<span>by <b>{tile.author}</b></span>}\n          >\n            <img src={tile.img} />\n          </span>\n        ))}\n      </GridList>\n    );\n\n    assert.strictEqual(wrapper.find('.grid-tile').length, 2, 'should contain the children');\n  });\n\n  it('renders children and change cols', () => {\n    const wrapper = shallowWithContext(\n      <GridList cols={4}>\n        {tilesData.map((tile) => (\n          <span\n            key={tile.img}\n            className=\"grid-tile\"\n            title={tile.title}\n            subtitle={<span>by <b>{tile.author}</b></span>}\n          >\n            <img src={tile.img} />\n          </span>\n        ))}\n      </GridList>\n    );\n\n    assert.strictEqual(wrapper.find('.grid-tile').length, 2, 'should contain the children');\n    assert.strictEqual(wrapper.children().at(0).prop('style').width, '25%', 'should have 25% of width');\n  });\n\n  it('renders children and change padding', () => {\n    const padding = 10;\n    const wrapper = shallowWithContext(\n      <GridList padding={padding}>\n        {tilesData.map((tile) => (\n          <span\n            key={tile.img}\n            className=\"grid-tile\"\n            title={tile.title}\n            subtitle={<span>by <b>{tile.author}</b></span>}\n          >\n            <img src={tile.img} />\n          </span>\n        ))}\n      </GridList>\n    );\n\n    assert.strictEqual(wrapper.find('.grid-tile').length, 2, 'should contain the children');\n    assert.strictEqual(wrapper.children().at(0).prop('style').padding, padding / 2, 'should have 5 of padding');\n  });\n\n  it('renders children and overwrite style', () => {\n    const style = {\n      backgroundColor: 'red',\n    };\n    const wrapper = shallowWithContext(\n      <GridList style={style}>\n        {tilesData.map((tile) => (\n          <span\n            key={tile.img}\n            className=\"grid-tile\"\n            title={tile.title}\n            subtitle={<span>by <b>{tile.author}</b></span>}\n          >\n            <img src={tile.img} />\n          </span>\n        ))}\n      </GridList>\n    );\n\n    assert.strictEqual(wrapper.find('.grid-tile').length, 2, 'should contain the children');\n    assert.strictEqual(wrapper.prop('style').backgroundColor, style.backgroundColor,\n      'should have a red backgroundColor');\n  });\n\n  describe('prop: cellHeight', () => {\n    it('should accept auto as a property', () => {\n      const wrapper = shallowWithContext(\n        <GridList cellHeight=\"auto\">\n          <div />\n        </GridList>\n      );\n\n      assert.strictEqual(wrapper.children().at(0).props().style.height, 'auto');\n    });\n  });\n});\n"]}