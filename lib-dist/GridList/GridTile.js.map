{"version":3,"sources":["../../src/GridList/GridTile.js"],"names":["getStyles","props","context","muiTheme","baseTheme","gridTile","actionPos","actionIcon","actionPosition","styles","root","position","display","height","overflow","titleBar","left","right","titlePosition","subtitle","background","titleBackground","alignItems","titleWrap","flexGrow","marginLeft","spacing","desktopGutterLess","marginRight","color","textColor","title","fontSize","textOverflow","whiteSpace","order","childImg","transform","GridTile","componentDidMount","ensureImageCover","componentDidUpdate","imgEl","refs","img","fit","offsetWidth","parentNode","isRtl","style","width","top","WebkitTransform","removeEventListener","complete","addEventListener","render","titleStyle","subtitleStyle","children","containerElement","other","prepareStyles","mergedRootStyles","newChildren","Children","count","map","child","type","cloneElement","key","ref","containerProps","isValidElement","createElement","propTypes","element","oneOf","node","cols","number","oneOfType","string","rows","object","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"GridTile.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {\n    baseTheme,\n    gridTile,\n  } = context.muiTheme;\n\n  const actionPos = props.actionIcon && props.actionPosition;\n\n  const styles = {\n    root: {\n      position: 'relative',\n      display: 'block',\n      height: '100%',\n      overflow: 'hidden',\n    },\n    titleBar: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      [props.titlePosition]: 0,\n      height: props.subtitle ? 68 : 48,\n      background: props.titleBackground,\n      display: 'flex',\n      alignItems: 'center',\n    },\n    titleWrap: {\n      flexGrow: 1,\n      marginLeft: actionPos !== 'left' ? baseTheme.spacing.desktopGutterLess : 0,\n      marginRight: actionPos === 'left' ? baseTheme.spacing.desktopGutterLess : 0,\n      color: gridTile.textColor,\n      overflow: 'hidden',\n    },\n    title: {\n      fontSize: '16px',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n    },\n    subtitle: {\n      fontSize: '12px',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n    },\n    actionIcon: {\n      order: actionPos === 'left' ? -1 : 1,\n    },\n    childImg: {\n      height: '100%',\n      transform: 'translateX(-50%)',\n      position: 'relative',\n      left: '50%',\n    },\n  };\n  return styles;\n}\n\nclass GridTile extends Component {\n  static propTypes = {\n    /**\n     * An IconButton element to be used as secondary action target\n     * (primary action target is the tile itself).\n     */\n    actionIcon: PropTypes.element,\n    /**\n     * Position of secondary action IconButton.\n     */\n    actionPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Theoretically you can pass any node as children, but the main use case is to pass an img,\n     * in whichcase GridTile takes care of making the image \"cover\" available space\n     * (similar to background-size: cover or to object-fit:cover).\n     */\n    children: PropTypes.node,\n    /**\n     * Width of the tile in number of grid cells.\n     */\n    cols: PropTypes.number,\n    /**\n     * Either a string used as tag name for the tile root element, or a ReactElement.\n     * This is useful when you have, for example, a custom implementation of\n     * a navigation link (that knows about your routes) and you want to use it as the primary tile action.\n     * In case you pass a ReactElement, please ensure that it passes all props,\n     * accepts styles overrides and render it's children.\n     */\n    containerElement: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    /**\n     * Height of the tile in number of grid cells.\n     */\n    rows: PropTypes.number,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * String or element serving as subtitle (support text).\n     */\n    subtitle: PropTypes.node,\n    /**\n     * Override the inline-styles of the subtitle element.\n     */\n    subtitleStyle: PropTypes.object,\n    /**\n     * Title to be displayed on tile.\n     */\n    title: PropTypes.node,\n    /**\n     * Style used for title bar background.\n     * Useful for setting custom gradients for example\n     */\n    titleBackground: PropTypes.string,\n    /**\n     * Position of the title bar (container of title, subtitle and action icon).\n     */\n    titlePosition: PropTypes.oneOf(['top', 'bottom']),\n    /**\n     * Override the inline-styles of the title element.\n     */\n    titleStyle: PropTypes.object,\n  };\n\n  static defaultProps = {\n    titlePosition: 'bottom',\n    titleBackground: 'rgba(0, 0, 0, 0.4)',\n    actionPosition: 'right',\n    cols: 1,\n    rows: 1,\n    containerElement: 'div',\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.ensureImageCover();\n  }\n\n  componentDidUpdate() {\n    this.ensureImageCover();\n  }\n\n  ensureImageCover() {\n    let imgEl = this.refs.img;\n\n    if (imgEl) {\n      const fit = () => {\n        if (imgEl.offsetWidth < imgEl.parentNode.offsetWidth) {\n          const {isRtl} = this.context.muiTheme;\n          imgEl.style.height = 'auto';\n          if (isRtl) {\n            imgEl.style.right = '0';\n          } else {\n            imgEl.style.left = '0';\n          }\n          imgEl.style.width = '100%';\n          imgEl.style.top = '50%';\n          imgEl.style.transform = imgEl.style.WebkitTransform = 'translateY(-50%)';\n        }\n        imgEl.removeEventListener('load', fit);\n        imgEl = null; // prevent closure memory leak\n      };\n      if (imgEl.complete) {\n        fit();\n      } else {\n        imgEl.addEventListener('load', fit);\n      }\n    }\n  }\n\n  render() {\n    const {\n      title,\n      subtitle,\n      titlePosition, // eslint-disable-line no-unused-vars\n      titleBackground, // eslint-disable-line no-unused-vars\n      titleStyle,\n      subtitleStyle,\n      actionIcon, // eslint-disable-line no-unused-vars\n      actionPosition, // eslint-disable-line no-unused-vars\n      style,\n      children,\n      containerElement,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n    const mergedRootStyles = Object.assign(styles.root, style);\n\n    let titleBar = null;\n\n    if (title) {\n      titleBar = (\n        <div key=\"titlebar\" style={prepareStyles(styles.titleBar)}>\n          <div style={prepareStyles(styles.titleWrap)}>\n            <div style={prepareStyles(Object.assign(styles.title, titleStyle))}>\n              {title}\n            </div>\n            {subtitle ? (\n              <div style={prepareStyles(Object.assign(styles.subtitle, subtitleStyle))}>\n                {subtitle}\n              </div>\n            ) : null}\n          </div>\n          {actionIcon ? (\n            <div style={prepareStyles(styles.actionIcon)}>\n              {actionIcon}\n            </div>\n          ) : null}\n        </div>\n      );\n    }\n\n    let newChildren = children;\n\n    // if there is a single image passed as children\n    // clone it and add our styles\n    if (React.Children.count(children) === 1) {\n      newChildren = React.Children.map(children, (child) => {\n        if (child.type === 'img') {\n          return React.cloneElement(child, {\n            key: 'img',\n            ref: 'img',\n            style: prepareStyles(Object.assign({}, styles.childImg, child.props.style)),\n          });\n        } else {\n          return child;\n        }\n      });\n    }\n\n    const containerProps = {\n      style: prepareStyles(mergedRootStyles),\n      ...other,\n    };\n\n    return React.isValidElement(containerElement) ?\n      React.cloneElement(containerElement, containerProps, [newChildren, titleBar]) :\n      React.createElement(containerElement, containerProps, [newChildren, titleBar]);\n  }\n}\n\nexport default GridTile;\n"]}