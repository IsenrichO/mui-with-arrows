{"version":3,"sources":["../../src/GridList/GridList.js"],"names":["getStyles","props","root","display","flexWrap","margin","padding","item","boxSizing","GridList","render","cols","cellHeight","children","style","other","prepareStyles","context","muiTheme","styles","mergedRootStyles","wrappedChildren","Children","map","currentChild","isValidElement","type","muiName","childCols","childRows","rows","itemStyle","width","height","propTypes","oneOfType","number","oneOf","node","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAO;AACLC,UAAM;AACJC,eAAS,MADL;AAEJC,gBAAU,MAFN;AAGJC,cAAQ,CAACJ,MAAMK,OAAP,GAAiB;AAHrB,KADD;AAMLC,UAAM;AACJC,iBAAW,YADP;AAEJF,eAASL,MAAMK,OAAN,GAAgB;AAFrB;AAND,GAAP;AAWD;;IAEKG,Q;;;;;;;;qBAsCJC,M,qBAAS;AAAA,iBAQH,KAAKT,KARF;AAAA,QAELU,IAFK,UAELA,IAFK;AAAA,QAGLL,OAHK,UAGLA,OAHK;AAAA,QAILM,UAJK,UAILA,UAJK;AAAA,QAKLC,QALK,UAKLA,QALK;AAAA,QAMLC,KANK,UAMLA,KANK;AAAA,QAOFC,KAPE;AAAA,QAUAC,aAVA,GAUiB,KAAKC,OAAL,CAAaC,QAV9B,CAUAF,aAVA;;AAWP,QAAMG,SAASnB,UAAU,KAAKC,KAAf,EAAsB,KAAKgB,OAA3B,CAAf;AACA,QAAMG,mBAAmB,sBAAcD,OAAOjB,IAArB,EAA2BY,KAA3B,CAAzB;;AAEA,QAAMO,kBAAkB,gBAAMC,QAAN,CAAeC,GAAf,CAAmBV,QAAnB,EAA6B,UAACW,YAAD,EAAkB;AACrE,UAAI,gBAAMC,cAAN,CAAqBD,YAArB,KAAsCA,aAAaE,IAAb,CAAkBC,OAAlB,KAA8B,WAAxE,EAAqF;AACnF,eAAOH,YAAP;AACD;AACD,UAAMI,YAAYJ,aAAavB,KAAb,CAAmBU,IAAnB,IAA2B,CAA7C;AACA,UAAMkB,YAAYL,aAAavB,KAAb,CAAmB6B,IAAnB,IAA2B,CAA7C;AACA,UAAMC,YAAY,sBAAc,EAAd,EAAkBZ,OAAOZ,IAAzB,EAA+B;AAC/CyB,eAAW,MAAMrB,IAAN,GAAaiB,SAAxB,MAD+C;AAE/CK,gBAAQrB,eAAe,MAAf,GAAwB,MAAxB,GAAiCA,aAAaiB,SAAb,GAAyBvB;AAFnB,OAA/B,CAAlB;;AAKA,aAAO;AAAA;AAAA,UAAK,OAAOU,cAAce,SAAd,CAAZ;AAAuCP;AAAvC,OAAP;AACD,KAZuB,CAAxB;;AAcA,WACE;AAAA;AAAA,+BAAK,OAAOR,cAAcI,gBAAd,CAAZ,IAAiDL,KAAjD;AACGM;AADH,KADF;AAKD,G;;;4BAtEMa,S,GAAY;AACjB;;;;AAIAtB,cAAY,oBAAUuB,SAAV,CAAoB,CAC9B,oBAAUC,MADoB,EAE9B,oBAAUC,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAF8B,CAApB,CALK;AASjB;;;AAGAxB,YAAU,oBAAUyB,IAZH;AAajB;;;AAGA3B,QAAM,oBAAUyB,MAhBC;AAiBjB;;;AAGA9B,WAAS,oBAAU8B,MApBF;AAqBjB;;;AAGAtB,SAAO,oBAAUyB;AAxBA,C,SA2BZC,Y,GAAe;AACpB7B,QAAM,CADc;AAEpBL,WAAS,CAFW;AAGpBM,cAAY;AAHQ,C,SAMf6B,Y,GAAe;AACpBvB,YAAU,oBAAUqB,MAAV,CAAiBG;AADP,C;kBAwCTjC,Q","file":"GridList.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      margin: -props.padding / 2,\n    },\n    item: {\n      boxSizing: 'border-box',\n      padding: props.padding / 2,\n    },\n  };\n}\n\nclass GridList extends Component {\n  static propTypes = {\n    /**\n     * Number of px for one cell height.\n     * You can set `'auto'` if you want to let the children determine the height.\n     */\n    cellHeight: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.oneOf(['auto']),\n    ]),\n    /**\n     * Grid Tiles that will be in Grid List.\n     */\n    children: PropTypes.node,\n    /**\n     * Number of columns.\n     */\n    cols: PropTypes.number,\n    /**\n     * Number of px for the padding/spacing between items.\n     */\n    padding: PropTypes.number,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    cols: 2,\n    padding: 4,\n    cellHeight: 180,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      cols,\n      padding,\n      cellHeight,\n      children,\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n    const mergedRootStyles = Object.assign(styles.root, style);\n\n    const wrappedChildren = React.Children.map(children, (currentChild) => {\n      if (React.isValidElement(currentChild) && currentChild.type.muiName === 'Subheader') {\n        return currentChild;\n      }\n      const childCols = currentChild.props.cols || 1;\n      const childRows = currentChild.props.rows || 1;\n      const itemStyle = Object.assign({}, styles.item, {\n        width: `${(100 / cols * childCols)}%`,\n        height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + padding,\n      });\n\n      return <div style={prepareStyles(itemStyle)}>{currentChild}</div>;\n    });\n\n    return (\n      <div style={prepareStyles(mergedRootStyles)} {...other}>\n        {wrappedChildren}\n      </div>\n    );\n  }\n}\n\nexport default GridList;\n"]}