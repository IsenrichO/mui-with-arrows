{"version":3,"sources":["../../src/Avatar/Avatar.js"],"names":["getStyles","props","context","backgroundColor","color","size","avatar","muiTheme","styles","root","userSelect","display","alignItems","justifyContent","fontSize","borderRadius","height","width","icon","margin","Avatar","render","src","style","className","other","prepareStyles","cloneElement","children","muiName","propTypes","string","node","element","number","object","defaultProps","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,MAE/BC,eAF+B,GAK7BF,KAL6B,CAE/BE,eAF+B;AAAA,MAG/BC,KAH+B,GAK7BH,KAL6B,CAG/BG,KAH+B;AAAA,MAI/BC,IAJ+B,GAK7BJ,KAL6B,CAI/BI,IAJ+B;AAAA,MAO1BC,MAP0B,GAOhBJ,QAAQK,QAPQ,CAO1BD,MAP0B;;;AASjC,MAAME,SAAS;AACbC,UAAM;AACJL,aAAOA,SAASE,OAAOF,KADnB;AAEJD,uBAAiBA,mBAAmBG,OAAOH,eAFvC;AAGJO,kBAAY,MAHR;AAIJC,eAAS,aAJL;AAKJC,kBAAY,QALR;AAMJC,sBAAgB,QANZ;AAOJC,gBAAUT,OAAO,CAPb;AAQJU,oBAAc,KARV;AASJC,cAAQX,IATJ;AAUJY,aAAOZ;AAVH,KADO;AAaba,UAAM;AACJd,aAAOA,SAASE,OAAOF,KADnB;AAEJa,aAAOZ,OAAO,GAFV;AAGJW,cAAQX,OAAO,GAHX;AAIJS,gBAAUT,OAAO,GAJb;AAKJc,cAAQd,OAAO;AALX;AAbO,GAAf;;AAsBA,SAAOG,MAAP;AACD;;IAEKY,M;;;;;;;;mBA8CJC,M,qBAAS;AAAA,iBAQH,KAAKpB,KARF;AAAA,QAELE,eAFK,UAELA,eAFK;AAAA,QAGLe,IAHK,UAGLA,IAHK;AAAA,QAILI,GAJK,UAILA,GAJK;AAAA,QAKLC,KALK,UAKLA,KALK;AAAA,QAMLC,SANK,UAMLA,SANK;AAAA,QAOFC,KAPE;AAAA,QAUAC,aAVA,GAUiB,KAAKxB,OAAL,CAAaK,QAV9B,CAUAmB,aAVA;;AAWP,QAAMlB,SAASR,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;;AAEA,QAAIoB,GAAJ,EAAS;AACP,aACE;AACE,eAAOI,cAAc,sBAAclB,OAAOC,IAArB,EAA2Bc,KAA3B,CAAd;AADT,SAEME,KAFN;AAGE,aAAKH,GAHP;AAIE,mBAAWE;AAJb,SADF;AAQD,KATD,MASO;AACL,aACE;AAAA;AAAA,mCACMC,KADN;AAEE,iBAAOC,cAAc,sBAAclB,OAAOC,IAArB,EAA2Bc,KAA3B,CAAd,CAFT;AAGE,qBAAWC;AAHb;AAKGN,gBAAQ,gBAAMS,YAAN,CAAmBT,IAAnB,EAAyB;AAChCd,iBAAOI,OAAOU,IAAP,CAAYd,KADa;AAEhCmB,iBAAO,sBAAcf,OAAOU,IAArB,EAA2BA,KAAKjB,KAAL,CAAWsB,KAAtC;AAFyB,SAAzB,CALX;AASG,aAAKtB,KAAL,CAAW2B;AATd,OADF;AAaD;AACF,G;;;4BAlFMC,O,GAAU,Q,SAEVC,S,GAAY;AACjB;;;AAGA3B,mBAAiB,oBAAU4B,MAJV;AAKjB;;;AAGAH,YAAU,oBAAUI,IARH;AASjB;;;AAGAR,aAAW,oBAAUO,MAZJ;AAajB;;;AAGA3B,SAAO,oBAAU2B,MAhBA;AAiBjB;;;AAGAb,QAAM,oBAAUe,OApBC;AAqBjB;;;AAGA5B,QAAM,oBAAU6B,MAxBC;AAyBjB;;;AAGAZ,OAAK,oBAAUS,MA5BE;AA6BjB;;;AAGAR,SAAO,oBAAUY;AAhCA,C,SAmCZC,Y,GAAe;AACpB/B,QAAM;AADc,C,SAIfgC,Y,GAAe;AACpB9B,YAAU,oBAAU4B,MAAV,CAAiBG;AADP,C;kBA4CTlB,M","file":"Avatar.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {\n    backgroundColor,\n    color,\n    size,\n  } = props;\n\n  const {avatar} = context.muiTheme;\n\n  const styles = {\n    root: {\n      color: color || avatar.color,\n      backgroundColor: backgroundColor || avatar.backgroundColor,\n      userSelect: 'none',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: size / 2,\n      borderRadius: '50%',\n      height: size,\n      width: size,\n    },\n    icon: {\n      color: color || avatar.color,\n      width: size * 0.6,\n      height: size * 0.6,\n      fontSize: size * 0.6,\n      margin: size * 0.2,\n    },\n  };\n\n  return styles;\n}\n\nclass Avatar extends Component {\n  static muiName = 'Avatar';\n\n  static propTypes = {\n    /**\n     * The backgroundColor of the avatar. Does not apply to image avatars.\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * Can be used, for instance, to render a letter inside the avatar.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root `div` or `img` element.\n     */\n    className: PropTypes.string,\n    /**\n     * The icon or letter's color.\n     */\n    color: PropTypes.string,\n    /**\n     * This is the SvgIcon or FontIcon to be used inside the avatar.\n     */\n    icon: PropTypes.element,\n    /**\n     * This is the size of the avatar in pixels.\n     */\n    size: PropTypes.number,\n    /**\n     * If passed in, this component will render an img element. Otherwise, a div will be rendered.\n     */\n    src: PropTypes.string,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    size: 40,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      backgroundColor, // eslint-disable-line no-unused-vars\n      icon,\n      src,\n      style,\n      className,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    if (src) {\n      return (\n        <img\n          style={prepareStyles(Object.assign(styles.root, style))}\n          {...other}\n          src={src}\n          className={className}\n        />\n      );\n    } else {\n      return (\n        <div\n          {...other}\n          style={prepareStyles(Object.assign(styles.root, style))}\n          className={className}\n        >\n          {icon && React.cloneElement(icon, {\n            color: styles.icon.color,\n            style: Object.assign(styles.icon, icon.props.style),\n          })}\n          {this.props.children}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Avatar;\n"]}