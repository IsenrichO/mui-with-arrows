{"version":3,"sources":["../../src/Snackbar/SnackbarBody.js"],"names":["getStyles","props","context","open","width","muiTheme","baseTheme","spacing","desktopGutter","desktopSubheaderHeight","fontFamily","snackbar","backgroundColor","textColor","actionColor","borderRadius","isSmall","styles","root","padding","height","lineHeight","maxWidth","minWidth","flexGrow","content","fontSize","color","opacity","transition","easeOut","action","float","marginTop","marginRight","marginLeft","SnackbarBody","contentStyle","message","onActionTouchTap","style","other","prepareStyles","actionButton","propTypes","node","object","isRequired","func","bool","number","contextTypes"],"mappings":"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","file":"SnackbarBody.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport withWidth, {SMALL} from '../utils/withWidth';\nimport FlatButton from '../FlatButton';\n\nfunction getStyles(props, context) {\n  const {\n    open,\n    width,\n  } = props;\n\n  const {\n    muiTheme: {\n      baseTheme: {\n        spacing: {\n          desktopGutter,\n          desktopSubheaderHeight,\n        },\n        fontFamily,\n      },\n      snackbar: {\n        backgroundColor,\n        textColor,\n        actionColor,\n      },\n      borderRadius,\n    },\n  } = context;\n\n  const isSmall = width === SMALL;\n\n  const styles = {\n    root: {\n      fontFamily: fontFamily,\n      backgroundColor: backgroundColor,\n      padding: `0 ${desktopGutter}px`,\n      height: desktopSubheaderHeight,\n      lineHeight: `${desktopSubheaderHeight}px`,\n      borderRadius: isSmall ? 0 : borderRadius,\n      maxWidth: isSmall ? 'inherit' : 568,\n      minWidth: isSmall ? 'inherit' : 288,\n      width: isSmall ? `calc(100vw - ${desktopGutter * 2}px)` : 'auto',\n      flexGrow: isSmall ? 1 : 0,\n    },\n    content: {\n      fontSize: 14,\n      color: textColor,\n      opacity: open ? 1 : 0,\n      transition: open ?\n        transitions.easeOut('500ms', 'opacity', '100ms') :\n        transitions.easeOut('400ms', 'opacity'),\n    },\n    action: {\n      color: actionColor,\n      float: 'right',\n      marginTop: 6,\n      marginRight: -16,\n      marginLeft: desktopGutter,\n      backgroundColor: 'transparent',\n    },\n  };\n\n  return styles;\n}\n\nexport const SnackbarBody = (props, context) => {\n  const {\n    action,\n    contentStyle,\n    message,\n    open, // eslint-disable-line no-unused-vars\n    onActionTouchTap,\n    style,\n    ...other\n  } = props;\n\n  const {prepareStyles} = context.muiTheme;\n  const styles = getStyles(props, context);\n\n  const actionButton = action && (\n    <FlatButton\n      style={styles.action}\n      label={action}\n      onTouchTap={onActionTouchTap}\n    />\n  );\n\n  return (\n    <div {...other} style={prepareStyles(Object.assign(styles.root, style))}>\n      <div style={prepareStyles(Object.assign(styles.content, contentStyle))}>\n        <span>{message}</span>\n        {actionButton}\n      </div>\n    </div>\n  );\n};\n\nSnackbarBody.propTypes = {\n  /**\n   * The label for the action on the snackbar.\n   */\n  action: PropTypes.node,\n  /**\n   * Override the inline-styles of the content element.\n   */\n  contentStyle: PropTypes.object,\n  /**\n   * The message to be displayed.\n   *\n   * (Note: If the message is an element or array, and the `Snackbar` may re-render while it is still open,\n   * ensure that the same object remains as the `message` property if you want to avoid the `Snackbar` hiding and\n   * showing again)\n   */\n  message: PropTypes.node.isRequired,\n  /**\n   * Fired when the action button is touchtapped.\n   *\n   * @param {object} event Action button event.\n   */\n  onActionTouchTap: PropTypes.func,\n  /**\n   * @ignore\n   * Controls whether the `Snackbar` is opened or not.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   * Width of the screen.\n   */\n  width: PropTypes.number.isRequired,\n};\n\nSnackbarBody.contextTypes = {\n  muiTheme: PropTypes.object.isRequired,\n};\n\nexport default withWidth()(SnackbarBody);\n"]}