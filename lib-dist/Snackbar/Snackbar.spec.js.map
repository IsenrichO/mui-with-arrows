{"version":3,"sources":["../../src/Snackbar/Snackbar.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","it","wrapper","strictEqual","find","at","props","style","visibility","done","setProps","message","state","setTimeout","open","contentStyle"],"mappings":";;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AANA;AAQAA,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAMC,WAAW,4BAAjB;AACA,MAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,IAAD;AAAA,WAAU,qBAAQA,IAAR,EAAc,EAACC,SAAS,EAACH,kBAAD,EAAV,EAAd,CAAV;AAAA,GAA3B;;AAEAD,WAAS,YAAT,EAAuB,YAAM;AAC3BK,OAAG,qCAAH,EAA0C,YAAM;AAC9C,UAAMC,UAAUJ,mBACd,oDAAU,MAAM,KAAhB,EAAuB,SAAQ,SAA/B,GADc,CAAhB;;AAIA,mBAAOK,WAAP,CACED,QAAQE,IAAR,CAAa,KAAb,EAAoBC,EAApB,CAAuB,CAAvB,EAA0BN,IAA1B,CAA+BO,KAA/B,CAAqCC,KAArC,CAA2CC,UAD7C,EAEE,QAFF,EAGE,+BAHF;AAKD,KAVD;;AAYAP,OAAG,oCAAH,EAAyC,YAAM;AAC7C,UAAMC,UAAUJ,mBACd,oDAAU,MAAM,IAAhB,EAAsB,SAAQ,SAA9B,GADc,CAAhB;;AAIA,mBAAOK,WAAP,CACED,QAAQE,IAAR,CAAa,KAAb,EAAoBC,EAApB,CAAuB,CAAvB,EAA0BN,IAA1B,CAA+BO,KAA/B,CAAqCC,KAArC,CAA2CC,UAD7C,EAEE,SAFF,EAGE,+BAHF;AAKD,KAVD;AAWD,GAxBD;;AA0BAP,KAAG,8CAAH,EAAmD,UAACQ,IAAD,EAAU;AAC3D,QAAMP,UAAUJ,mBACd,oDAAU,MAAM,IAAhB,EAAsB,SAAQ,eAA9B,GADc,CAAhB;;AAIAI,YAAQQ,QAAR,CAAiB;AACfC,eAAS;AADM,KAAjB;AAGA,iBAAOR,WAAP,CAAmBD,QAAQU,KAAR,CAAc,SAAd,CAAnB,EAA6C,eAA7C;;AAEAC,eAAW,YAAM;AACf,mBAAOV,WAAP,CAAmBD,QAAQU,KAAR,CAAc,SAAd,CAAnB,EAA6C,gBAA7C,EACE,2CADF;AAEAH;AACD,KAJD,EAIG,GAJH;AAKD,GAfD;;AAiBAR,KAAG,uDAAH,EAA4D,UAACQ,IAAD,EAAU;AACpE,QAAMP,UAAUJ,mBACd,oDAAU,MAAM,KAAhB,EAAuB,SAAQ,eAA/B,GADc,CAAhB;;AAIAI,YAAQQ,QAAR,CAAiB;AACfI,YAAM,IADS;AAEfH,eAAS;AAFM,KAAjB;AAIA,iBAAOR,WAAP,CAAmBD,QAAQU,KAAR,CAAc,SAAd,CAAnB,EAA6C,gBAA7C;AACAV,YAAQQ,QAAR,CAAiB;AACfI,YAAM,IADS;AAEfH,eAAS;AAFM,KAAjB;AAIA,iBAAOR,WAAP,CAAmBD,QAAQU,KAAR,CAAc,SAAd,CAAnB,EAA6C,gBAA7C;;AAEAC,eAAW,YAAM;AACf,mBAAOV,WAAP,CAAmBD,QAAQU,KAAR,CAAc,SAAd,CAAnB,EAA6C,eAA7C,EACE,6CADF;AAEAH;AACD,KAJD,EAIG,GAJH;AAKD,GArBD;;AAuBAb,WAAS,oBAAT,EAA+B,YAAM;AACnCK,OAAG,6CAAH,EAAkD,YAAM;AACtD,UAAMc,eAAe,EAArB;AACA,UAAMb,UAAUJ,mBACd,oDAAU,MAAM,KAAhB,EAAuB,SAAQ,EAA/B,EAAkC,cAAciB,YAAhD,GADc,CAAhB;;AAIA,mBAAOZ,WAAP,CACED,QAAQE,IAAR,yBAA2BE,KAA3B,GAAmCS,YADrC,EAEEA,YAFF;AAID,KAVD;AAWD,GAZD;AAaD,CAnFD","file":"Snackbar.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\nimport Snackbar from './Snackbar';\nimport SnackbarBody from './SnackbarBody';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<Snackbar />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n\n  describe('prop: open', () => {\n    it('should be hidden when open is false', () => {\n      const wrapper = shallowWithContext(\n        <Snackbar open={false} message=\"Message\" />\n      );\n\n      assert.strictEqual(\n        wrapper.find('div').at(0).node.props.style.visibility,\n        'hidden',\n        'The element should be hidden.'\n      );\n    });\n\n    it('should be hidden when open is true', () => {\n      const wrapper = shallowWithContext(\n        <Snackbar open={true} message=\"Message\" />\n      );\n\n      assert.strictEqual(\n        wrapper.find('div').at(0).node.props.style.visibility,\n        'visible',\n        'The element should be hidden.'\n      );\n    });\n  });\n\n  it('should show the next message after an update', (done) => {\n    const wrapper = shallowWithContext(\n      <Snackbar open={true} message=\"First message\" />\n    );\n\n    wrapper.setProps({\n      message: 'Second message',\n    });\n    assert.strictEqual(wrapper.state('message'), 'First message');\n\n    setTimeout(() => {\n      assert.strictEqual(wrapper.state('message'), 'Second message',\n        'Should take into account the next message');\n      done();\n    }, 500);\n  });\n\n  it('should show the latest message of consecutive updates', (done) => {\n    const wrapper = shallowWithContext(\n      <Snackbar open={false} message=\"First message\" />\n    );\n\n    wrapper.setProps({\n      open: true,\n      message: 'Second message',\n    });\n    assert.strictEqual(wrapper.state('message'), 'Second message');\n    wrapper.setProps({\n      open: true,\n      message: 'Third message',\n    });\n    assert.strictEqual(wrapper.state('message'), 'Second message');\n\n    setTimeout(() => {\n      assert.strictEqual(wrapper.state('message'), 'Third message',\n        'Should take into account the latest message');\n      done();\n    }, 500);\n  });\n\n  describe('prop: contentStyle', () => {\n    it('should apply the style on the right element', () => {\n      const contentStyle = {};\n      const wrapper = shallowWithContext(\n        <Snackbar open={false} message=\"\" contentStyle={contentStyle} />\n      );\n\n      assert.strictEqual(\n        wrapper.find(SnackbarBody).props().contentStyle,\n        contentStyle\n      );\n    });\n  });\n});\n"]}