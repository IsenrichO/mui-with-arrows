{"version":3,"sources":["../../src/Snackbar/Snackbar.js"],"names":["getStyles","props","context","state","muiTheme","desktopSubheaderHeight","baseTheme","spacing","zIndex","open","styles","root","position","left","display","bottom","snackbar","visibility","transform","transition","easeOut","Snackbar","componentClickAway","timerTransitionId","onRequestClose","setState","componentWillMount","message","action","componentDidMount","setAutoHideTimer","setTransitionTimer","componentWillReceiveProps","nextProps","clearTimeout","timerOneAtTheTimeId","setTimeout","componentDidUpdate","prevProps","prevState","timerAutoHideId","componentWillUnmount","autoHideDuration","undefined","render","contentStyle","bodyStyle","messageProp","onActionTouchTap","style","other","prepareStyles","propTypes","node","number","object","className","string","isRequired","func","bool","contextTypes"],"mappings":"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","file":"Snackbar.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport ClickAwayListener from '../internal/ClickAwayListener';\nimport SnackbarBody from './SnackbarBody';\n\nfunction getStyles(props, context, state) {\n  const {\n    muiTheme: {\n      baseTheme: {\n        spacing: {\n          desktopSubheaderHeight,\n        },\n      },\n      zIndex,\n    },\n  } = context;\n\n  const {open} = state;\n\n  const styles = {\n    root: {\n      position: 'fixed',\n      left: '50%',\n      display: 'flex',\n      bottom: 0,\n      zIndex: zIndex.snackbar,\n      visibility: open ? 'visible' : 'hidden',\n      transform: open ?\n        'translate(-50%, 0)' :\n        `translate(-50%, ${desktopSubheaderHeight}px)`,\n      transition: `${transitions.easeOut('400ms', 'transform')}, ${\n        transitions.easeOut('400ms', 'visibility')}`,\n    },\n  };\n\n  return styles;\n}\n\nclass Snackbar extends Component {\n  static propTypes = {\n    /**\n     * The label for the action on the snackbar.\n     */\n    action: PropTypes.node,\n    /**\n     * The number of milliseconds to wait before automatically dismissing.\n     * If no value is specified the snackbar will dismiss normally.\n     * If a value is provided the snackbar can still be dismissed normally.\n     * If a snackbar is dismissed before the timer expires, the timer will be cleared.\n     */\n    autoHideDuration: PropTypes.number,\n    /**\n     * Override the inline-styles of the body element.\n     */\n    bodyStyle: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Override the inline-styles of the content element.\n     */\n    contentStyle: PropTypes.object,\n    /**\n     * The message to be displayed.\n     *\n     * (Note: If the message is an element or array, and the `Snackbar` may re-render while it is still open,\n     * ensure that the same object remains as the `message` property if you want to avoid the `Snackbar` hiding and\n     * showing again)\n     */\n    message: PropTypes.node.isRequired,\n    /**\n     * Fired when the action button is touchtapped.\n     *\n     * @param {object} event Action button event.\n     */\n    onActionTouchTap: PropTypes.func,\n    /**\n     * Fired when the `Snackbar` is requested to be closed by a click outside the `Snackbar`, or after the\n     * `autoHideDuration` timer expires.\n     *\n     * Typically `onRequestClose` is used to set state in the parent component, which is used to control the `Snackbar`\n     * `open` prop.\n     *\n     * The `reason` parameter can optionally be used to control the response to `onRequestClose`,\n     * for example ignoring `clickaway`.\n     *\n     * @param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n     */\n    onRequestClose: PropTypes.func,\n    /**\n     * Controls whether the `Snackbar` is opened or not.\n     */\n    open: PropTypes.bool.isRequired,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentWillMount() {\n    this.setState({\n      open: this.props.open,\n      message: this.props.message,\n      action: this.props.action,\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.open) {\n      this.setAutoHideTimer();\n      this.setTransitionTimer();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.open && nextProps.open &&\n        (nextProps.message !== this.props.message || nextProps.action !== this.props.action)) {\n      this.setState({\n        open: false,\n      });\n\n      clearTimeout(this.timerOneAtTheTimeId);\n      this.timerOneAtTheTimeId = setTimeout(() => {\n        this.setState({\n          message: nextProps.message,\n          action: nextProps.action,\n          open: true,\n        });\n      }, 400);\n    } else {\n      const open = nextProps.open;\n\n      this.setState({\n        open: open !== null ? open : this.state.open,\n        message: nextProps.message,\n        action: nextProps.action,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.open !== this.state.open) {\n      if (this.state.open) {\n        this.setAutoHideTimer();\n        this.setTransitionTimer();\n      } else {\n        clearTimeout(this.timerAutoHideId);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timerAutoHideId);\n    clearTimeout(this.timerTransitionId);\n    clearTimeout(this.timerOneAtTheTimeId);\n  }\n\n  componentClickAway = () => {\n    if (this.timerTransitionId) {\n      // If transitioning, don't close the snackbar.\n      return;\n    }\n\n    if (this.props.open !== null && this.props.onRequestClose) {\n      this.props.onRequestClose('clickaway');\n    } else {\n      this.setState({open: false});\n    }\n  };\n\n  // Timer that controls delay before snackbar auto hides\n  setAutoHideTimer() {\n    const autoHideDuration = this.props.autoHideDuration;\n\n    if (autoHideDuration > 0) {\n      clearTimeout(this.timerAutoHideId);\n      this.timerAutoHideId = setTimeout(() => {\n        if (this.props.open !== null && this.props.onRequestClose) {\n          this.props.onRequestClose('timeout');\n        } else {\n          this.setState({open: false});\n        }\n      }, autoHideDuration);\n    }\n  }\n\n  // Timer that controls delay before click-away events are captured (based on when animation completes)\n  setTransitionTimer() {\n    this.timerTransitionId = setTimeout(() => {\n      this.timerTransitionId = undefined;\n    }, 400);\n  }\n\n  render() {\n    const {\n      autoHideDuration, // eslint-disable-line no-unused-vars\n      contentStyle,\n      bodyStyle,\n      message: messageProp, // eslint-disable-line no-unused-vars\n      onRequestClose, // eslint-disable-line no-unused-vars\n      onActionTouchTap,\n      style,\n      ...other\n    } = this.props;\n\n    const {\n      action,\n      message,\n      open,\n    } = this.state;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context, this.state);\n\n    return (\n      <ClickAwayListener onClickAway={open ? this.componentClickAway : null}>\n        <div {...other} style={prepareStyles(Object.assign(styles.root, style))}>\n          <SnackbarBody\n            action={action}\n            contentStyle={contentStyle}\n            message={message}\n            open={open}\n            onActionTouchTap={onActionTouchTap}\n            style={bodyStyle}\n          />\n        </div>\n      </ClickAwayListener>\n    );\n  }\n}\n\nexport default Snackbar;\n"]}