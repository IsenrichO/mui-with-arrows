{"version":3,"sources":["../../src/Toggle/Toggle.js"],"names":["getStyles","props","context","state","disabled","elementStyle","trackSwitchedStyle","thumbSwitchedStyle","trackStyle","thumbStyle","iconStyle","rippleStyle","labelStyle","muiTheme","baseTheme","toggle","toggleSize","toggleTrackWidth","styles","icon","width","padding","ripple","top","left","color","switched","thumbOnColor","palette","textColor","toggleElement","track","transition","easeOut","height","borderRadius","backgroundColor","trackOffColor","thumb","position","lineHeight","thumbOffColor","trackWhenSwitched","trackOnColor","thumbWhenSwitched","trackWhenDisabled","trackDisabledColor","thumbWhenDisabled","thumbDisabledColor","label","labelDisabledColor","labelColor","marginLeft","Toggle","handleStateChange","newSwitched","setState","handleToggle","event","isInputChecked","onToggle","componentWillMount","toggled","defaultToggled","valueLink","value","isToggled","refs","enhancedSwitch","isSwitched","setToggled","newToggledValue","setSwitched","render","other","prepareStyles","enhancedSwitchProps","ref","inputType","switchElement","rippleColor","onSwitch","onParentShouldUpdate","labelPosition","hasOwnProperty","checked","defaultChecked","propTypes","bool","object","inputStyle","node","oneOf","func","style","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"Toggle.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport Paper from '../Paper';\nimport EnhancedSwitch from '../internal/EnhancedSwitch';\n\nfunction getStyles(props, context, state) {\n  const {\n    disabled,\n    elementStyle,\n    trackSwitchedStyle,\n    thumbSwitchedStyle,\n    trackStyle,\n    thumbStyle,\n    iconStyle,\n    rippleStyle,\n    labelStyle,\n  } = props;\n\n  const {\n    baseTheme,\n    toggle,\n  } = context.muiTheme;\n\n  const toggleSize = 20;\n  const toggleTrackWidth = 36;\n  const styles = {\n    icon: {\n      width: 36,\n      padding: '4px 0px 6px 2px',\n    },\n    ripple: {\n      top: -10,\n      left: -10,\n      color: state.switched ? toggle.thumbOnColor : baseTheme.palette.textColor,\n    },\n    toggleElement: {\n      width: toggleTrackWidth,\n    },\n    track: {\n      transition: transitions.easeOut(),\n      width: '100%',\n      height: 14,\n      borderRadius: 30,\n      backgroundColor: toggle.trackOffColor,\n    },\n    thumb: {\n      transition: transitions.easeOut(),\n      position: 'absolute',\n      top: 1,\n      left: 0,\n      width: toggleSize,\n      height: toggleSize,\n      lineHeight: '24px',\n      borderRadius: '50%',\n      backgroundColor: toggle.thumbOffColor,\n    },\n    trackWhenSwitched: {\n      backgroundColor: toggle.trackOnColor,\n    },\n    thumbWhenSwitched: {\n      backgroundColor: toggle.thumbOnColor,\n      left: '100%',\n    },\n    trackWhenDisabled: {\n      backgroundColor: toggle.trackDisabledColor,\n    },\n    thumbWhenDisabled: {\n      backgroundColor: toggle.thumbDisabledColor,\n    },\n    label: {\n      color: disabled ? toggle.labelDisabledColor : toggle.labelColor,\n      width: `calc(100% - ${(toggleTrackWidth + 10)}px)`,\n    },\n  };\n\n  Object.assign(styles.track,\n    trackStyle,\n    state.switched && styles.trackWhenSwitched,\n    state.switched && trackSwitchedStyle,\n    disabled && styles.trackWhenDisabled\n  );\n\n  Object.assign(styles.thumb,\n    thumbStyle,\n    state.switched && styles.thumbWhenSwitched,\n    state.switched && thumbSwitchedStyle,\n    disabled && styles.thumbWhenDisabled\n  );\n\n  if (state.switched) {\n    styles.thumb.marginLeft = 0 - styles.thumb.width;\n  }\n\n  Object.assign(styles.icon, iconStyle);\n\n  Object.assign(styles.ripple, rippleStyle);\n\n  Object.assign(styles.label, labelStyle);\n\n  Object.assign(styles.toggleElement, elementStyle);\n\n  return styles;\n}\n\nclass Toggle extends Component {\n  static propTypes = {\n    /**\n     * Determines whether the Toggle is initially turned on.\n     * **Warning:** This cannot be used in conjunction with `toggled`.\n     * Decide between using a controlled or uncontrolled input element and remove one of these props.\n     * More info: https://fb.me/react-controlled-components\n     */\n    defaultToggled: PropTypes.bool,\n    /**\n     * Will disable the toggle if true.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Overrides the inline-styles of the Toggle element.\n     */\n    elementStyle: PropTypes.object,\n    /**\n     * Overrides the inline-styles of the Icon element.\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * Overrides the inline-styles of the input element.\n     */\n    inputStyle: PropTypes.object,\n    /**\n     * Label for toggle.\n     */\n    label: PropTypes.node,\n    /**\n     * Where the label will be placed next to the toggle.\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Overrides the inline-styles of the Toggle element label.\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * Callback function that is fired when the toggle switch is toggled.\n     *\n     * @param {object} event Change event targeting the toggle.\n     * @param {bool} isInputChecked The new value of the toggle.\n     */\n    onToggle: PropTypes.func,\n    /**\n     * Override style of ripple.\n     */\n    rippleStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * Override style for thumb.\n     */\n    thumbStyle: PropTypes.object,\n    /**\n    * Override the inline styles for thumb when the toggle switch is toggled on.\n    */\n    thumbSwitchedStyle: PropTypes.object,\n    /**\n     * Toggled if set to true.\n     */\n    toggled: PropTypes.bool,\n    /**\n     * Override style for track.\n     */\n    trackStyle: PropTypes.object,\n    /**\n    * Override the inline styles for track when the toggle switch is toggled on.\n    */\n    trackSwitchedStyle: PropTypes.object,\n    /**\n     * ValueLink prop for when using controlled toggle.\n     */\n    valueLink: PropTypes.object,\n  };\n\n  static defaultProps = {\n    defaultToggled: false,\n    disabled: false,\n    labelPosition: 'left',\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    switched: false,\n  };\n\n  componentWillMount() {\n    const {toggled, defaultToggled, valueLink} = this.props;\n\n    if (toggled || defaultToggled || (valueLink && valueLink.value)) {\n      this.setState({\n        switched: true,\n      });\n    }\n  }\n\n  isToggled() {\n    return this.refs.enhancedSwitch.isSwitched();\n  }\n\n  setToggled(newToggledValue) {\n    this.refs.enhancedSwitch.setSwitched(newToggledValue);\n  }\n\n  handleStateChange = (newSwitched) => {\n    this.setState({\n      switched: newSwitched,\n    });\n  };\n\n  handleToggle = (event, isInputChecked) => {\n    if (this.props.onToggle) {\n      this.props.onToggle(event, isInputChecked);\n    }\n  };\n\n  render() {\n    const {\n      defaultToggled,\n      elementStyle, // eslint-disable-line no-unused-vars\n      onToggle, // eslint-disable-line no-unused-vars\n      trackSwitchedStyle, // eslint-disable-line no-unused-vars\n      thumbSwitchedStyle, // eslint-disable-line no-unused-vars\n      toggled,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context, this.state);\n\n    const toggleElement = (\n      <div style={prepareStyles(Object.assign({}, styles.toggleElement))}>\n        <div style={prepareStyles(Object.assign({}, styles.track))} />\n        <Paper style={styles.thumb} circle={true} zDepth={1} />\n      </div>\n    );\n\n    const enhancedSwitchProps = {\n      ref: 'enhancedSwitch',\n      inputType: 'checkbox',\n      switchElement: toggleElement,\n      rippleStyle: styles.ripple,\n      rippleColor: styles.ripple.color,\n      iconStyle: styles.icon,\n      trackStyle: styles.track,\n      thumbStyle: styles.thumb,\n      labelStyle: styles.label,\n      switched: this.state.switched,\n      onSwitch: this.handleToggle,\n      onParentShouldUpdate: this.handleStateChange,\n      labelPosition: this.props.labelPosition,\n    };\n\n    if (this.props.hasOwnProperty('toggled')) {\n      enhancedSwitchProps.checked = toggled;\n    } else if (this.props.hasOwnProperty('defaultToggled')) {\n      enhancedSwitchProps.defaultChecked = defaultToggled;\n    }\n\n    return (\n      <EnhancedSwitch\n        {...other}\n        {...enhancedSwitchProps}\n      />\n    );\n  }\n}\n\nexport default Toggle;\n"]}