{"version":3,"sources":["../../src/RadioButton/RadioButtonGroup.js"],"names":["RadioButtonGroup","state","numberCheckedRadioButtons","selected","handleChange","event","newSelection","updateRadioButtons","props","onChange","componentWillMount","cnt","valueSelected","defaultSelected","undefined","Children","forEach","children","option","hasCheckAttribute","setState","componentWillReceiveProps","nextProps","hasOwnProperty","radioButton","checked","getSelectedValue","setSelectedValue","newSelectionValue","clearValue","render","prepareStyles","context","muiTheme","options","map","name","value","label","onCheck","other","labelPosition","style","className","propTypes","node","string","any","oneOf","isRequired","func","object","defaultProps","contextTypes"],"mappings":"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","file":"RadioButtonGroup.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButton from './RadioButton';\nimport warning from 'warning';\n\nclass RadioButtonGroup extends Component {\n  static propTypes = {\n    /**\n     * Should be used to pass `RadioButton` components.\n     */\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * The `value` property of the radio button that will be\n     * selected by default. This takes precedence over the `checked` property\n     * of the `RadioButton` elements.\n     */\n    defaultSelected: PropTypes.any,\n    /**\n     * Where the label will be placed for all child radio buttons.\n     * This takes precedence over the `labelPosition` property of the\n     * `RadioButton` elements.\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * The name that will be applied to all child radio buttons.\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Callback function that is fired when a radio button has\n     * been checked.\n     *\n     * @param {object} event `change` event targeting the selected\n     * radio button.\n     * @param {*} value The `value` of the selected radio button.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The `value` of the currently selected radio button.\n     */\n    valueSelected: PropTypes.any,\n  };\n\n  static defaultProps = {\n    style: {},\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    numberCheckedRadioButtons: 0,\n    selected: '',\n  };\n\n  componentWillMount() {\n    let cnt = 0;\n    let selected = '';\n    const {valueSelected, defaultSelected} = this.props;\n    if (valueSelected !== undefined) {\n      selected = valueSelected;\n    } else if (defaultSelected !== undefined) {\n      selected = defaultSelected;\n    }\n\n    React.Children.forEach(this.props.children, (option) => {\n      if (this.hasCheckAttribute(option)) cnt++;\n    }, this);\n\n    this.setState({\n      numberCheckedRadioButtons: cnt,\n      selected,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.hasOwnProperty('valueSelected')) {\n      this.setState({\n        selected: nextProps.valueSelected,\n      });\n    }\n  }\n\n  hasCheckAttribute(radioButton) {\n    return radioButton.props.hasOwnProperty('checked') &&\n      radioButton.props.checked;\n  }\n\n  updateRadioButtons(newSelection) {\n    if (this.state.numberCheckedRadioButtons === 0) {\n      this.setState({selected: newSelection});\n    } else {\n      warning(false, `Material-UI: Cannot select a different radio button while another radio button\n        has the 'checked' property set to true.`);\n    }\n  }\n\n  handleChange = (event, newSelection) => {\n    this.updateRadioButtons(newSelection);\n\n    // Successful update\n    if (this.state.numberCheckedRadioButtons === 0) {\n      if (this.props.onChange) this.props.onChange(event, newSelection);\n    }\n  };\n\n  getSelectedValue() {\n    return this.state.selected;\n  }\n\n  setSelectedValue(newSelectionValue) {\n    this.updateRadioButtons(newSelectionValue);\n  }\n\n  clearValue() {\n    this.setSelectedValue('');\n  }\n\n  render() {\n    const {prepareStyles} = this.context.muiTheme;\n\n    const options = React.Children.map(this.props.children, (option) => {\n      const {\n        name, // eslint-disable-line no-unused-vars\n        value, // eslint-disable-line no-unused-vars\n        label, // eslint-disable-line no-unused-vars\n        onCheck, // eslint-disable-line no-unused-vars\n        ...other\n      } = option.props;\n\n      return (\n        <RadioButton\n          {...other}\n          ref={option.props.value}\n          name={this.props.name}\n          key={option.props.value}\n          value={option.props.value}\n          label={option.props.label}\n          labelPosition={this.props.labelPosition}\n          onCheck={this.handleChange}\n          checked={option.props.value === this.state.selected}\n        />\n      );\n    }, this);\n\n    return (\n      <div\n        style={prepareStyles(Object.assign({}, this.props.style))}\n        className={this.props.className}\n      >\n        {options}\n      </div>\n    );\n  }\n}\n\nexport default RadioButtonGroup;\n"]}