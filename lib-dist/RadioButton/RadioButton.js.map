{"version":3,"sources":["../../src/RadioButton/RadioButton.js"],"names":["getStyles","props","context","radioButton","muiTheme","icon","height","size","width","target","transition","easeOut","position","opacity","transform","fill","borderColor","transformOrigin","checkedColor","targetWhenChecked","fillWhenChecked","targetWhenDisabled","disabledColor","fillWhenDisabled","label","color","disabled","labelDisabledColor","labelColor","ripple","checked","RadioButton","handleSwitch","event","onCheck","value","isChecked","refs","enhancedSwitch","isSwitched","setChecked","newCheckedValue","setSwitched","getValue","render","checkedIcon","iconStyle","labelStyle","labelPosition","uncheckedIcon","other","styles","uncheckedStyles","checkedStyles","uncheckedElement","isValidElement","cloneElement","style","checkedElement","mergedIconStyle","mergedLabelStyle","propTypes","bool","element","object","inputStyle","oneOf","func","any","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"RadioButton.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport EnhancedSwitch from '../internal/EnhancedSwitch';\nimport RadioButtonOff from '../svg-icons/toggle/radio-button-unchecked';\nimport RadioButtonOn from '../svg-icons/toggle/radio-button-checked';\n\nfunction getStyles(props, context) {\n  const {radioButton} = context.muiTheme;\n\n  return {\n    icon: {\n      height: radioButton.size,\n      width: radioButton.size,\n    },\n    target: {\n      transition: transitions.easeOut(),\n      position: 'absolute',\n      opacity: 1,\n      transform: 'scale(1)',\n      fill: radioButton.borderColor,\n    },\n    fill: {\n      position: 'absolute',\n      opacity: 1,\n      transform: 'scale(0)',\n      transformOrigin: '50% 50%',\n      transition: transitions.easeOut(),\n      fill: radioButton.checkedColor,\n    },\n    targetWhenChecked: {\n      opacity: 0,\n      transform: 'scale(0)',\n    },\n    fillWhenChecked: {\n      opacity: 1,\n      transform: 'scale(1)',\n    },\n    targetWhenDisabled: {\n      fill: radioButton.disabledColor,\n    },\n    fillWhenDisabled: {\n      fill: radioButton.disabledColor,\n    },\n    label: {\n      color: props.disabled ? radioButton.labelDisabledColor : radioButton.labelColor,\n    },\n    ripple: {\n      color: props.checked ? radioButton.checkedColor : radioButton.borderColor,\n    },\n  };\n}\n\nclass RadioButton extends Component {\n  static propTypes = {\n    /**\n     * @ignore\n     * checked if true\n     * Used internally by `RadioButtonGroup`.\n     */\n    checked: PropTypes.bool,\n    /**\n     * The icon element to show when the radio button is checked.\n     */\n    checkedIcon: PropTypes.element,\n    /**\n     * If true, the radio button is disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Override the inline-styles of the icon element.\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of the input element.\n     */\n    inputStyle: PropTypes.object,\n    /**\n     * @ignore\n     * Used internally by `RadioButtonGroup`. Use the `labelPosition` property of `RadioButtonGroup` instead.\n     * Where the label will be placed next to the radio button.\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Override the inline-styles of the label element.\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * @ignore\n     * Callback function fired when the radio button is checked. Note that this\n     * function will not be called if the radio button is part of a\n     * radio button group: in this case, use the `onChange` property of\n     * `RadioButtonGroup`.\n     *\n     * @param {object} event `change` event targeting the element.\n     * @param {string} value The element's `value`.\n     */\n    onCheck: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The icon element to show when the radio button is unchecked.\n     */\n    uncheckedIcon: PropTypes.element,\n    /**\n     * The value of the radio button.\n     */\n    value: PropTypes.any,\n  };\n\n  static defaultProps = {\n    checked: false,\n    disabled: false,\n    labelPosition: 'right',\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  // Only called when selected, not when unselected.\n  handleSwitch = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.props.value);\n    }\n  };\n\n  isChecked() {\n    return this.refs.enhancedSwitch.isSwitched();\n  }\n\n  // Use RadioButtonGroup.setSelectedValue(newSelectionValue) to set a\n  // RadioButton's checked value.\n  setChecked(newCheckedValue) {\n    this.refs.enhancedSwitch.setSwitched(newCheckedValue);\n  }\n\n  getValue() {\n    return this.refs.enhancedSwitch.getValue();\n  }\n\n  render() {\n    const {\n      checkedIcon,\n      checked,\n      iconStyle,\n      labelStyle,\n      labelPosition,\n      onCheck, // eslint-disable-line no-unused-vars\n      uncheckedIcon,\n      disabled,\n      ...other\n    } = this.props;\n\n    const styles = getStyles(this.props, this.context);\n\n    const uncheckedStyles = Object.assign(\n      styles.target,\n      checked && styles.targetWhenChecked,\n      iconStyle,\n      disabled && styles.targetWhenDisabled\n    );\n\n    const checkedStyles = Object.assign(\n      styles.fill,\n      checked && styles.fillWhenChecked,\n      iconStyle,\n      disabled && styles.fillWhenDisabled\n    );\n\n    const uncheckedElement = React.isValidElement(uncheckedIcon) ?\n      React.cloneElement(uncheckedIcon, {\n        style: Object.assign(uncheckedStyles, uncheckedIcon.props.style),\n      }) : <RadioButtonOff style={uncheckedStyles} />;\n\n    const checkedElement = React.isValidElement(checkedIcon) ?\n      React.cloneElement(checkedIcon, {\n        style: Object.assign(checkedStyles, checkedIcon.props.style),\n      }) : <RadioButtonOn style={checkedStyles} />;\n\n    const mergedIconStyle = Object.assign(styles.icon, iconStyle);\n    const mergedLabelStyle = Object.assign(styles.label, labelStyle);\n\n    return (\n      <EnhancedSwitch\n        {...other}\n        ref=\"enhancedSwitch\"\n        inputType=\"radio\"\n        checked={checked}\n        switched={checked}\n        disabled={disabled}\n        rippleColor={styles.ripple.color}\n        iconStyle={mergedIconStyle}\n        labelStyle={mergedLabelStyle}\n        labelPosition={labelPosition}\n        onSwitch={this.handleSwitch}\n        switchElement={<div>{uncheckedElement}{checkedElement}</div>}\n      />\n    );\n  }\n}\n\nexport default RadioButton;\n"]}