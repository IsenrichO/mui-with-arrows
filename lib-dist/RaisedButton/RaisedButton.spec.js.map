{"version":3,"sources":["../../src/RaisedButton/RaisedButton.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","mountWithContext","testChildren","it","wrapper","ok","is","childAt","contains","props","ariaLabel","disabled","href","name","icon","find","label","strictEqual","children","wrappers","forEach","createWrapper","simulate","overlay","ref","button","findDOMNode","findRenderedDOMComponentWithTag","instance","clientHeight","equal","prop","fontSize","raisedButton","svgIcon","length","color","validateLabel","propTypes","message","undefined","state","hovered","setProps","foo","style"],"mappings":"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","file":"RaisedButton.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-dom/test-utils';\nimport {mount, shallow} from 'enzyme';\nimport {assert} from 'chai';\n\nimport RaisedButton from './RaisedButton';\nimport ActionAndroid from '../svg-icons/action/android';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<RaisedButton />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const mountWithContext = (node) => mount(node, {context: {muiTheme}});\n  const testChildren = <span className=\"unique\">Hello World</span>;\n\n  it('renders an enhanced button inside paper', () => {\n    const wrapper = shallowWithContext(\n      <RaisedButton>Button</RaisedButton>\n    );\n    assert.ok(wrapper.is('Paper'));\n    assert.ok(wrapper.childAt(0).is('EnhancedButton'));\n  });\n\n  it('renders children', () => {\n    const wrapper = shallowWithContext(\n      <RaisedButton>{testChildren}</RaisedButton>\n    );\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n  });\n\n  it('passes props to the enhanced button', () => {\n    const props = {\n      ariaLabel: 'Say hello world',\n      disabled: true,\n      href: 'http://google.com',\n      name: 'Hello World',\n    };\n\n    const wrapper = shallowWithContext(\n      <RaisedButton {...props}>Button</RaisedButton>\n    );\n\n    assert.ok(wrapper.childAt(0).is('EnhancedButton'));\n    assert.ok(wrapper.childAt(0).is(props));\n  });\n\n  it('renders a label with an icon', () => {\n    const wrapper = shallowWithContext(\n      <RaisedButton\n        icon={<span className=\"test-icon\" />}\n        label={<span className=\"test-label\">Hello</span>}\n      />\n    );\n    const icon = wrapper.find('.test-icon');\n    const label = wrapper.find('.test-label');\n    assert.ok(icon.is('span'));\n    assert.strictEqual(label.children().node, 'Hello', 'says hello');\n  });\n\n  it('renders a hover overlay of equal height to the button', () => {\n    const wrappers = [\n      () => mountWithContext(\n        <RaisedButton>Hello World</RaisedButton>\n      ),\n      () => mountWithContext(\n        <RaisedButton\n          backgroundColor=\"#a4c639\"\n          icon={<ActionAndroid />}\n        />\n      ),\n    ];\n\n    wrappers.forEach((createWrapper) => {\n      const wrapper = createWrapper();\n      wrapper.simulate('mouseEnter');\n\n      const overlay = wrapper.ref('overlay');\n      const button = ReactDOM.findDOMNode(\n        TestUtils.findRenderedDOMComponentWithTag(\n          wrapper.instance(),\n          'button'\n        )\n      );\n\n      assert.strictEqual(\n        overlay.node.clientHeight,\n        button.clientHeight,\n        'overlay height should match the button height'\n      );\n    });\n  });\n\n  it('inherits fontSize from theme', () => {\n    const wrapper = shallowWithContext(\n      <RaisedButton label=\"test\" />\n    );\n\n    assert.strictEqual(wrapper.contains('test'), true);\n    assert.equal(\n      wrapper.find('[children=\"test\"]').prop('style').fontSize,\n      muiTheme.raisedButton.fontSize\n    );\n  });\n\n  it('if an svg icon is provided, renders the icon with the correct color', () => {\n    const icon = <svg color=\"red\" />;\n    const wrapper = shallowWithContext(\n      <RaisedButton icon={icon} />\n    );\n\n    const svgIcon = wrapper.find('svg');\n    assert.strictEqual(svgIcon.length, 1, 'should have an svg icon');\n    assert.strictEqual(svgIcon.node.props.color, 'red', 'should have color set as the prop');\n  });\n\n  describe('validateLabel', () => {\n    const validateLabel = RaisedButton.propTypes.label;\n\n    it('should throw when using wrong label', () => {\n      assert.strictEqual(validateLabel({}, 'label', 'RaisedButton').message,\n        'Required prop label or children or icon was not specified in RaisedButton.',\n        'should return an error'\n      );\n    });\n\n    it('should not throw when using a valid label', () => {\n      assert.strictEqual(validateLabel({\n        label: 0,\n      }, 'label', 'RaisedButton'), undefined);\n    });\n  });\n\n  describe('hover state', () => {\n    it('should reset the hover state when disabled', () => {\n      const wrapper = shallowWithContext(\n        <RaisedButton label=\"foo\" />\n      );\n\n      wrapper.children().simulate('mouseEnter');\n      assert.strictEqual(wrapper.state().hovered, true, 'should respond to the event');\n      wrapper.setProps({\n        disabled: true,\n      });\n      assert.strictEqual(wrapper.state().hovered, false, 'should reset the state');\n    });\n  });\n\n  describe('prop: icon', () => {\n    it('should keep the style set on the icon', () => {\n      const wrapper = shallowWithContext(\n        <RaisedButton icon={<ActionAndroid style={{foo: 'bar'}} />} />\n      );\n\n      assert.strictEqual(wrapper.find(ActionAndroid).props().style.foo, 'bar');\n    });\n  });\n});\n"]}