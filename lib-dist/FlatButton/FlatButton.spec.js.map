{"version":3,"sources":["../../src/FlatButton/FlatButton.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","flatButtonTheme","flatButton","testChildren","it","wrapper","ok","is","contains","props","ariaLabel","disabled","href","name","icon","children","at","label","hasClass","strictEqual","style","color","primaryTextColor","find","prop","secondaryTextColor","backgroundColor","setState","hovered","focusRippleColor","touchRippleColor","validateLabel","propTypes","message","undefined","simulate","state","setProps","foo","target"],"mappings":"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","file":"FlatButton.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport {shallow} from 'enzyme';\nimport {assert} from 'chai';\n\nimport FlatButton from './FlatButton';\nimport getMuiTheme from '../styles/getMuiTheme';\nimport ActionAndroid from '../svg-icons/action/android';\n\ndescribe('<FlatButton />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const flatButtonTheme = muiTheme.flatButton;\n  const testChildren = <div className=\"unique\">Hello World</div>;\n\n  it('renders an enhanced button', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton>Button</FlatButton>\n    );\n    assert.ok(wrapper.is('EnhancedButton'));\n  });\n\n  it('renders children', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton>{testChildren}</FlatButton>\n    );\n    assert.ok(wrapper.contains(testChildren), 'should contain the children');\n  });\n\n  it('passes props to the enhanced button', () => {\n    const props = {\n      ariaLabel: 'Say hello world',\n      disabled: true,\n      href: 'http://google.com',\n      name: 'Hello World',\n    };\n\n    const wrapper = shallowWithContext(\n      <FlatButton {...props}>Button</FlatButton>\n    );\n\n    assert.ok(wrapper.is('EnhancedButton'));\n    assert.ok(wrapper.is(props));\n  });\n\n  it('renders a label with an icon before', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton\n        icon={<span className=\"test-icon\" />}\n        label=\"Hello\"\n      />\n    );\n    const icon = wrapper.children().at(0);\n    const label = wrapper.children().at(1);\n    assert.ok(icon.is('span'));\n    assert.ok(icon.hasClass('test-icon'));\n    assert.ok(label.is('FlatButtonLabel'));\n    assert.strictEqual(label.node.props.label, 'Hello', 'says hello');\n  });\n\n  it('renders a label with an icon after', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton\n        icon={<span className=\"test-icon\" />}\n        label=\"Hello\"\n        labelPosition=\"before\"\n      />\n    );\n    const icon = wrapper.children().at(1);\n    const label = wrapper.children().at(0);\n    assert.ok(icon.is('span'));\n    assert.ok(icon.hasClass('test-icon'));\n    assert.ok(label.is('FlatButtonLabel'));\n    assert.strictEqual(label.node.props.label, 'Hello', 'says hello');\n  });\n\n  it('colors the button the primary theme color', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton\n        label=\"Button\"\n        icon={<span className=\"test-icon\" />}\n        primary={true}\n      />\n    );\n    const icon = wrapper.children().at(0);\n    assert.ok(wrapper.is('EnhancedButton'));\n    assert.ok(wrapper.is({\n      style: {\n        color: flatButtonTheme.primaryTextColor,\n      },\n    }));\n    assert.ok(icon.is('span'));\n    assert.ok(icon.is({color: flatButtonTheme.primaryTextColor}));\n  });\n\n  it('colors the icon with the passed color in prop', () => {\n    const color = 'white';\n    const wrapper = shallowWithContext(\n      <FlatButton\n        backgroundColor=\"#a4c639\"\n        hoverColor=\"#8AA62F\"\n        icon={<ActionAndroid color={color} />}\n      />\n    );\n    const icon = wrapper.find('ActionAndroid');\n    assert.strictEqual(icon.prop('color'), color, 'icon should have same color as that of color prop');\n  });\n\n  it('colors the button the secondary theme color', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton secondary={true} icon={<span className=\"test-icon\" />}>Button</FlatButton>\n    );\n    assert.ok(wrapper.is('EnhancedButton'));\n    assert.ok(wrapper.is({\n      style: {\n        color: flatButtonTheme.secondaryTextColor,\n      },\n    }));\n  });\n\n  it('overrides hover and background color styles via props', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton\n        backgroundColor=\"rgba(159,159,159)\"\n        hoverColor=\"yellow\"\n        label=\"Button\"\n      />\n    );\n\n    assert.ok(wrapper.is({\n      style: {\n        backgroundColor: 'rgba(159,159,159)',\n      },\n    }), 'should have the custom background color');\n\n    wrapper.setState({hovered: true});\n\n    assert.ok(wrapper.is({\n      style: {\n        backgroundColor: 'yellow',\n      },\n    }), 'should have the custom hover background color');\n  });\n\n  it('overrides the ripple color via props', () => {\n    const wrapper = shallowWithContext(\n      <FlatButton rippleColor=\"yellow\" label=\"Button\" />\n    );\n    assert.strictEqual(wrapper.node.props.focusRippleColor, 'yellow', 'should be yellow');\n    assert.strictEqual(wrapper.node.props.touchRippleColor, 'yellow', 'should be yellow');\n  });\n\n  describe('validateLabel', () => {\n    const validateLabel = FlatButton.propTypes.label;\n\n    it('should throw when using wrong label', () => {\n      assert.strictEqual(validateLabel({}, 'label', 'FlatButton').message,\n        'Required prop label or children or icon was not specified in FlatButton.',\n        'should return an error'\n      );\n    });\n\n    it('should not throw when using a valid label', () => {\n      assert.strictEqual(validateLabel({\n        label: 0,\n      }, 'label', 'FlatButton'), undefined);\n    });\n  });\n\n  describe('hover state', () => {\n    it('should reset the hover state when disabled', () => {\n      const wrapper = shallowWithContext(\n        <FlatButton label=\"foo\" />\n      );\n\n      wrapper.simulate('mouseEnter');\n      assert.strictEqual(wrapper.state().hovered, true, 'should respond to the event');\n      wrapper.setProps({\n        disabled: true,\n      });\n      assert.strictEqual(wrapper.state().hovered, false, 'should reset the state');\n    });\n  });\n\n  describe('props: icon', () => {\n    it('should keep the style set on the icon', () => {\n      const wrapper = shallowWithContext(\n        <FlatButton icon={<ActionAndroid style={{foo: 'bar'}} />} />\n      );\n\n      assert.strictEqual(wrapper.find(ActionAndroid).props().style.foo, 'bar');\n    });\n  });\n\n  describe('props: other', () => {\n    it('should spread other properties to the root element', () => {\n      const wrapper = shallowWithContext(\n        <FlatButton target=\"_blank\" label=\"Button\" />\n      );\n\n      assert.strictEqual(wrapper.props().target, '_blank', 'should be _blank');\n    });\n  });\n});\n"]}