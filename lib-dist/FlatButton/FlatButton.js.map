{"version":3,"sources":["../../src/FlatButton/FlatButton.js"],"names":["validateLabel","props","propName","componentName","process","env","NODE_ENV","children","label","icon","Error","FlatButton","state","hovered","isKeyboardFocused","touch","handleKeyboardFocus","event","setState","onKeyboardFocus","handleMouseEnter","onMouseEnter","handleMouseLeave","onMouseLeave","handleTouchStart","onTouchStart","componentWillReceiveProps","nextProps","disabled","render","backgroundColor","fullWidth","hoverColor","labelStyle","labelPosition","primary","rippleColor","secondary","style","other","context","muiTheme","borderRadius","button","buttonHeight","height","buttonMinWidth","minWidth","buttonTextTransform","textTransform","flatButton","buttonFilterColor","buttonColor","color","disabledTextColor","fontSize","fontWeight","primaryTextColor","secondaryTextColor","textColor","defaultTextColor","defaultHoverColor","defaultRippleColor","buttonHoverColor","buttonRippleColor","buttonBackgroundColor","mergedRootStyles","lineHeight","transition","easeOut","userSelect","overflow","padding","margin","textAlign","iconCloned","labelStyleIcon","iconStyles","verticalAlign","marginLeft","marginRight","cloneElement","key","paddingRight","paddingLeft","mergedLabelStyles","letterSpacing","labelElement","undefined","enhancedButtonChildren","muiName","propTypes","string","node","className","containerElement","oneOfType","element","disableTouchRipple","bool","href","oneOf","object","func","onTouchTap","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"FlatButton.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport transitions from '../styles/transitions';\nimport {fade} from '../utils/colorManipulator';\nimport EnhancedButton from '../internal/EnhancedButton';\nimport FlatButtonLabel from './FlatButtonLabel';\n\nfunction validateLabel(props, propName, componentName) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.children && (props.label !== 0 && !props.label) && !props.icon) {\n      return new Error(`Required prop label or children or icon was not specified in ${componentName}.`);\n    }\n  }\n}\n\nclass FlatButton extends Component {\n  static muiName = 'FlatButton';\n\n  static propTypes = {\n    /**\n     * Color of button when mouse is not hovering over it.\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * This is what will be displayed inside the button.\n     * If a label is specified, the text within the label prop will\n     * be displayed. Otherwise, the component will expect children\n     * which will then be displayed. (In our example,\n     * we are nesting an `<input type=\"file\" />` and a `span`\n     * that acts as our label to be displayed.) This only\n     * applies to flat and raised buttons.\n     */\n    children: PropTypes.node,\n    /**\n     * The CSS class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * The element to use as the container for the FlatButton. Either a string to\n     * use a DOM element or a ReactElement. This is useful for wrapping the\n     * FlatButton in a custom Link component. If a ReactElement is given, ensure\n     * that it passes all of its given props through to the underlying DOM\n     * element and renders its children prop for proper integration.\n     */\n    containerElement: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    /**\n     * If true, the element's ripple effect will be disabled.\n     */\n    disableTouchRipple: PropTypes.bool,\n    /**\n     * Disables the button if set to true.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * If true, the button will take up the full width of its container.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Color of button when mouse hovers over.\n     */\n    hoverColor: PropTypes.string,\n    /**\n     * The URL to link to when the button is clicked.\n     */\n    href: PropTypes.string,\n    /**\n     * Use this property to display an icon.\n     */\n    icon: PropTypes.node,\n    /**\n     * Label for the button.\n     */\n    label: validateLabel,\n    /**\n     * Place label before or after the passed children.\n     */\n    labelPosition: PropTypes.oneOf([\n      'before',\n      'after',\n    ]),\n    /**\n     * Override the inline-styles of the button's label element.\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * Callback function fired when the element is focused or blurred by the keyboard.\n     *\n     * @param {object} event `focus` or `blur` event targeting the element.\n     * @param {boolean} isKeyboardFocused Indicates whether the element is focused.\n     */\n    onKeyboardFocus: PropTypes.func,\n    /** @ignore */\n    onMouseEnter: PropTypes.func,\n    /** @ignore */\n    onMouseLeave: PropTypes.func,\n    /** @ignore */\n    onTouchStart: PropTypes.func,\n    /**\n     * Callback function fired when the button is touch-tapped.\n     *\n     * @param {object} event TouchTap event targeting the button.\n     */\n    onTouchTap: PropTypes.func,\n    /**\n     * If true, colors button according to\n     * primaryTextColor from the Theme.\n     */\n    primary: PropTypes.bool,\n    /**\n     * Color for the ripple after button is clicked.\n     */\n    rippleColor: PropTypes.string,\n    /**\n     * If true, colors button according to secondaryTextColor from the theme.\n     * The primary prop has precendent if set to true.\n     */\n    secondary: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    disabled: false,\n    fullWidth: false,\n    labelStyle: {},\n    labelPosition: 'after',\n    onKeyboardFocus: () => {},\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onTouchStart: () => {},\n    primary: false,\n    secondary: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    hovered: false,\n    isKeyboardFocused: false,\n    touch: false,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.disabled) {\n      this.setState({\n        hovered: false,\n      });\n    }\n  }\n\n  handleKeyboardFocus = (event, isKeyboardFocused) => {\n    this.setState({isKeyboardFocused: isKeyboardFocused});\n    this.props.onKeyboardFocus(event, isKeyboardFocused);\n  };\n\n  handleMouseEnter = (event) => {\n    // Cancel hover styles for touch devices\n    if (!this.state.touch) this.setState({hovered: true});\n    this.props.onMouseEnter(event);\n  };\n\n  handleMouseLeave = (event) => {\n    this.setState({hovered: false});\n    this.props.onMouseLeave(event);\n  };\n\n  handleTouchStart = (event) => {\n    this.setState({touch: true});\n    this.props.onTouchStart(event);\n  };\n\n  render() {\n    const {\n      backgroundColor,\n      children,\n      disabled,\n      fullWidth,\n      hoverColor,\n      icon,\n      label,\n      labelStyle,\n      labelPosition,\n      primary,\n      rippleColor,\n      secondary,\n      style,\n      ...other\n    } = this.props;\n\n    const {\n      borderRadius,\n      button: {\n        height: buttonHeight,\n        minWidth: buttonMinWidth,\n        textTransform: buttonTextTransform,\n      },\n      flatButton: {\n        buttonFilterColor,\n        color: buttonColor,\n        disabledTextColor,\n        fontSize,\n        fontWeight,\n        primaryTextColor,\n        secondaryTextColor,\n        textColor,\n        textTransform = buttonTextTransform || 'uppercase',\n      },\n    } = this.context.muiTheme;\n    const defaultTextColor = disabled ? disabledTextColor :\n      primary ? primaryTextColor :\n      secondary ? secondaryTextColor :\n      textColor;\n\n    const defaultHoverColor = fade(buttonFilterColor, 0.2);\n    const defaultRippleColor = buttonFilterColor;\n    const buttonHoverColor = hoverColor || defaultHoverColor;\n    const buttonRippleColor = rippleColor || defaultRippleColor;\n    const buttonBackgroundColor = backgroundColor || buttonColor;\n    const hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;\n\n    const mergedRootStyles = Object.assign({}, {\n      height: buttonHeight,\n      lineHeight: `${buttonHeight}px`,\n      minWidth: fullWidth ? '100%' : buttonMinWidth,\n      color: defaultTextColor,\n      transition: transitions.easeOut(),\n      borderRadius,\n      userSelect: 'none',\n      overflow: 'hidden',\n      backgroundColor: hovered ? buttonHoverColor : buttonBackgroundColor,\n      padding: 0,\n      margin: 0,\n      textAlign: 'center',\n    }, style);\n\n    let iconCloned;\n    const labelStyleIcon = {};\n\n    if (icon) {\n      const iconStyles = Object.assign({\n        verticalAlign: 'middle',\n        marginLeft: label && labelPosition !== 'before' ? 12 : 0,\n        marginRight: label && labelPosition === 'before' ? 12 : 0,\n      }, icon.props.style);\n      iconCloned = React.cloneElement(icon, {\n        color: icon.props.color || mergedRootStyles.color,\n        style: iconStyles,\n        key: 'iconCloned',\n      });\n\n      if (labelPosition === 'before') {\n        labelStyleIcon.paddingRight = 8;\n      } else {\n        labelStyleIcon.paddingLeft = 8;\n      }\n    }\n\n    const mergedLabelStyles = Object.assign({\n      letterSpacing: 0,\n      textTransform: textTransform,\n      fontWeight: fontWeight,\n      fontSize: fontSize,\n    }, labelStyleIcon, labelStyle);\n\n    const labelElement = label ? (\n      <FlatButtonLabel key=\"labelElement\" label={label} style={mergedLabelStyles} />\n    ) : undefined;\n\n    // Place label before or after children.\n    const enhancedButtonChildren = labelPosition === 'before' ?\n    [\n      labelElement,\n      iconCloned,\n      children,\n    ] :\n    [\n      children,\n      iconCloned,\n      labelElement,\n    ];\n\n    return (\n      <EnhancedButton\n        {...other}\n        disabled={disabled}\n        focusRippleColor={buttonRippleColor}\n        focusRippleOpacity={0.3}\n        onKeyboardFocus={this.handleKeyboardFocus}\n        onMouseLeave={this.handleMouseLeave}\n        onMouseEnter={this.handleMouseEnter}\n        onTouchStart={this.handleTouchStart}\n        style={mergedRootStyles}\n        touchRippleColor={buttonRippleColor}\n        touchRippleOpacity={0.3}\n      >\n        {enhancedButtonChildren}\n      </EnhancedButton>\n    );\n  }\n}\n\nexport default FlatButton;\n"]}