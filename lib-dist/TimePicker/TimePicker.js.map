{"version":3,"sources":["../../src/TimePicker/TimePicker.js"],"names":["emptyTime","Date","setHours","setMinutes","setSeconds","setMilliseconds","TimePicker","state","time","dialogTime","handleAcceptDialog","setState","props","onChange","handleFocusInput","event","target","blur","onFocus","handleTouchTapInput","preventDefault","disabled","openDialog","onTouchTap","componentWillMount","isControlled","getControlledTime","defaultTime","componentWillReceiveProps","nextProps","value","focus","refs","dialogWindow","show","result","render","autoOk","cancelLabel","dialogBodyStyle","dialogStyle","format","okLabel","onShow","onDismiss","pedantic","style","textFieldStyle","other","prepareStyles","context","muiTheme","propTypes","bool","node","object","oneOf","func","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"TimePicker.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TimePickerDialog from './TimePickerDialog';\nimport TextField from '../TextField';\nimport {formatTime} from './timeUtils';\n\nconst emptyTime = new Date();\nemptyTime.setHours(0);\nemptyTime.setMinutes(0);\nemptyTime.setSeconds(0);\nemptyTime.setMilliseconds(0);\n\nclass TimePicker extends Component {\n  static propTypes = {\n    /**\n     * If true, automatically accept and close the picker on set minutes.\n     */\n    autoOk: PropTypes.bool,\n    /**\n     * Override the label of the 'Cancel' button.\n     */\n    cancelLabel: PropTypes.node,\n    /**\n     * The initial time value of the TimePicker.\n     */\n    defaultTime: PropTypes.object,\n    /**\n     * Override the inline-styles of TimePickerDialog's body element.\n     */\n    dialogBodyStyle: PropTypes.object,\n    /**\n     * Override the inline-styles of TimePickerDialog's root element.\n     */\n    dialogStyle: PropTypes.object,\n    /**\n     * If true, the TimePicker is disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Tells the component to display the picker in `ampm` (12hr) format or `24hr` format.\n     */\n    format: PropTypes.oneOf(['ampm', '24hr']),\n    /**\n     * Override the label of the 'OK' button.\n     */\n    okLabel: PropTypes.node,\n    /**\n     * Callback function that is fired when the time value changes. The time value is passed in a Date Object.\n     * Since there is no particular event associated with the change the first argument will always be null\n     * and the second argument will be the new Date instance.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback function fired when the TimePicker dialog is dismissed.\n     */\n    onDismiss: PropTypes.func,\n    /**\n     * Callback function fired when the TimePicker `TextField` gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback function fired when the TimePicker dialog is shown.\n     */\n    onShow: PropTypes.func,\n    /**\n     * Callback function fired when the TimePicker is tapped or clicked.\n     */\n    onTouchTap: PropTypes.func,\n    /**\n     * If true, uses (\"noon\" / \"midnight\") instead of (\"12 a.m.\" / \"12 p.m.\").\n     *\n     * It's technically more correct to refer to \"12 noon\" and \"12 midnight\" rather than \"12 a.m.\" and \"12 p.m.\"\n     * and it avoids confusion between different locales. By default (for compatibility reasons) TimePicker uses\n     * (\"12 a.m.\" / \"12 p.m.\").\n     */\n    pedantic: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * Override the inline-styles of TimePicker's TextField element.\n     */\n    textFieldStyle: PropTypes.object,\n    /**\n     * Sets the time for the Time Picker programmatically.\n     */\n    value: PropTypes.object,\n  };\n\n  static defaultProps = {\n    autoOk: false,\n    cancelLabel: 'Cancel',\n    defaultTime: null,\n    disabled: false,\n    format: 'ampm',\n    okLabel: 'OK',\n    pedantic: false,\n    style: {},\n    value: null,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    time: null,\n    dialogTime: new Date(),\n  };\n\n  componentWillMount() {\n    this.setState({\n      time: this.isControlled() ? this.getControlledTime() : this.props.defaultTime,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        time: this.getControlledTime(nextProps),\n      });\n    }\n  }\n\n  /**\n   * Alias for `openDialog()` for an api consistent with TextField.\n   */\n  focus() {\n    this.openDialog();\n  }\n\n  openDialog() {\n    this.setState({\n      dialogTime: this.state.time,\n    });\n    this.refs.dialogWindow.show();\n  }\n\n  handleAcceptDialog = (time) => {\n    this.setState({\n      time: time,\n    });\n    if (this.props.onChange) this.props.onChange(null, time);\n  };\n\n  handleFocusInput = (event) => {\n    event.target.blur();\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n  };\n\n  handleTouchTapInput = (event) => {\n    event.preventDefault();\n\n    if (!this.props.disabled) {\n      this.openDialog();\n    }\n\n    if (this.props.onTouchTap) {\n      this.props.onTouchTap(event);\n    }\n  };\n\n  isControlled() {\n    return this.props.value !== null;\n  }\n\n  getControlledTime(props = this.props) {\n    let result = null;\n    if (props.value instanceof Date) {\n      result = props.value;\n    }\n    return result;\n  }\n\n  render() {\n    const {\n      autoOk,\n      cancelLabel,\n      defaultTime, // eslint-disable-line no-unused-vars\n      dialogBodyStyle,\n      dialogStyle,\n      format,\n      okLabel,\n      onFocus, // eslint-disable-line no-unused-vars\n      onTouchTap, // eslint-disable-line no-unused-vars\n      onShow,\n      onDismiss,\n      pedantic,\n      style,\n      textFieldStyle,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const {time} = this.state;\n\n    return (\n      <div style={prepareStyles(Object.assign({}, style))}>\n        <TextField\n          {...other}\n          style={textFieldStyle}\n          ref=\"input\"\n          value={time === emptyTime ? null : formatTime(time, format, pedantic)}\n          onFocus={this.handleFocusInput}\n          onTouchTap={this.handleTouchTapInput}\n        />\n        <TimePickerDialog\n          ref=\"dialogWindow\"\n          bodyStyle={dialogBodyStyle}\n          initialTime={this.state.dialogTime}\n          onAccept={this.handleAcceptDialog}\n          onShow={onShow}\n          onDismiss={onDismiss}\n          format={format}\n          okLabel={okLabel}\n          cancelLabel={cancelLabel}\n          autoOk={autoOk}\n          style={dialogStyle}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TimePicker;\n"]}