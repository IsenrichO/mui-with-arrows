{"version":3,"sources":["../../src/TimePicker/ClockMinutes.js"],"names":["ClockMinutes","handleUp","event","preventDefault","setClock","nativeEvent","handleMove","isMousePressed","handleTouch","changedTouches","type","componentDidMount","clockElement","refs","mask","center","x","offsetWidth","y","offsetHeight","basePoint","buttons","which","finish","offsetX","offset","offsetY","minutes","getMinutes","props","onChange","step","cx","cy","atan","Math","atan2","deg","round","value","floor","getMinuteNumbers","i","push","selectedMinutes","initialMinutes","hasSelected","numbers","map","minute","isSelected","selected","render","styles","root","height","width","borderRadius","position","pointerEvents","boxSizing","hitMask","prepareStyles","context","muiTheme","propTypes","number","func","defaultProps","Date","contextTypes","object","isRequired"],"mappings":"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","file":"ClockMinutes.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ClockNumber from './ClockNumber';\nimport ClockPointer from './ClockPointer';\nimport {getTouchEventOffsetValues, rad2deg} from './timeUtils';\n\nclass ClockMinutes extends Component {\n  static propTypes = {\n    initialMinutes: PropTypes.number,\n    onChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    initialMinutes: new Date().getMinutes(),\n    onChange: () => {},\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    const clockElement = this.refs.mask;\n\n    this.center = {\n      x: clockElement.offsetWidth / 2,\n      y: clockElement.offsetHeight / 2,\n    };\n\n    this.basePoint = {\n      x: this.center.x,\n      y: 0,\n    };\n  }\n\n  isMousePressed(event) {\n    if (typeof event.buttons === 'undefined') {\n      return event.nativeEvent.which;\n    }\n    return event.buttons;\n  }\n\n  handleUp = (event) => {\n    event.preventDefault();\n    this.setClock(event.nativeEvent, true);\n  };\n\n  handleMove = (event) => {\n    event.preventDefault();\n    if (this.isMousePressed(event) !== 1 ) {\n      return;\n    }\n    this.setClock(event.nativeEvent, false);\n  };\n\n  handleTouch = (event) => {\n    event.preventDefault();\n    this.setClock(event.changedTouches[0], event.type === 'touchend');\n  };\n\n  setClock(event, finish) {\n    if (typeof event.offsetX === 'undefined') {\n      const offset = getTouchEventOffsetValues(event);\n\n      event.offsetX = offset.offsetX;\n      event.offsetY = offset.offsetY;\n    }\n\n    const minutes = this.getMinutes(event.offsetX, event.offsetY);\n\n    this.props.onChange(minutes, finish);\n  }\n\n  getMinutes(offsetX, offsetY) {\n    const step = 6;\n    const x = offsetX - this.center.x;\n    const y = offsetY - this.center.y;\n    const cx = this.basePoint.x - this.center.x;\n    const cy = this.basePoint.y - this.center.y;\n\n    const atan = Math.atan2(cx, cy) - Math.atan2(x, y);\n\n    let deg = rad2deg(atan);\n    deg = Math.round(deg / step ) * step;\n    deg %= 360;\n\n    const value = Math.floor(deg / step) || 0;\n\n    return value;\n  }\n\n  getMinuteNumbers() {\n    const minutes = [];\n    for (let i = 0; i < 12; i++) {\n      minutes.push(i * 5);\n    }\n    const selectedMinutes = this.props.initialMinutes;\n    let hasSelected = false;\n\n    const numbers = minutes.map((minute) => {\n      const isSelected = selectedMinutes === minute;\n      if (isSelected) {\n        hasSelected = true;\n      }\n      return (\n        <ClockNumber\n          key={minute}\n          isSelected={isSelected}\n          type=\"minute\"\n          value={minute}\n        />\n      );\n    });\n\n    return {\n      numbers: numbers,\n      hasSelected: hasSelected,\n      selected: selectedMinutes,\n    };\n  }\n\n  render() {\n    const styles = {\n      root: {\n        height: '100%',\n        width: '100%',\n        borderRadius: '100%',\n        position: 'relative',\n        pointerEvents: 'none',\n        boxSizing: 'border-box',\n      },\n\n      hitMask: {\n        height: '100%',\n        width: '100%',\n        pointerEvents: 'auto',\n      },\n    };\n\n    const {prepareStyles} = this.context.muiTheme;\n    const minutes = this.getMinuteNumbers();\n\n    return (\n      <div ref=\"clock\" style={prepareStyles(styles.root)} >\n        <ClockPointer value={minutes.selected} type=\"minute\" hasSelected={minutes.hasSelected} />\n        {minutes.numbers}\n        <div\n          ref=\"mask\"\n          style={prepareStyles(styles.hitMask)}\n          onTouchMove={this.handleTouch}\n          onTouchEnd={this.handleTouch}\n          onMouseUp={this.handleUp}\n          onMouseMove={this.handleMove}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ClockMinutes;\n"]}