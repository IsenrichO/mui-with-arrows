{"version":3,"sources":["../../src/TimePicker/timeUtils.js"],"names":["addHours","addMinutes","addSeconds","formatTime","rad2deg","getTouchEventOffsetValues","isInner","d","hours","newDate","clone","setHours","getHours","minutes","setMinutes","getMinutes","seconds","setSeconds","Date","getTime","date","format","pedantic","mins","toString","isAM","additional","length","rad","event","el","target","boundingRect","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","props","type","value"],"mappings":";;;;;QAAgBA,Q,GAAAA,Q;QAMAC,U,GAAAA,U;QAMAC,U,GAAAA,U;QAiBAC,U,GAAAA,U;QA+BAC,O,GAAAA,O;QAIAC,yB,GAAAA,yB;QAUAC,O,GAAAA,O;AA1ET,SAASN,QAAT,CAAkBO,CAAlB,EAAqBC,KAArB,EAA4B;AACjC,MAAMC,UAAUC,MAAMH,CAAN,CAAhB;AACAE,UAAQE,QAAR,CAAiBJ,EAAEK,QAAF,KAAeJ,KAAhC;AACA,SAAOC,OAAP;AACD;;AAEM,SAASR,UAAT,CAAoBM,CAApB,EAAuBM,OAAvB,EAAgC;AACrC,MAAMJ,UAAUC,MAAMH,CAAN,CAAhB;AACAE,UAAQK,UAAR,CAAmBP,EAAEQ,UAAF,KAAiBF,OAApC;AACA,SAAOJ,OAAP;AACD;;AAEM,SAASP,UAAT,CAAoBK,CAApB,EAAuBS,OAAvB,EAAgC;AACrC,MAAMP,UAAUC,MAAMH,CAAN,CAAhB;AACAE,UAAQQ,UAAR,CAAmBV,EAAEQ,UAAF,KAAiBC,OAApC;AACA,SAAOP,OAAP;AACD;;AAED,SAASC,KAAT,CAAeH,CAAf,EAAkB;AAChB,SAAO,IAAIW,IAAJ,CAASX,EAAEY,OAAF,EAAT,CAAP;AACD;;AAED;;;;;;;AAOO,SAAShB,UAAT,CAAoBiB,IAApB,EAA6D;AAAA,MAAnCC,MAAmC,uEAA1B,MAA0B;AAAA,MAAlBC,QAAkB,uEAAP,KAAO;;AAClE,MAAI,CAACF,IAAL,EAAW,OAAO,EAAP;AACX,MAAIZ,QAAQY,KAAKR,QAAL,EAAZ;AACA,MAAIW,OAAOH,KAAKL,UAAL,GAAkBS,QAAlB,EAAX;;AAEA,MAAIH,WAAW,MAAf,EAAuB;AACrB,QAAMI,OAAOjB,QAAQ,EAArB;AACAA,YAAQA,QAAQ,EAAhB;AACA,QAAMkB,aAAaD,OAAO,KAAP,GAAe,KAAlC;AACAjB,YAAQ,CAACA,SAAS,EAAV,EAAcgB,QAAd,EAAR;;AAEA,QAAID,KAAKI,MAAL,GAAc,CAAlB,EAAsBJ,aAAWA,IAAX;;AAEtB,QAAID,QAAJ,EAAc;AACZ;AACA,UAAId,UAAU,IAAV,IAAkBe,SAAS,IAA/B,EAAqC;AACnC,eAAOG,eAAe,KAAf,GAAuB,SAAvB,GAAmC,aAA1C;AACD;AACF;;AAED,WAAOlB,SAASe,SAAS,IAAT,GAAgB,EAAhB,SAAyBA,IAAlC,IAA4CG,UAAnD;AACD;;AAEDlB,UAAQA,MAAMgB,QAAN,EAAR;;AAEA,MAAIhB,MAAMmB,MAAN,GAAe,CAAnB,EAAsBnB,cAAYA,KAAZ;AACtB,MAAIe,KAAKI,MAAL,GAAc,CAAlB,EAAqBJ,aAAWA,IAAX;;AAErB,SAAUf,KAAV,SAAmBe,IAAnB;AACD;;AAEM,SAASnB,OAAT,CAAiBwB,GAAjB,EAAsB;AAC3B,SAAOA,MAAM,iBAAb;AACD;;AAEM,SAASvB,yBAAT,CAAmCwB,KAAnC,EAA0C;AAC/C,MAAMC,KAAKD,MAAME,MAAjB;AACA,MAAMC,eAAeF,GAAGG,qBAAH,EAArB;;AAEA,SAAO;AACLC,aAASL,MAAMM,OAAN,GAAgBH,aAAaI,IADjC;AAELC,aAASR,MAAMS,OAAN,GAAgBN,aAAaO;AAFjC,GAAP;AAID;;AAEM,SAASjC,OAAT,CAAiBkC,KAAjB,EAAwB;AAC7B,MAAIA,MAAMC,IAAN,KAAe,MAAnB,EAA4B;AAC1B,WAAO,KAAP;AACD;AACD,SAAOD,MAAME,KAAN,GAAc,CAAd,IAAmBF,MAAME,KAAN,GAAc,EAAxC;AACD","file":"timeUtils.js","sourcesContent":["export function addHours(d, hours) {\n  const newDate = clone(d);\n  newDate.setHours(d.getHours() + hours);\n  return newDate;\n}\n\nexport function addMinutes(d, minutes) {\n  const newDate = clone(d);\n  newDate.setMinutes(d.getMinutes() + minutes);\n  return newDate;\n}\n\nexport function addSeconds(d, seconds) {\n  const newDate = clone(d);\n  newDate.setSeconds(d.getMinutes() + seconds);\n  return newDate;\n}\n\nfunction clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * @param date [Date] A Date object.\n * @param format [String] One of 'ampm', '24hr', defaults to 'ampm'.\n * @param pedantic [Boolean] Check time-picker/time-picker.jsx file.\n *\n * @return String A string representing the formatted time.\n */\nexport function formatTime(date, format = 'ampm', pedantic = false) {\n  if (!date) return '';\n  let hours = date.getHours();\n  let mins = date.getMinutes().toString();\n\n  if (format === 'ampm') {\n    const isAM = hours < 12;\n    hours = hours % 12;\n    const additional = isAM ? ' am' : ' pm';\n    hours = (hours || 12).toString();\n\n    if (mins.length < 2 ) mins = `0${mins}`;\n\n    if (pedantic) {\n      // Treat midday/midnight specially http://www.nist.gov/pml/div688/times.cfm\n      if (hours === '12' && mins === '00') {\n        return additional === ' pm' ? '12 noon' : '12 midnight';\n      }\n    }\n\n    return hours + (mins === '00' ? '' : `:${mins}`) + additional;\n  }\n\n  hours = hours.toString();\n\n  if (hours.length < 2) hours = `0${hours}`;\n  if (mins.length < 2) mins = `0${mins}`;\n\n  return `${hours}:${mins}`;\n}\n\nexport function rad2deg(rad) {\n  return rad * 57.29577951308232;\n}\n\nexport function getTouchEventOffsetValues(event) {\n  const el = event.target;\n  const boundingRect = el.getBoundingClientRect();\n\n  return {\n    offsetX: event.clientX - boundingRect.left,\n    offsetY: event.clientY - boundingRect.top,\n  };\n}\n\nexport function isInner(props) {\n  if (props.type !== 'hour' ) {\n    return false;\n  }\n  return props.value < 1 || props.value > 12 ;\n}\n"]}