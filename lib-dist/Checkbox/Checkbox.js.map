{"version":3,"sources":["../../src/Checkbox/Checkbox.js"],"names":["getStyles","props","context","checkbox","muiTheme","checkboxSize","icon","height","width","check","position","opacity","transform","transitionOrigin","transition","easeOut","fill","checkedColor","checkWhenSwitched","checkWhenDisabled","disabledColor","box","boxColor","boxWhenSwitched","boxWhenDisabled","checked","label","color","disabled","labelDisabledColor","labelColor","Checkbox","state","switched","handleStateChange","newSwitched","setState","handleCheck","event","isInputChecked","onCheck","componentWillMount","defaultChecked","valueLink","value","componentWillReceiveProps","nextProps","isChecked","refs","enhancedSwitch","isSwitched","setChecked","newCheckedValue","setSwitched","render","iconStyle","checkedIcon","uncheckedIcon","other","styles","boxStyles","checkStyles","checkedElement","cloneElement","style","createElement","unCheckedElement","checkboxElement","rippleColor","mergedIconStyle","labelStyle","enhancedSwitchProps","ref","inputType","switchElement","onSwitch","onParentShouldUpdate","labelPosition","propTypes","bool","element","object","inputStyle","oneOf","func","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"Checkbox.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport EnhancedSwitch from '../internal/EnhancedSwitch';\nimport transitions from '../styles/transitions';\nimport CheckboxOutline from '../svg-icons/toggle/check-box-outline-blank';\nimport CheckboxChecked from '../svg-icons/toggle/check-box';\n\nfunction getStyles(props, context) {\n  const {checkbox} = context.muiTheme;\n  const checkboxSize = 24;\n\n  return {\n    icon: {\n      height: checkboxSize,\n      width: checkboxSize,\n    },\n    check: {\n      position: 'absolute',\n      opacity: 0,\n      transform: 'scale(0)',\n      transitionOrigin: '50% 50%',\n      transition: `${transitions.easeOut('450ms', 'opacity', '0ms')}, ${\n          transitions.easeOut('0ms', 'transform', '450ms')\n        }`,\n      fill: checkbox.checkedColor,\n    },\n    checkWhenSwitched: {\n      opacity: 1,\n      transform: 'scale(1)',\n      transition: `${transitions.easeOut('0ms', 'opacity', '0ms')}, ${\n          transitions.easeOut('800ms', 'transform', '0ms')\n        }`,\n    },\n    checkWhenDisabled: {\n      fill: checkbox.disabledColor,\n    },\n    box: {\n      position: 'absolute',\n      opacity: 1,\n      fill: checkbox.boxColor,\n      transition: transitions.easeOut('1000ms', 'opacity', '200ms'),\n    },\n    boxWhenSwitched: {\n      opacity: 0,\n      transition: transitions.easeOut('650ms', 'opacity', '150ms'),\n      fill: checkbox.checkedColor,\n    },\n    boxWhenDisabled: {\n      fill: props.checked ? 'transparent' : checkbox.disabledColor,\n    },\n    label: {\n      color: props.disabled ? checkbox.labelDisabledColor : checkbox.labelColor,\n    },\n  };\n}\n\nclass Checkbox extends Component {\n  static propTypes = {\n    /**\n     * Checkbox is checked if true.\n     */\n    checked: PropTypes.bool,\n    /**\n     * The SvgIcon to use for the checked state.\n     * This is useful to create icon toggles.\n     */\n    checkedIcon: PropTypes.element,\n    /**\n     * The default state of our checkbox component.\n     * **Warning:** This cannot be used in conjunction with `checked`.\n     * Decide between using a controlled or uncontrolled input element and remove one of these props.\n     * More info: https://fb.me/react-controlled-components\n     */\n    defaultChecked: PropTypes.bool,\n    /**\n     * Disabled if true.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Overrides the inline-styles of the icon element.\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * Overrides the inline-styles of the input element.\n     */\n    inputStyle: PropTypes.object,\n    /**\n     * Where the label will be placed next to the checkbox.\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Overrides the inline-styles of the Checkbox element label.\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * Callback function that is fired when the checkbox is checked.\n     *\n     * @param {object} event `change` event targeting the underlying checkbox `input`.\n     * @param {boolean} isInputChecked The `checked` value of the underlying checkbox `input`.\n     */\n    onCheck: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The SvgIcon to use for the unchecked state.\n     * This is useful to create icon toggles.\n     */\n    uncheckedIcon: PropTypes.element,\n    /**\n     * ValueLink for when using controlled checkbox.\n     */\n    valueLink: PropTypes.object,\n  };\n\n  static defaultProps = {\n    labelPosition: 'right',\n    disabled: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  state = {\n    switched: false,\n  };\n\n  componentWillMount() {\n    const {checked, defaultChecked, valueLink} = this.props;\n\n    if (checked || defaultChecked || (valueLink && valueLink.value)) {\n      this.setState({\n        switched: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.checked !== nextProps.checked) {\n      this.setState({\n        switched: nextProps.checked,\n      });\n    }\n  }\n\n  isChecked() {\n    return this.refs.enhancedSwitch.isSwitched();\n  }\n\n  setChecked(newCheckedValue) {\n    this.refs.enhancedSwitch.setSwitched(newCheckedValue);\n  }\n\n  handleStateChange = (newSwitched) => {\n    this.setState({\n      switched: newSwitched,\n    });\n  };\n\n  handleCheck = (event, isInputChecked) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, isInputChecked);\n    }\n  };\n\n  render() {\n    const {\n      iconStyle,\n      onCheck, // eslint-disable-line no-unused-vars\n      checkedIcon,\n      uncheckedIcon,\n      ...other\n    } = this.props;\n    const styles = getStyles(this.props, this.context);\n    const boxStyles =\n      Object.assign(\n        styles.box,\n        this.state.switched && styles.boxWhenSwitched,\n        iconStyle,\n        this.props.disabled && styles.boxWhenDisabled);\n    const checkStyles =\n      Object.assign(\n        styles.check,\n        this.state.switched && styles.checkWhenSwitched,\n        iconStyle,\n        this.props.disabled && styles.checkWhenDisabled);\n\n    const checkedElement = checkedIcon ? React.cloneElement(checkedIcon, {\n      style: Object.assign(checkStyles, checkedIcon.props.style),\n    }) : React.createElement(CheckboxChecked, {\n      style: checkStyles,\n    });\n\n    const unCheckedElement = uncheckedIcon ? React.cloneElement(uncheckedIcon, {\n      style: Object.assign(boxStyles, uncheckedIcon.props.style),\n    }) : React.createElement(CheckboxOutline, {\n      style: boxStyles,\n    });\n\n    const checkboxElement = (\n      <div>\n        {unCheckedElement}\n        {checkedElement}\n      </div>\n    );\n\n    const rippleColor = this.state.switched ? checkStyles.fill : boxStyles.fill;\n    const mergedIconStyle = Object.assign(styles.icon, iconStyle);\n\n    const labelStyle = Object.assign(\n      styles.label,\n      this.props.labelStyle\n    );\n\n    const enhancedSwitchProps = {\n      ref: 'enhancedSwitch',\n      inputType: 'checkbox',\n      switched: this.state.switched,\n      switchElement: checkboxElement,\n      rippleColor: rippleColor,\n      iconStyle: mergedIconStyle,\n      onSwitch: this.handleCheck,\n      labelStyle: labelStyle,\n      onParentShouldUpdate: this.handleStateChange,\n      labelPosition: this.props.labelPosition,\n    };\n\n    return (\n      <EnhancedSwitch\n        {...other}\n        {...enhancedSwitchProps}\n      />\n    );\n  }\n}\n\nexport default Checkbox;\n"]}