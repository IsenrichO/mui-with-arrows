{"version":3,"sources":["../../src/Checkbox/Checkbox.spec.js"],"names":["describe","muiTheme","shallowWithContext","node","context","mountWithContext","childContextTypes","object","it","wrapper","enhancedSwitch","find","svgs","prop","props","children","checkMarkNode","ok","strictEqual","type","displayName","style","opacity","notOk","beforeEach","input","checked","simulate","CheckboxUncontrolled","handleCheck","setState","render","switched"],"mappings":"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","file":"Checkbox.spec.js","sourcesContent":["/* eslint-env mocha */\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {shallow, mount} from 'enzyme';\nimport {assert} from 'chai';\nimport Checkbox from './Checkbox';\nimport getMuiTheme from '../styles/getMuiTheme';\n\ndescribe('<Checkbox />', () => {\n  const muiTheme = getMuiTheme();\n  const shallowWithContext = (node) => shallow(node, {context: {muiTheme}});\n  const mountWithContext = (node) => mount(node, {\n    context: {muiTheme},\n    childContextTypes: {muiTheme: PropTypes.object},\n  });\n\n  describe('props: defaultChecked', () => {\n    it('should display checkmark when checked by default', () => {\n      const wrapper = shallowWithContext(\n        <Checkbox defaultChecked={true} />\n      );\n\n      const enhancedSwitch = wrapper.find('EnhancedSwitch');\n      const svgs = wrapper.prop('switchElement').props.children;\n      const checkMarkNode = shallow(svgs[1]);\n\n      assert.ok(enhancedSwitch.prop('switched'));\n      assert.strictEqual(svgs[1].type.displayName, 'ToggleCheckBox', 'Should use the right icon.');\n      assert.strictEqual(checkMarkNode.props().style.opacity, 1);\n    });\n\n    it('should NOT display checkmark when not checked by default', () => {\n      const wrapper = shallowWithContext(\n        <Checkbox defaultChecked={false} />\n      );\n\n      const enhancedSwitch = wrapper.find('EnhancedSwitch');\n      const svgs = wrapper.prop('switchElement').props.children;\n      const checkMarkNode = shallow(svgs[1]);\n\n      assert.notOk(enhancedSwitch.prop('switched'));\n      assert.strictEqual(svgs[1].type.displayName, 'ToggleCheckBox', 'Should use the right icon.');\n      assert.strictEqual(checkMarkNode.props().style.opacity, 0);\n    });\n\n    describe('when initially unchecked', () => {\n      let wrapper;\n\n      beforeEach(() => {\n        wrapper = mountWithContext(\n          <Checkbox defaultChecked={false} />\n        );\n      });\n\n      it('should display checkmark when clicked once', () => {\n        const input = wrapper.find('input');\n        input.node.checked = !input.node.checked;\n        input.simulate('change');\n        const enhancedSwitch = wrapper.find('EnhancedSwitch');\n        assert.ok(enhancedSwitch.prop('switched'));\n      });\n\n      it('should NOT display checkmark when clicked twice', () => {\n        const input = wrapper.find('input');\n        input.node.checked = !input.node.checked;\n        input.simulate('change');\n        input.node.checked = !input.node.checked;\n        input.simulate('change');\n        const enhancedSwitch = wrapper.find('EnhancedSwitch');\n        assert.notOk(enhancedSwitch.prop('switched'));\n      });\n    });\n  });\n\n  describe('props: onChange', () => {\n    it('should update the switch state when the component is uncontrolled', () => {\n      class CheckboxUncontrolled extends Component {\n        handleCheck = () => {\n          this.setState({});\n        };\n\n        render() {\n          return <Checkbox onCheck={this.handleCheck} />;\n        }\n      }\n\n      const wrapper = mountWithContext(<CheckboxUncontrolled />);\n      const enhancedSwitch = wrapper.find('EnhancedSwitch');\n      assert.strictEqual(enhancedSwitch.props().switched, false);\n\n      // Simulate a change on the input\n      const input = wrapper.find('input');\n      input.node.checked = !input.node.checked;\n      input.simulate('change');\n\n      assert.strictEqual(enhancedSwitch.props().switched, true,\n        'should take into account the input change state');\n    });\n  });\n});\n\n"]}