{"version":3,"sources":["../../src/Tabs/Tab.js"],"names":["getStyles","props","context","tabs","muiTheme","root","color","selected","selectedTextColor","textColor","fontWeight","fontSize","width","textTransform","padding","button","display","flexDirection","alignItems","justifyContent","height","label","icon","Tab","handleTouchTap","event","onTouchTap","value","render","index","onActive","buttonStyle","style","other","styles","iconElement","isValidElement","iconProps","marginBottom","type","muiName","cloneElement","rippleOpacity","rippleColor","propTypes","object","className","string","node","any","func","bool","contextTypes","isRequired"],"mappings":"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","file":"Tab.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport EnhancedButton from '../internal/EnhancedButton';\n\nfunction getStyles(props, context) {\n  const {tabs} = context.muiTheme;\n\n  return {\n    root: {\n      color: props.selected ? tabs.selectedTextColor : tabs.textColor,\n      fontWeight: 500,\n      fontSize: 14,\n      width: props.width,\n      textTransform: 'uppercase',\n      padding: 0,\n    },\n    button: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: (props.label && props.icon) ? 72 : 48,\n    },\n  };\n}\n\nclass Tab extends Component {\n  static muiName = 'Tab';\n\n  static propTypes = {\n    /**\n     * Override the inline-styles of the button element.\n     */\n    buttonStyle: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Sets the icon of the tab, you can pass `FontIcon` or `SvgIcon` elements.\n     */\n    icon: PropTypes.node,\n    /**\n     * @ignore\n     */\n    index: PropTypes.any,\n    /**\n     * Sets the text value of the tab item to the string specified.\n     */\n    label: PropTypes.node,\n    /**\n     * Fired when the active tab changes by touch or tap.\n     * Use this event to specify any functionality when an active tab changes.\n     * For example - we are using this to route to home when the third tab becomes active.\n     * This function will always recieve the active tab as it\\'s first argument.\n     */\n    onActive: PropTypes.func,\n    /**\n     * @ignore\n     * This property is overriden by the Tabs component.\n     */\n    onTouchTap: PropTypes.func,\n    /**\n     * @ignore\n     * Defines if the current tab is selected or not.\n     * The Tabs component is responsible for setting this property.\n     */\n    selected: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * If value prop passed to Tabs component, this value prop is also required.\n     * It assigns a value to the tab so that it can be selected by the Tabs.\n     */\n    value: PropTypes.any,\n    /**\n     * @ignore\n     * This property is overriden by the Tabs component.\n     */\n    width: PropTypes.string,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  handleTouchTap = (event) => {\n    if (this.props.onTouchTap) {\n      this.props.onTouchTap(this.props.value, event, this);\n    }\n  };\n\n  render() {\n    const {\n      icon,\n      index, // eslint-disable-line no-unused-vars\n      onActive, // eslint-disable-line no-unused-vars\n      onTouchTap, // eslint-disable-line no-unused-vars\n      selected, // eslint-disable-line no-unused-vars\n      label,\n      buttonStyle,\n      style,\n      value, // eslint-disable-line no-unused-vars\n      width, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props;\n\n    const styles = getStyles(this.props, this.context);\n\n    let iconElement;\n    if (icon && React.isValidElement(icon)) {\n      const iconProps = {\n        style: {\n          fontSize: 24,\n          color: styles.root.color,\n          marginBottom: label ? 5 : 0,\n        },\n      };\n      // If it's svg icon set color via props\n      if (icon.type.muiName !== 'FontIcon') {\n        iconProps.color = styles.root.color;\n      }\n      iconElement = React.cloneElement(icon, iconProps);\n    }\n\n    const rippleOpacity = 0.3;\n    const rippleColor = this.context.muiTheme.tabs.selectedTextColor;\n\n    return (\n      <EnhancedButton\n        {...other}\n        style={Object.assign(styles.root, style)}\n        focusRippleColor={rippleColor}\n        touchRippleColor={rippleColor}\n        focusRippleOpacity={rippleOpacity}\n        touchRippleOpacity={rippleOpacity}\n        onTouchTap={this.handleTouchTap}\n      >\n        <div style={Object.assign(styles.button, buttonStyle)} >\n          {iconElement}\n          {label}\n        </div>\n      </EnhancedButton>\n    );\n  }\n}\n\nexport default Tab;\n"]}