{"version":3,"sources":["../../src/Toolbar/ToolbarSeparator.js"],"names":["getStyles","props","context","muiTheme","baseTheme","toolbar","root","backgroundColor","separatorColor","display","height","spacing","desktopGutterMore","marginLeft","desktopGutter","width","ToolbarSeparator","render","className","style","other","prepareStyles","styles","muiName","propTypes","string","object","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,0BAI7BA,QAAQC,QAJqB;AAAA,MAE/BC,SAF+B,qBAE/BA,SAF+B;AAAA,MAG/BC,OAH+B,qBAG/BA,OAH+B;;;AAMjC,SAAO;AACLC,UAAM;AACJC,uBAAiBF,QAAQG,cADrB;AAEJC,eAAS,OAFL;AAGJC,cAAQN,UAAUO,OAAV,CAAkBC,iBAHtB;AAIJC,kBAAYT,UAAUO,OAAV,CAAkBG,aAJ1B;AAKJC,aAAO;AALH;AADD,GAAP;AASD;;IAEKC,gB;;;;;;;;6BAkBJC,M,qBAAS;AAAA,iBAKH,KAAKhB,KALF;AAAA,QAELiB,SAFK,UAELA,SAFK;AAAA,QAGLC,KAHK,UAGLA,KAHK;AAAA,QAIFC,KAJE;AAAA,QAOAC,aAPA,GAOiB,KAAKnB,OAAL,CAAaC,QAP9B,CAOAkB,aAPA;;AAQP,QAAMC,SAAStB,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;;AAEA,WACE,iEAAUkB,KAAV,IAAiB,WAAWF,SAA5B,EAAuC,OAAOG,cAAc,sBAAc,EAAd,EAAkBC,OAAOhB,IAAzB,EAA+Ba,KAA/B,CAAd,CAA9C,IADF;AAGD,G;;;4BA9BMI,O,GAAU,kB,SAEVC,S,GAAY;AACjB;;;AAGAN,aAAW,oBAAUO,MAJJ;AAKjB;;;AAGAN,SAAO,oBAAUO;AARA,C,SAWZC,Y,GAAe;AACpBxB,YAAU,oBAAUuB,MAAV,CAAiBE;AADP,C;kBAoBTZ,gB","file":"ToolbarSeparator.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {\n    baseTheme,\n    toolbar,\n  } = context.muiTheme;\n\n  return {\n    root: {\n      backgroundColor: toolbar.separatorColor,\n      display: 'block',\n      height: baseTheme.spacing.desktopGutterMore,\n      marginLeft: baseTheme.spacing.desktopGutter,\n      width: 1,\n    },\n  };\n}\n\nclass ToolbarSeparator extends Component {\n  static muiName = 'ToolbarSeparator';\n\n  static propTypes = {\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      className,\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    return (\n      <span {...other} className={className} style={prepareStyles(Object.assign({}, styles.root, style))} />\n    );\n  }\n}\n\nexport default ToolbarSeparator;\n"]}