{"version":3,"sources":["../../src/Toolbar/ToolbarGroup.js"],"names":["getStyles","props","context","firstChild","lastChild","muiTheme","baseTheme","button","toolbar","marginHorizontal","spacing","desktopGutter","marginVertical","height","styles","root","position","marginLeft","undefined","marginRight","display","justifyContent","alignItems","dropDownMenu","color","flex","whiteSpace","controlBg","backgroundColor","menuHoverColor","borderRadius","underline","margin","icon","cursor","lineHeight","paddingLeft","span","iconColor","ToolbarGroup","handleMouseLeaveFontIcon","style","event","target","zIndex","render","children","className","other","prepareStyles","newChildren","Children","map","currentChild","type","muiName","cloneElement","underlineStyle","hoverColor","propTypes","node","string","bool","object","defaultProps","contextTypes","isRequired"],"mappings":"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","file":"ToolbarGroup.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {\n    firstChild,\n    lastChild,\n  } = props;\n\n  const {\n    baseTheme,\n    button,\n    toolbar,\n  } = context.muiTheme;\n\n  const marginHorizontal = baseTheme.spacing.desktopGutter;\n  const marginVertical = (toolbar.height - button.height) / 2;\n\n  const styles = {\n    root: {\n      position: 'relative',\n      marginLeft: firstChild ? -marginHorizontal : undefined,\n      marginRight: lastChild ? -marginHorizontal : undefined,\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    dropDownMenu: {\n      root: {\n        color: toolbar.color, // removes hover color change, we want to keep it\n        marginRight: baseTheme.spacing.desktopGutter,\n        flex: 1,\n        whiteSpace: 'nowrap',\n      },\n      controlBg: {\n        backgroundColor: toolbar.menuHoverColor,\n        borderRadius: 0,\n      },\n      underline: {\n        display: 'none',\n      },\n    },\n    button: {\n      margin: `${marginVertical}px ${marginHorizontal}px`,\n      position: 'relative',\n    },\n    icon: {\n      root: {\n        cursor: 'pointer',\n        lineHeight: `${toolbar.height}px`,\n        paddingLeft: baseTheme.spacing.desktopGutter,\n      },\n    },\n    span: {\n      color: toolbar.iconColor,\n      lineHeight: `${toolbar.height}px`,\n    },\n  };\n\n  return styles;\n}\n\nclass ToolbarGroup extends Component {\n  static propTypes = {\n    /**\n     * Can be any node or number of nodes.\n     */\n    children: PropTypes.node,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Set this to true for if the `ToolbarGroup` is the first child of `Toolbar`\n     * to prevent setting the left gap.\n     */\n    firstChild: PropTypes.bool,\n    /**\n     * Set this to true for if the `ToolbarGroup` is the last child of `Toolbar`\n     * to prevent setting the right gap.\n     */\n    lastChild: PropTypes.bool,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    firstChild: false,\n    lastChild: false,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  handleMouseLeaveFontIcon(style) {\n    return (event) => {\n      event.target.style.zIndex = 'auto';\n      event.target.style.color = style.root.color;\n    };\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      firstChild, // eslint-disable-line no-unused-vars\n      lastChild, // eslint-disable-line no-unused-vars\n      style,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    const newChildren = React.Children.map(children, (currentChild) => {\n      if (!currentChild) {\n        return null;\n      }\n      if (!currentChild.type) {\n        return currentChild;\n      }\n      switch (currentChild.type.muiName) {\n        case 'DropDownMenu' :\n          return React.cloneElement(currentChild, {\n            style: Object.assign({}, styles.dropDownMenu.root, currentChild.props.style),\n            underlineStyle: styles.dropDownMenu.underline,\n          });\n        case 'RaisedButton' :\n        case 'FlatButton' :\n          return React.cloneElement(currentChild, {\n            style: Object.assign({}, styles.button, currentChild.props.style),\n          });\n        case 'FontIcon' :\n          return React.cloneElement(currentChild, {\n            style: Object.assign({}, styles.icon.root, currentChild.props.style),\n            color: currentChild.props.color || this.context.muiTheme.toolbar.iconColor,\n            hoverColor: currentChild.props.hoverColor || this.context.muiTheme.toolbar.hoverColor,\n          });\n        case 'ToolbarSeparator' :\n        case 'ToolbarTitle' :\n          return React.cloneElement(currentChild, {\n            style: Object.assign({}, styles.span, currentChild.props.style),\n          });\n        default:\n          return currentChild;\n      }\n    }, this);\n\n    return (\n      <div {...other} className={className} style={prepareStyles(Object.assign({}, styles.root, style))}>\n        {newChildren}\n      </div>\n    );\n  }\n}\n\nexport default ToolbarGroup;\n"]}