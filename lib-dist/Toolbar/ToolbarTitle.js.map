{"version":3,"sources":["../../src/Toolbar/ToolbarTitle.js"],"names":["getStyles","props","context","muiTheme","baseTheme","toolbar","root","paddingRight","spacing","desktopGutterLess","lineHeight","height","fontSize","titleFontSize","fontFamily","position","textOverflow","whiteSpace","overflow","ToolbarTitle","render","style","text","other","prepareStyles","styles","muiName","propTypes","className","string","object","node","contextTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAAA,0BAI7BA,QAAQC,QAJqB;AAAA,MAE/BC,SAF+B,qBAE/BA,SAF+B;AAAA,MAG/BC,OAH+B,qBAG/BA,OAH+B;;;AAMjC,SAAO;AACLC,UAAM;AACJC,oBAAcH,UAAUI,OAAV,CAAkBC,iBAD5B;AAEJC,kBAAeL,QAAQM,MAAvB,OAFI;AAGJC,gBAAUP,QAAQQ,aAHd;AAIJC,kBAAYV,UAAUU,UAJlB;AAKJC,gBAAU,UALN;AAMJC,oBAAc,UANV;AAOJC,kBAAY,QAPR;AAQJC,gBAAU;AARN;AADD,GAAP;AAYD;;IAEKC,Y;;;;;;;;yBAsBJC,M,qBAAS;AAAA,iBAKH,KAAKnB,KALF;AAAA,QAELoB,KAFK,UAELA,KAFK;AAAA,QAGLC,IAHK,UAGLA,IAHK;AAAA,QAIFC,KAJE;AAAA,QAOAC,aAPA,GAOiB,KAAKtB,OAAL,CAAaC,QAP9B,CAOAqB,aAPA;;AAQP,QAAMC,SAASzB,UAAU,KAAKC,KAAf,EAAsB,KAAKC,OAA3B,CAAf;;AAEA,WACE;AAAA;AAAA;AACE,eAAOsB,cAAc,sBAAc,EAAd,EAAkBC,OAAOnB,IAAzB,EAA+Be,KAA/B,CAAd;AADT,SAEME,KAFN;AAIGD;AAJH,KADF;AAQD,G;;;4BAvCMI,O,GAAU,c,SAEVC,S,GAAY;AACjB;;;AAGAC,aAAW,oBAAUC,MAJJ;AAKjB;;;AAGAR,SAAO,oBAAUS,MARA;AASjB;;;AAGAR,QAAM,oBAAUS;AAZC,C,SAeZC,Y,GAAe;AACpB7B,YAAU,oBAAU2B,MAAV,CAAiBG;AADP,C;kBAyBTd,Y","file":"ToolbarTitle.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getStyles(props, context) {\n  const {\n    baseTheme,\n    toolbar,\n  } = context.muiTheme;\n\n  return {\n    root: {\n      paddingRight: baseTheme.spacing.desktopGutterLess,\n      lineHeight: `${toolbar.height}px`,\n      fontSize: toolbar.titleFontSize,\n      fontFamily: baseTheme.fontFamily,\n      position: 'relative',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n    },\n  };\n}\n\nclass ToolbarTitle extends Component {\n  static muiName = 'ToolbarTitle';\n\n  static propTypes = {\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The text to be displayed.\n     */\n    text: PropTypes.node,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {\n      style,\n      text,\n      ...other\n    } = this.props;\n\n    const {prepareStyles} = this.context.muiTheme;\n    const styles = getStyles(this.props, this.context);\n\n    return (\n      <span\n        style={prepareStyles(Object.assign({}, styles.root, style))}\n        {...other}\n      >\n        {text}\n      </span>\n    );\n  }\n}\n\nexport default ToolbarTitle;\n"]}