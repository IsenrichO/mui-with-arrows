{"version":3,"sources":["../../src/utils/autoprefixer.spec.js"],"names":["describe","MSIE9_USER_AGENT","MSIE10_USER_AGENT","test","window","navigator","userAgent","savedNavigator","beforeEach","global","undefined","afterEach","it","autoprefix","stylePrepared","display","deepEqual","transform","WebkitTransform","msTransform","strictEqual"],"mappings":";;AAEA;;AACA;;;;;;AAHA;;AAKAA,SAAS,sBAAT,EAAiC,YAAM;AACrC,MAAMC,mBAAmB,iEAAzB;AACA,MAAMC,oBAAoB,kEAA1B;;AAEAF,WAAS,aAAT,EAAwB,YAAM;AAC5B;AACA,QAAI,YAAYG,IAAZ,CAAiBC,OAAOC,SAAP,CAAiBC,SAAlC,CAAJ,EAAkD;AAChD;AACD;;AAED,QAAIC,uBAAJ;;AAEAC,eAAW,YAAM;AACfD,uBAAiBE,OAAOJ,SAAxB;AACAI,aAAOJ,SAAP,GAAmBK,SAAnB;AACD,KAHD;;AAKAC,cAAU,YAAM;AACdF,aAAOJ,SAAP,GAAmBE,cAAnB;AACD,KAFD;;AAIAK,OAAG,iEAAH,EAAsE,YAAM;AAC1E,UAAMC,aAAa,4BAAa;AAC9BP,mBAAW;AADmB,OAAb,CAAnB;;AAIA,UAAMQ,gBAAgBD,WAAW;AAC/BE,iBAAS;AADsB,OAAX,CAAtB;;AAIA,mBAAOC,SAAP,CAAiBF,aAAjB,EAAgC;AAC9BC,iBAAS,iHADqB,EAAhC;AAGD,KAZD;AAaD,GA9BD;;AAgCAH,KAAG,6CAAH,EAAkD,YAAM;AACtD,QAAMC,aAAa,4BAAa;AAC9BP,iBAAW;AADmB,KAAb,CAAnB;;AAIA,QAAMQ,gBAAgBD,WAAW;AAC/BI,iBAAW,YADoB;AAE/BF,eAAS;AAFsB,KAAX,CAAtB;;AAKA,iBAAOC,SAAP,CAAiBF,aAAjB,EAAgC;AAC9BC,eAAS,MADqB;AAE9BE,iBAAW,YAFmB;AAG9BC,uBAAiB,YAHa;AAI9BC,mBAAa;AAJiB,KAAhC;AAMD,GAhBD;;AAkBAP,KAAG,4DAAH,EAAiE,YAAM;AACrE,QAAMC,aAAa,4BAAa;AAC9BP,iBAAWL;AADmB,KAAb,CAAnB;;AAIA,QAAMa,gBAAgBD,WAAW;AAC/BI,iBAAW;AADoB,KAAX,CAAtB;;AAIA,iBAAOD,SAAP,CAAiBF,aAAjB,EAAgC;AAC9BK,mBAAa;AADiB,KAAhC;AAGD,GAZD;;AAcAP,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAMC,aAAa,4BAAa;AAC9BP,iBAAW;AADmB,KAAb,CAAnB;;AAIA,iBAAOc,WAAP,CAAmBP,UAAnB,EAA+B,IAA/B;AACD,GAND;;AAQAD,KAAG,8CAAH,EAAmD,YAAM;AACvD,QAAMC,aAAa,4BAAa;AAC9BP,iBAAWJ;AADmB,KAAb,CAAnB;;AAIA,QAAMY,gBAAgBD,WAAW;AAC/BE,eAAS;AADsB,KAAX,CAAtB;;AAIA,iBAAOC,SAAP,CAAiBF,aAAjB,EAAgC;AAC9BC,eAAS;AADqB,KAAhC;AAGD,GAZD;AAaD,CAzFD","file":"autoprefixer.spec.js","sourcesContent":["/* eslint-env mocha */\n\nimport {assert} from 'chai';\nimport autoprefixer from './autoprefixer';\n\ndescribe('./utils/autoprefixer', () => {\n  const MSIE9_USER_AGENT = 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 7.1; Trident/5.0)';\n  const MSIE10_USER_AGENT = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)';\n\n  describe('server side', () => {\n    // skip tests on PhantomJS because __defineGetter__ method doesn't work\n    if (/PhantomJS/.test(window.navigator.userAgent)) {\n      return;\n    }\n\n    let savedNavigator;\n\n    beforeEach(() => {\n      savedNavigator = global.navigator;\n      global.navigator = undefined;\n    });\n\n    afterEach(() => {\n      global.navigator = savedNavigator;\n    });\n\n    it('should spread properties for display:flex when userAgent is all', () => {\n      const autoprefix = autoprefixer({\n        userAgent: 'all',\n      });\n\n      const stylePrepared = autoprefix({\n        display: 'inline-flex',\n      });\n\n      assert.deepEqual(stylePrepared, {\n        display: '-webkit-box; display: -moz-box; display: -ms-inline-flexbox; display: -webkit-inline-flex; display: inline-flex', // eslint-disable-line max-len\n      });\n    });\n  });\n\n  it('should prefix for all when userAgent is all', () => {\n    const autoprefix = autoprefixer({\n      userAgent: 'all',\n    });\n\n    const stylePrepared = autoprefix({\n      transform: 'rotate(90)',\n      display: 'flex',\n    });\n\n    assert.deepEqual(stylePrepared, {\n      display: 'flex',\n      transform: 'rotate(90)',\n      WebkitTransform: 'rotate(90)',\n      msTransform: 'rotate(90)',\n    });\n  });\n\n  it('should prefix for the userAgent when we provid a valid one', () => {\n    const autoprefix = autoprefixer({\n      userAgent: MSIE9_USER_AGENT,\n    });\n\n    const stylePrepared = autoprefix({\n      transform: 'rotate(90)',\n    });\n\n    assert.deepEqual(stylePrepared, {\n      msTransform: 'rotate(90)',\n    });\n  });\n\n  it('should not prefix when userAgent is false', () => {\n    const autoprefix = autoprefixer({\n      userAgent: false,\n    });\n\n    assert.strictEqual(autoprefix, null);\n  });\n\n  it('should not delete ‘display’ property on IE10', () => {\n    const autoprefix = autoprefixer({\n      userAgent: MSIE10_USER_AGENT,\n    });\n\n    const stylePrepared = autoprefix({\n      display: 'inline-block',\n    });\n\n    assert.deepEqual(stylePrepared, {\n      display: 'inline-block',\n    });\n  });\n});\n"]}