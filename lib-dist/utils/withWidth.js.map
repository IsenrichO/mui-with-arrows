{"version":3,"sources":["../../src/utils/withWidth.js"],"names":["withWidth","SMALL","MEDIUM","LARGE","options","largeWidth","mediumWidth","resizeInterval","MyComponent","state","width","handleResize","clearTimeout","deferTimer","setTimeout","updateWidth","componentDidMount","componentWillUnmount","innerWidth","window","setState","render","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;kBAOwBA,S;;AAPxB;;;;AACA;;;;;;AAEO,IAAMC,wBAAQ,CAAd;AACA,IAAMC,0BAAS,CAAf;AACA,IAAMC,wBAAQ,CAAd;;AAEQ,SAASH,SAAT,GAAiC;AAAA,MAAdI,OAAc,uEAAJ,EAAI;AAAA,4BAK1CA,OAL0C,CAE5CC,UAF4C;AAAA,MAE5CA,UAF4C,uCAE/B,GAF+B;AAAA,6BAK1CD,OAL0C,CAG5CE,WAH4C;AAAA,MAG5CA,WAH4C,wCAG9B,GAH8B;AAAA,8BAK1CF,OAL0C,CAI5CG,cAJ4C;AAAA,MAI5CA,cAJ4C,yCAI3B,GAJ2B;;;AAO9C,SAAO,UAACC,WAAD,EAAiB;AACtB;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,8JACEC,KADF,GACU;AACNC,iBAAO;AADD,SADV,QAaEC,YAbF,GAaiB,YAAM;AACnBC,uBAAa,MAAKC,UAAlB;AACA,gBAAKA,UAAL,GAAkBC,WAAW,YAAM;AACjC,kBAAKC,WAAL;AACD,WAFiB,EAEfR,cAFe,CAAlB;AAGD,SAlBH;AAAA;;AAAA,0BAKES,iBALF,gCAKsB;AAClB,aAAKD,WAAL;AACD,OAPH;;AAAA,0BASEE,oBATF,mCASyB;AACrBL,qBAAa,KAAKC,UAAlB;AACD,OAXH;;AAAA,0BAoBEE,WApBF,0BAoBgB;AACZ,YAAMG,aAAaC,OAAOD,UAA1B;AACA,YAAIR,cAAJ;;AAEA,YAAIQ,cAAcb,UAAlB,EAA8B;AAC5BK,kBAAQP,KAAR;AACD,SAFD,MAEO,IAAIe,cAAcZ,WAAlB,EAA+B;AACpCI,kBAAQR,MAAR;AACD,SAFM,MAEA;AAAE;AACPQ,kBAAQT,KAAR;AACD;;AAED,YAAIS,UAAU,KAAKD,KAAL,CAAWC,KAAzB,EAAgC;AAC9B,eAAKU,QAAL,CAAc;AACZV,mBAAOA;AADK,WAAd;AAGD;AACF,OArCH;;AAAA,0BAuCEW,MAvCF,qBAuCW;AACP,YAAMX,QAAQ,KAAKD,KAAL,CAAWC,KAAzB;;AAEA;;;;;;;;;;AAUA,YAAIA,UAAU,IAAd,EAAoB;AAClB,iBAAO,IAAP;AACD;;AAED,eACE;AAAA;AAAA,YAAe,QAAO,QAAtB,EAA+B,UAAU,KAAKC,YAA9C;AACE,wCAAC,WAAD;AACE,mBAAOD;AADT,aAEM,KAAKY,KAFX;AADF,SADF;AAQD,OAhEH;;AAAA;AAAA;AAkED,GAnED;AAoED","file":"withWidth.js","sourcesContent":["import React, {Component} from 'react';\nimport EventListener from 'react-event-listener';\n\nexport const SMALL = 1;\nexport const MEDIUM = 2;\nexport const LARGE = 3;\n\nexport default function withWidth(options = {}) {\n  const {\n    largeWidth = 992,\n    mediumWidth = 768,\n    resizeInterval = 166, // Corresponds to 10 frames at 60 Hz.\n  } = options;\n\n  return (MyComponent) => {\n    return class WithWidth extends Component {\n      state = {\n        width: null,\n      };\n\n      componentDidMount() {\n        this.updateWidth();\n      }\n\n      componentWillUnmount() {\n        clearTimeout(this.deferTimer);\n      }\n\n      handleResize = () => {\n        clearTimeout(this.deferTimer);\n        this.deferTimer = setTimeout(() => {\n          this.updateWidth();\n        }, resizeInterval);\n      };\n\n      updateWidth() {\n        const innerWidth = window.innerWidth;\n        let width;\n\n        if (innerWidth >= largeWidth) {\n          width = LARGE;\n        } else if (innerWidth >= mediumWidth) {\n          width = MEDIUM;\n        } else { // innerWidth < 768\n          width = SMALL;\n        }\n\n        if (width !== this.state.width) {\n          this.setState({\n            width: width,\n          });\n        }\n      }\n\n      render() {\n        const width = this.state.width;\n\n        /**\n         * When rendering the component on the server,\n         * we have no idea about the screen width.\n         * In order to prevent blinks and help the reconciliation\n         * we are not rendering the component.\n         *\n         * A better alternative would be to send client hints.\n         * But the browser support of this API is low:\n         * http://caniuse.com/#search=client%20hint\n         */\n        if (width === null) {\n          return null;\n        }\n\n        return (\n          <EventListener target=\"window\" onResize={this.handleResize}>\n            <MyComponent\n              width={width}\n              {...this.props}\n            />\n          </EventListener>\n        );\n      }\n    };\n  };\n}\n"]}