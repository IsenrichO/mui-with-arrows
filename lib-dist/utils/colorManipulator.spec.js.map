{"version":3,"sources":["../../src/utils/colorManipulator.spec.js"],"names":["describe","it","strictEqual","type","values","deepEqual"],"mappings":"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","file":"colorManipulator.spec.js","sourcesContent":["/* eslint-env mocha */\nimport {assert} from 'chai';\nimport {\n  convertColorToString,\n  convertHexToRGB,\n  darken,\n  decomposeColor,\n  emphasize,\n  fade,\n  getContrastRatio,\n  getLuminance,\n  lighten,\n} from './colorManipulator';\n\ndescribe('utils/colorManipulator', () => {\n  /**\n   * convertColorToString()\n   */\n  describe('convertColorToString', () => {\n    it('converts a decomposed rgb color object to a string` ', () => {\n      assert.strictEqual(\n        convertColorToString({type: 'rgb', values: [255, 255, 255]}),\n        'rgb(255, 255, 255)'\n      );\n    });\n\n    it('converts a decomposed rgba color object to a string` ', () => {\n      assert.strictEqual(\n        convertColorToString({type: 'rgba', values: [255, 255, 255, 0.5]}),\n        'rgba(255, 255, 255, 0.5)'\n      );\n    });\n\n    it('converts a decomposed hsl color object to a string` ', () => {\n      assert.strictEqual(\n        convertColorToString({type: 'hsl', values: [100, 50, 25]}),\n        'hsl(100, 50%, 25%)'\n      );\n    });\n\n    it('converts a decomposed hsla color object to a string` ', () => {\n      assert.strictEqual(\n        convertColorToString({type: 'hsla', values: [100, 50, 25, 0.5]}),\n        'hsla(100, 50%, 25%, 0.5)'\n      );\n    });\n  });\n\n  /**\n   * convertHexToRGB()\n   */\n  describe('convertHexToRGB', () => {\n    it('converts a short hex color to an rgb color` ', () => {\n      assert.strictEqual(\n        convertHexToRGB('#9f3'),\n        'rgb(153, 255, 51)'\n      );\n    });\n\n    it('converts a long hex color to an rgb color` ', () => {\n      assert.strictEqual(\n        convertHexToRGB('#A94FD3'),\n        'rgb(169, 79, 211)'\n      );\n    });\n  });\n\n  /**\n   * decomposeColor()\n   */\n  describe('decomposeColor', () => {\n    it('converts an rgb color string to an object with `type` and `value` keys', () => {\n      const {type, values} = decomposeColor('rgb(255, 255, 255)');\n      assert.strictEqual(type, 'rgb');\n      assert.deepEqual(values, [255, 255, 255]);\n    });\n\n    it('converts an rgba color string to an object with `type` and `value` keys', () => {\n      const {type, values} = decomposeColor('rgba(255, 255, 255, 0.5)');\n      assert.strictEqual(type, 'rgba');\n      assert.deepEqual(values, [255, 255, 255, 0.5]);\n    });\n\n    it('converts an hsl color string to an object with `type` and `value` keys', () => {\n      const {type, values} = decomposeColor('hsl(100, 50%, 25%)');\n      assert.strictEqual(type, 'hsl');\n      assert.deepEqual(values, [100, 50, 25]);\n    });\n\n    it('converts an hsla color string to an object with `type` and `value` keys', () => {\n      const {type, values} = decomposeColor('hsla(100, 50%, 25%, 0.5)');\n      assert.strictEqual(type, 'hsla');\n      assert.deepEqual(values, [100, 50, 25, 0.5]);\n    });\n  });\n\n  /**\n   * getContrastRatio()\n   */\n  describe('getContrastRatio', () => {\n    it('returns a ratio of 21 for black : white', () => {\n      assert.strictEqual(\n        getContrastRatio('#000', '#FFF'),\n        21\n      );\n    });\n\n    it('returns a ratio of 1 for black : black', () => {\n      assert.strictEqual(\n        getContrastRatio('#000', '#000'),\n        1\n      );\n    });\n\n    it('returns a ratio of 1 for white : white', () => {\n      assert.strictEqual(\n        getContrastRatio('#FFF', '#FFF'),\n        1\n      );\n    });\n\n    it('returns a ratio of 3.92 for dark-grey : light-grey', () => {\n      assert.strictEqual(\n        getContrastRatio('#707070', '#E5E5E5'),\n        3.93\n      );\n    });\n\n    it('returns a ratio of 3.93 for black : light-grey', () => {\n      assert.strictEqual(\n        getContrastRatio('#000', '#888'),\n        5.92\n      );\n    });\n  });\n\n  /**\n   * getLuminance()\n   */\n  describe('getLuminance', () => {\n    it('returns a luminance of 1 for rgb white', () => {\n      assert.strictEqual(\n        getLuminance('rgb(0, 0, 0)'),\n        0\n      );\n    });\n\n    it('returns a luminance of 1 for rgb white', () => {\n      assert.strictEqual(\n        getLuminance('rgb(255, 255, 255)'),\n        1\n      );\n    });\n\n    it('returns a valid luminance for rgb mid-grey', () => {\n      assert.strictEqual(\n        getLuminance('rgb(127, 127, 127)'),\n        0.212\n      );\n    });\n\n    it('returns a valid luminance for an rgb color', () => {\n      assert.strictEqual(\n        getLuminance('rgb(255, 127, 0)'),\n        0.364\n      );\n    });\n\n    it('returns a normalized luminance from an hsl color', () => {\n      assert.strictEqual(\n        getLuminance('hsl(100, 100%, 50%)'),\n        0.5\n      );\n    });\n  });\n\n  /**\n   * emphasize()\n   */\n  describe('emphasize', () => {\n    it('lightens a dark rgb color with the coefficient provided', () => {\n      assert.strictEqual(\n        emphasize('rgb(1, 2, 3)', 0.4),\n        lighten('rgb(1, 2, 3)', 0.4)\n      );\n    });\n\n    it('darkens a light rgb color with the coefficient provided', () => {\n      assert.strictEqual(\n        emphasize('rgb(250, 240, 230)', 0.3),\n        darken('rgb(250, 240, 230)', 0.3)\n      );\n    });\n\n    it('lightens a dark rgb color with the c0efficient 0.15 by default', () => {\n      assert.strictEqual(\n        emphasize('rgb(1, 2, 3)'),\n        lighten('rgb(1, 2, 3)', 0.15)\n      );\n    });\n\n    it('darkens a light rgb color with the coefficient 0.15 by default', () => {\n      assert.strictEqual(\n        emphasize('rgb(250, 240, 230)'),\n        darken('rgb(250, 240, 230)', 0.15)\n      );\n    });\n  });\n\n  /**\n   * fade()\n   */\n  describe('fade', () => {\n    it('converts an rgb color to an rgba color with the value provided', () => {\n      assert.strictEqual(\n        fade('rgb(1, 2, 3)', 0.4),\n        'rgba(1, 2, 3, 0.4)'\n      );\n    });\n\n    it('updates an rgba color with the alpha value provided', () => {\n      assert.strictEqual(\n        fade('rgba(255, 0, 0, 0.2)', 0.5),\n        'rgba(255, 0, 0, 0.5)'\n      );\n    });\n\n    it('converts an hsl color to an hsla color with the value provided', () => {\n      assert.strictEqual(\n        fade('hsl(0, 100%, 50%)', 0.1),\n        'hsla(0, 100%, 50%, 0.1)'\n      );\n    });\n\n    it('updates an hsla color with the alpha value provided', () => {\n      assert.strictEqual(\n        fade('hsla(0, 100%, 50%, 0.2)', 0.5),\n        'hsla(0, 100%, 50%, 0.5)'\n      );\n    });\n  });\n\n  /**\n   * darken()\n   */\n  describe('darken', () => {\n    it(\"doesn't modify rgb black\", () => {\n      assert.strictEqual(\n        darken('rgb(0, 0, 0)', 0.1),\n        'rgb(0, 0, 0)'\n      );\n    });\n\n    it(\"doesn't overshoot if an above-range coefficient is supplied\", () => {\n      assert.strictEqual(\n        darken('rgb(0, 127, 255)', 1.5),\n        'rgb(0, 0, 0)'\n      );\n    });\n\n    it(\"doesn't overshoot if a below-range coefficient is supplied\", () => {\n      assert.strictEqual(\n        darken('rgb(0, 127, 255)', -0.1),\n        'rgb(0, 127, 255)'\n      );\n    });\n\n    it('darkens rgb white to black when coefficient is 1', () => {\n      assert.strictEqual(\n        darken('rgb(255, 255, 255)', 1),\n        'rgb(0, 0, 0)'\n      );\n    });\n\n    it('retains the alpha value in an rgba color', () => {\n      assert.strictEqual(\n        darken('rgb(0, 0, 0, 0.5)', 0.1),\n        'rgb(0, 0, 0, 0.5)'\n      );\n    });\n\n    it('darkens rgb white by 10% when coefficient is 0.1', () => {\n      assert.strictEqual(\n        darken('rgb(255, 255, 255)', 0.1),\n        'rgb(229, 229, 229)'\n      );\n    });\n\n    it('darkens rgb red by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        darken('rgb(255, 0, 0)', 0.5),\n        'rgb(127, 0, 0)'\n      );\n    });\n\n    it('darkens rgb grey by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        darken('rgb(127, 127, 127)', 0.5),\n        'rgb(63, 63, 63)'\n      );\n    });\n\n    it(\"doesn't modify rgb colors when coefficient is 0\", () => {\n      assert.strictEqual(\n        darken('rgb(255, 255, 255)', 0),\n        'rgb(255, 255, 255)'\n      );\n    });\n\n    it('darkens hsl red by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        darken('hsl(0, 100%, 50%)', 0.5),\n        'hsl(0, 100%, 25%)'\n      );\n    });\n\n    it(\"doesn't modify hsl colors when coefficient is 0\", () => {\n      assert.strictEqual(\n        darken('hsl(0, 100%, 50%)', 0),\n        'hsl(0, 100%, 50%)'\n      );\n    });\n\n    it(\"doesn't modify hsl colors when l is 0%\", () => {\n      assert.strictEqual(\n        darken('hsl(0, 50%, 0%)', 0.5),\n        'hsl(0, 50%, 0%)'\n      );\n    });\n  });\n\n  /**\n   * lighten()\n   */\n  describe('lighten', () => {\n    it(\"doesn't modify rgb white\", () => {\n      assert.strictEqual(\n        lighten('rgb(255, 255, 255)', 0.1),\n        'rgb(255, 255, 255)'\n      );\n    });\n\n    it(\"doesn't overshoot if an above-range coefficient is supplied\", () => {\n      assert.strictEqual(\n        lighten('rgb(0, 127, 255)', 1.5),\n        'rgb(255, 255, 255)'\n      );\n    });\n\n    it(\"doesn't overshoot if a below-range coefficient is supplied\", () => {\n      assert.strictEqual(\n        lighten('rgb(0, 127, 255)', -0.1),\n        'rgb(0, 127, 255)'\n      );\n    });\n\n    it('lightens rgb black to white when coefficient is 1', () => {\n      assert.strictEqual(\n        lighten('rgb(0, 0, 0)', 1),\n        'rgb(255, 255, 255)'\n      );\n    });\n\n    it('retains the alpha value in an rgba color', () => {\n      assert.strictEqual(\n        lighten('rgb(255, 255, 255, 0.5)', 0.1),\n        'rgb(255, 255, 255, 0.5)'\n      );\n    });\n\n    it('lightens rgb black by 10% when coefficient is 0.1', () => {\n      assert.strictEqual(\n        lighten('rgb(0, 0, 0)', 0.1),\n        'rgb(25, 25, 25)'\n      );\n    });\n\n    it('lightens rgb red by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        lighten('rgb(255, 0, 0)', 0.5),\n        'rgb(255, 127, 127)'\n      );\n    });\n\n    it('lightens rgb grey by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        lighten('rgb(127, 127, 127)', 0.5),\n        'rgb(191, 191, 191)'\n      );\n    });\n\n    it(\"doesn't modify rgb colors when coefficient is 0\", () => {\n      assert.strictEqual(\n        lighten('rgb(127, 127, 127)', 0),\n        'rgb(127, 127, 127)'\n      );\n    });\n\n    it('lightens hsl red by 50% when coefficient is 0.5', () => {\n      assert.strictEqual(\n        lighten('hsl(0, 100%, 50%)', 0.5),\n        'hsl(0, 100%, 75%)'\n      );\n    });\n\n    it(\"doesn't modify hsl colors when coefficient is 0\", () => {\n      assert.strictEqual(\n        lighten('hsl(0, 100%, 50%)', 0),\n        'hsl(0, 100%, 50%)'\n      );\n    });\n\n    it(\"doesn't modify hsl colors when `l` is 100%\", () => {\n      assert.strictEqual(\n        lighten('hsl(0, 50%, 100%)', 0.5),\n        'hsl(0, 50%, 100%)'\n      );\n    });\n  });\n});\n"]}