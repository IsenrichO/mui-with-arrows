{"version":3,"sources":["../../src/utils/colorManipulator.js"],"names":["convertColorToString","convertHexToRGB","decomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","clamp","value","min","max","color","type","values","indexOf","i","parseInt","colorString","length","extendedColor","charAt","r","substr","g","b","marker","substring","split","map","parseFloat","foreground","background","lumA","lumB","contrastRatio","Math","Number","toFixed","rgb","val","pow","coefficient"],"mappings":"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","file":"colorManipulator.js","sourcesContent":["import warning from 'warning';\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function convertColorToString(color) {\n  const {type, values} = color;\n\n  if (type.indexOf('rgb') > -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    for (let i = 0; i < 3; i++) {\n      values[i] = parseInt(values[i]);\n    }\n  }\n\n  let colorString;\n\n  if (type.indexOf('hsl') > -1) {\n    colorString = `${color.type}(${values[0]}, ${values[1]}%, ${values[2]}%`;\n  } else {\n    colorString = `${color.type}(${values[0]}, ${values[1]}, ${values[2]}`;\n  }\n\n  if (values.length === 4) {\n    colorString += `, ${color.values[3]})`;\n  } else {\n    colorString += ')';\n  }\n\n  return colorString;\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n *  @returns {string} A CSS rgb color string\n */\nexport function convertHexToRGB(color) {\n  if (color.length === 4) {\n    let extendedColor = '#';\n    for (let i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n    color = extendedColor;\n  }\n\n  const values = {\n    r:\tparseInt(color.substr(1, 2), 16),\n    g:\tparseInt(color.substr(3, 2), 16),\n    b:\tparseInt(color.substr(5, 2), 16),\n  };\n\n  return `rgb(${values.r}, ${values.g}, ${values.b})`;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values and color names.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{type: string, values: number[]}} A MUI color object\n */\nexport function decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  const marker = color.indexOf('(');\n\n  warning(marker !== -1, `Material-UI: The ${color} color was not parsed correctly,\n  because it has an unsupported format (color name or RGB %). This may cause issues in component rendering.`);\n\n  const type = color.substring(0, marker);\n  let values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map((value) => parseFloat(value));\n\n  return {type, values};\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  const contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n\n  if (color.type.indexOf('rgb') > -1) {\n    const rgb = color.values.map((val) => {\n      val /= 255; // normalized\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\n  } else if (color.type.indexOf('hsl') > -1) {\n    return color.values[2] / 100;\n  }\n}\n\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ?\n    darken(color, coefficient) :\n    lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value, 0, 1);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return convertColorToString(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (let i = 0; i < 3; i++) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return convertColorToString(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (let i = 0; i < 3; i++) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}\n"]}