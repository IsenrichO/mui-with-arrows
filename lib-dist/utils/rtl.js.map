{"version":3,"sources":["../../src/utils/rtl.js"],"names":["rtl","reTranslate","reSkew","muiTheme","isRtl","style","directionInvariant","flippedAttributes","right","left","marginRight","marginLeft","paddingRight","paddingLeft","borderRight","borderLeft","newStyle","forEach","attribute","value","key","hasOwnProperty","matches","match","replace","parseFloat","indexOf"],"mappings":";;;;;;;;;;kBAQwBA,G;;;;AARxB,IAAMC,cAAc,sCAApB;AACA,IAAMC,SAAS,gFAAf;;AAEA;;;;;AAKe,SAASF,GAAT,CAAaG,QAAb,EAAuB;AACpC,MAAIA,SAASC,KAAb,EAAoB;AAClB,WAAO,UAACC,KAAD,EAAW;AAChB,UAAIA,MAAMC,kBAAN,KAA6B,IAAjC,EAAuC;AACrC,eAAOD,KAAP;AACD;;AAED,UAAME,oBAAoB;AACxB;AACAC,eAAO,MAFiB;AAGxBC,cAAM,OAHkB;AAIxBC,qBAAa,YAJW;AAKxBC,oBAAY,aALY;AAMxBC,sBAAc,aANU;AAOxBC,qBAAa,cAPW;AAQxBC,qBAAa,YARW;AASxBC,oBAAY;AATY,OAA1B;;AAYA,UAAMC,WAAW,EAAjB;;AAEA,0BAAYX,KAAZ,EAAmBY,OAAnB,CAA2B,UAASC,SAAT,EAAoB;AAC7C,YAAIC,QAAQd,MAAMa,SAAN,CAAZ;AACA,YAAIE,MAAMF,SAAV;;AAEA,YAAIX,kBAAkBc,cAAlB,CAAiCH,SAAjC,CAAJ,EAAiD;AAC/CE,gBAAMb,kBAAkBW,SAAlB,CAAN;AACD;;AAED,gBAAQA,SAAR;AACE,eAAK,OAAL;AACA,eAAK,WAAL;AACE,gBAAIC,UAAU,OAAd,EAAuB;AACrBA,sBAAQ,MAAR;AACD,aAFD,MAEO,IAAIA,UAAU,MAAd,EAAsB;AAC3BA,sBAAQ,OAAR;AACD;AACD;;AAEF,eAAK,WAAL;AACE,gBAAIA,UAAU,KAAd,EAAqB;AACnBA,sBAAQ,KAAR;AACD,aAFD,MAEO,IAAIA,UAAU,KAAd,EAAqB;AAC1BA,sBAAQ,KAAR;AACD;AACD;;AAEF,eAAK,WAAL;AACE,gBAAI,CAACA,KAAL,EAAY;AACZ,gBAAIG,gBAAJ;AACA,gBAAKA,UAAUH,MAAMI,KAAN,CAAYtB,WAAZ,CAAf,EAA0C;AACxCkB,sBAAQA,MAAMK,OAAN,CAAcF,QAAQ,CAAR,CAAd,EAA0BA,QAAQ,CAAR,IAAc,CAACG,WAAWH,QAAQ,CAAR,CAAX,CAAzC,CAAR;AACD;AACD,gBAAKA,UAAUH,MAAMI,KAAN,CAAYrB,MAAZ,CAAf,EAAqC;AACnCiB,sBAAQA,MAAMK,OAAN,CAAcF,QAAQ,CAAR,CAAd,EAA0BA,QAAQ,CAAR,IAAc,CAACG,WAAWH,QAAQ,CAAR,CAAX,CAAf,GAAyCA,QAAQ,CAAR,CAAzC,GAChCA,QAAQ,CAAR,CADgC,WACb,CAACG,WAAWH,QAAQ,CAAR,CAAX,CAAF,GAA4BA,QAAQ,CAAR,CADd,IAC6B,EADvD,CAAR;AAGD;AACD;;AAEF,eAAK,iBAAL;AACE,gBAAI,CAACH,KAAL,EAAY;AACZ,gBAAIA,MAAMO,OAAN,CAAc,OAAd,IAAyB,CAAC,CAA9B,EAAiC;AAC/BP,sBAAQA,MAAMK,OAAN,CAAc,OAAd,EAAuB,MAAvB,CAAR;AACD,aAFD,MAEO,IAAIL,MAAMO,OAAN,CAAc,MAAd,IAAwB,CAAC,CAA7B,EAAgC;AACrCP,sBAAQA,MAAMK,OAAN,CAAc,MAAd,EAAsB,OAAtB,CAAR;AACD;AACD;AAtCJ;;AAyCAR,iBAASI,GAAT,IAAgBD,KAAhB;AACD,OAlDD;;AAoDA,aAAOH,QAAP;AACD,KAxED;AAyED;AACF","file":"rtl.js","sourcesContent":["const reTranslate = /((^|\\s)translate(3d|X)?\\()(\\-?[\\d]+)/;\nconst reSkew = /((^|\\s)skew(x|y)?\\()\\s*(\\-?[\\d]+)(deg|rad|grad)(,\\s*(\\-?[\\d]+)(deg|rad|grad))?/;\n\n/**\n * This function ensures that `style` supports both ltr and rtl directions by\n * checking `styleConstants` in `muiTheme` and replacing attribute keys if\n * necessary.\n */\nexport default function rtl(muiTheme) {\n  if (muiTheme.isRtl) {\n    return (style) => {\n      if (style.directionInvariant === true) {\n        return style;\n      }\n\n      const flippedAttributes = {\n        // Keys and their replacements.\n        right: 'left',\n        left: 'right',\n        marginRight: 'marginLeft',\n        marginLeft: 'marginRight',\n        paddingRight: 'paddingLeft',\n        paddingLeft: 'paddingRight',\n        borderRight: 'borderLeft',\n        borderLeft: 'borderRight',\n      };\n\n      const newStyle = {};\n\n      Object.keys(style).forEach(function(attribute) {\n        let value = style[attribute];\n        let key = attribute;\n\n        if (flippedAttributes.hasOwnProperty(attribute)) {\n          key = flippedAttributes[attribute];\n        }\n\n        switch (attribute) {\n          case 'float':\n          case 'textAlign':\n            if (value === 'right') {\n              value = 'left';\n            } else if (value === 'left') {\n              value = 'right';\n            }\n            break;\n\n          case 'direction':\n            if (value === 'ltr') {\n              value = 'rtl';\n            } else if (value === 'rtl') {\n              value = 'ltr';\n            }\n            break;\n\n          case 'transform':\n            if (!value) break;\n            let matches;\n            if ((matches = value.match(reTranslate))) {\n              value = value.replace(matches[0], matches[1] + (-parseFloat(matches[4])) );\n            }\n            if ((matches = value.match(reSkew))) {\n              value = value.replace(matches[0], matches[1] + (-parseFloat(matches[4])) + matches[5] +\n                matches[6] ? `, ${(-parseFloat(matches[7])) + matches[8]}` : ''\n              );\n            }\n            break;\n\n          case 'transformOrigin':\n            if (!value) break;\n            if (value.indexOf('right') > -1) {\n              value = value.replace('right', 'left');\n            } else if (value.indexOf('left') > -1) {\n              value = value.replace('left', 'right');\n            }\n            break;\n        }\n\n        newStyle[key] = value;\n      });\n\n      return newStyle;\n    };\n  }\n}\n\n"]}